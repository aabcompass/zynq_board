-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scurve_adder36 is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream0_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_stream0_TVALID : IN STD_LOGIC;
    in_stream0_TREADY : OUT STD_LOGIC;
    in_stream0_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    in_stream0_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    in_stream0_TUSER : IN STD_LOGIC_VECTOR (5 downto 0);
    in_stream0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream0_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream0_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of scurve_adder36 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "scurve_adder36,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z035ffg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.426000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=0,HLS_SYN_FF=3976,HLS_SYN_LUT=2246}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_8F : STD_LOGIC_VECTOR (7 downto 0) := "10001111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_stream0_V_data_V_0_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal in_stream0_V_data_V_0_vld_in : STD_LOGIC;
    signal in_stream0_V_data_V_0_vld_out : STD_LOGIC;
    signal in_stream0_V_data_V_0_ack_in : STD_LOGIC;
    signal in_stream0_V_data_V_0_ack_out : STD_LOGIC;
    signal in_stream0_V_data_V_0_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal in_stream0_V_data_V_0_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal in_stream0_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_stream0_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_stream0_V_data_V_0_sel : STD_LOGIC;
    signal in_stream0_V_data_V_0_load_A : STD_LOGIC;
    signal in_stream0_V_data_V_0_load_B : STD_LOGIC;
    signal in_stream0_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream0_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_stream0_V_dest_V_0_vld_in : STD_LOGIC;
    signal in_stream0_V_dest_V_0_ack_out : STD_LOGIC;
    signal in_stream0_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_data_V_1_data_out : STD_LOGIC_VECTOR (511 downto 0);
    signal out_stream_V_data_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_data_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_data_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_data_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (511 downto 0);
    signal out_stream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (511 downto 0);
    signal out_stream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_data_V_1_sel : STD_LOGIC;
    signal out_stream_V_data_V_1_load_A : STD_LOGIC;
    signal out_stream_V_data_V_1_load_B : STD_LOGIC;
    signal out_stream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_V_keep_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_keep_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_keep_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_keep_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_keep_V_1_sel : STD_LOGIC;
    signal out_stream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_V_strb_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_strb_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_strb_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_strb_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_strb_V_1_sel : STD_LOGIC;
    signal out_stream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_user_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal out_stream_V_user_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_user_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_user_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_user_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_user_V_1_sel : STD_LOGIC;
    signal out_stream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_last_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_last_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_last_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_last_V_1_sel : STD_LOGIC;
    signal out_stream_V_last_V_1_load_A : STD_LOGIC;
    signal out_stream_V_last_V_1_load_B : STD_LOGIC;
    signal out_stream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_V_id_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_id_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_id_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_id_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_id_V_1_sel : STD_LOGIC;
    signal out_stream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal out_stream_V_dest_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_dest_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_dest_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_dest_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_dest_V_1_sel : STD_LOGIC;
    signal out_stream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal N_ADDS : STD_LOGIC_VECTOR (15 downto 0);
    signal in_stream0_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_1286 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond4_reg_1641 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal exitcond4_reg_1641_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_763 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_1_reg_774 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_785 : STD_LOGIC_VECTOR (7 downto 0);
    signal N_ADDS_read_reg_1267 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_fu_802_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bound_fu_850_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal bound_reg_1281 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_flatten_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_1286_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1286_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1286_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_861_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal i_1_mid2_fu_873_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_mid2_reg_1295 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_5_fu_881_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_910_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_1305 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_1305_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_0_addr_2_reg_1310 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_0_addr_2_reg_1310_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_0_addr_2_reg_1310_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_1_reg_1316 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_1_reg_1316_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_1_addr_2_reg_1321 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_1_addr_2_reg_1321_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_1_addr_2_reg_1321_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_2_reg_1327 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_2_reg_1327_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_2_addr_2_reg_1332 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_2_addr_2_reg_1332_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_2_addr_2_reg_1332_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_3_reg_1338 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_3_reg_1338_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_3_addr_2_reg_1343 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_3_addr_2_reg_1343_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_3_addr_2_reg_1343_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_4_reg_1349 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_4_reg_1349_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_4_addr_2_reg_1354 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_4_addr_2_reg_1354_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_4_addr_2_reg_1354_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_5_reg_1360 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_5_reg_1360_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_5_addr_2_reg_1365 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_5_addr_2_reg_1365_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_5_addr_2_reg_1365_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_6_reg_1371 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_6_reg_1371_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_6_addr_2_reg_1376 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_6_addr_2_reg_1376_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_6_addr_2_reg_1376_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_7_reg_1382 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_7_reg_1382_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_7_addr_2_reg_1387 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_7_addr_2_reg_1387_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_7_addr_2_reg_1387_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_8_reg_1393 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_8_reg_1393_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_8_addr_2_reg_1398 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_8_addr_2_reg_1398_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_8_addr_2_reg_1398_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_9_reg_1404 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_9_reg_1404_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_9_addr_2_reg_1409 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_9_addr_2_reg_1409_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_9_addr_2_reg_1409_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_s_reg_1415 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_s_reg_1415_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_10_addr_2_reg_1420 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_10_addr_2_reg_1420_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_10_addr_2_reg_1420_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_10_reg_1426 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_10_reg_1426_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_11_addr_2_reg_1431 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_11_addr_2_reg_1431_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_11_addr_2_reg_1431_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_11_reg_1437 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_11_reg_1437_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_12_addr_2_reg_1442 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_12_addr_2_reg_1442_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_12_addr_2_reg_1442_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_12_reg_1448 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_12_reg_1448_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_13_addr_2_reg_1453 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_13_addr_2_reg_1453_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_13_addr_2_reg_1453_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_13_reg_1459 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_13_reg_1459_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_14_addr_2_reg_1464 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_14_addr_2_reg_1464_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_14_addr_2_reg_1464_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_14_reg_1470 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_14_reg_1470_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_15_addr_2_reg_1475 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_15_addr_2_reg_1475_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_15_addr_2_reg_1475_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_0_load_1_reg_1481 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal sum_pix_ch0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_1_load_1_reg_1486 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_2_load_1_reg_1491 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_3_load_1_reg_1496 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_4_load_1_reg_1501 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_5_load_1_reg_1506 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_6_load_1_reg_1511 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_7_load_1_reg_1516 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_8_load_1_reg_1521 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_9_load_1_reg_1526 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_10_load_1_reg_1531 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_11_load_1_reg_1536 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_12_load_1_reg_1541 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_13_load_1_reg_1546 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_14_load_1_reg_1551 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_15_load_1_reg_1556 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1067_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1561 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_1_fu_1075_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_1_reg_1566 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_2_fu_1083_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_2_reg_1571 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_3_fu_1091_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_3_reg_1576 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_4_fu_1099_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_4_reg_1581 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_5_fu_1107_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_5_reg_1586 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_6_fu_1115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_6_reg_1591 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_7_fu_1123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_7_reg_1596 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_8_fu_1131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_8_reg_1601 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_9_fu_1139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_9_reg_1606 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_s_fu_1147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_s_reg_1611 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_10_fu_1155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_10_reg_1616 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_11_fu_1163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_11_reg_1621 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_12_fu_1171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_12_reg_1626 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_13_fu_1179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_13_reg_1631 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_14_fu_1187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_14_reg_1636 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_4_fu_1198_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_last_V_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1650 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_1_fu_1230_p17 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state10 : STD_LOGIC;
    signal sum_pix_ch0_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_0_ce0 : STD_LOGIC;
    signal sum_pix_ch0_0_we0 : STD_LOGIC;
    signal sum_pix_ch0_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_0_ce1 : STD_LOGIC;
    signal sum_pix_ch0_0_we1 : STD_LOGIC;
    signal sum_pix_ch0_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_1_ce0 : STD_LOGIC;
    signal sum_pix_ch0_1_we0 : STD_LOGIC;
    signal sum_pix_ch0_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_1_ce1 : STD_LOGIC;
    signal sum_pix_ch0_1_we1 : STD_LOGIC;
    signal sum_pix_ch0_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_2_ce0 : STD_LOGIC;
    signal sum_pix_ch0_2_we0 : STD_LOGIC;
    signal sum_pix_ch0_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_2_ce1 : STD_LOGIC;
    signal sum_pix_ch0_2_we1 : STD_LOGIC;
    signal sum_pix_ch0_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_3_ce0 : STD_LOGIC;
    signal sum_pix_ch0_3_we0 : STD_LOGIC;
    signal sum_pix_ch0_3_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_3_ce1 : STD_LOGIC;
    signal sum_pix_ch0_3_we1 : STD_LOGIC;
    signal sum_pix_ch0_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_4_ce0 : STD_LOGIC;
    signal sum_pix_ch0_4_we0 : STD_LOGIC;
    signal sum_pix_ch0_4_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_4_ce1 : STD_LOGIC;
    signal sum_pix_ch0_4_we1 : STD_LOGIC;
    signal sum_pix_ch0_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_5_ce0 : STD_LOGIC;
    signal sum_pix_ch0_5_we0 : STD_LOGIC;
    signal sum_pix_ch0_5_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_5_ce1 : STD_LOGIC;
    signal sum_pix_ch0_5_we1 : STD_LOGIC;
    signal sum_pix_ch0_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_6_ce0 : STD_LOGIC;
    signal sum_pix_ch0_6_we0 : STD_LOGIC;
    signal sum_pix_ch0_6_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_6_ce1 : STD_LOGIC;
    signal sum_pix_ch0_6_we1 : STD_LOGIC;
    signal sum_pix_ch0_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_7_ce0 : STD_LOGIC;
    signal sum_pix_ch0_7_we0 : STD_LOGIC;
    signal sum_pix_ch0_7_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_7_ce1 : STD_LOGIC;
    signal sum_pix_ch0_7_we1 : STD_LOGIC;
    signal sum_pix_ch0_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_8_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_8_ce0 : STD_LOGIC;
    signal sum_pix_ch0_8_we0 : STD_LOGIC;
    signal sum_pix_ch0_8_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_8_ce1 : STD_LOGIC;
    signal sum_pix_ch0_8_we1 : STD_LOGIC;
    signal sum_pix_ch0_8_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_9_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_9_ce0 : STD_LOGIC;
    signal sum_pix_ch0_9_we0 : STD_LOGIC;
    signal sum_pix_ch0_9_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_9_ce1 : STD_LOGIC;
    signal sum_pix_ch0_9_we1 : STD_LOGIC;
    signal sum_pix_ch0_9_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_10_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_10_ce0 : STD_LOGIC;
    signal sum_pix_ch0_10_we0 : STD_LOGIC;
    signal sum_pix_ch0_10_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_10_ce1 : STD_LOGIC;
    signal sum_pix_ch0_10_we1 : STD_LOGIC;
    signal sum_pix_ch0_10_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_11_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_11_ce0 : STD_LOGIC;
    signal sum_pix_ch0_11_we0 : STD_LOGIC;
    signal sum_pix_ch0_11_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_11_ce1 : STD_LOGIC;
    signal sum_pix_ch0_11_we1 : STD_LOGIC;
    signal sum_pix_ch0_11_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_12_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_12_ce0 : STD_LOGIC;
    signal sum_pix_ch0_12_we0 : STD_LOGIC;
    signal sum_pix_ch0_12_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_12_ce1 : STD_LOGIC;
    signal sum_pix_ch0_12_we1 : STD_LOGIC;
    signal sum_pix_ch0_12_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_13_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_13_ce0 : STD_LOGIC;
    signal sum_pix_ch0_13_we0 : STD_LOGIC;
    signal sum_pix_ch0_13_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_13_ce1 : STD_LOGIC;
    signal sum_pix_ch0_13_we1 : STD_LOGIC;
    signal sum_pix_ch0_13_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_14_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_14_ce0 : STD_LOGIC;
    signal sum_pix_ch0_14_we0 : STD_LOGIC;
    signal sum_pix_ch0_14_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_14_ce1 : STD_LOGIC;
    signal sum_pix_ch0_14_we1 : STD_LOGIC;
    signal sum_pix_ch0_14_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix_ch0_15_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_15_ce0 : STD_LOGIC;
    signal sum_pix_ch0_15_we0 : STD_LOGIC;
    signal sum_pix_ch0_15_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix_ch0_15_ce1 : STD_LOGIC;
    signal sum_pix_ch0_15_we1 : STD_LOGIC;
    signal sum_pix_ch0_15_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_752 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_1210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal tmp_fu_828_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_7_fu_839_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl_fu_835_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl2_fu_846_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal exitcond_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1064_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_1_fu_1072_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_2_fu_1080_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_3_fu_1088_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_4_fu_1096_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_5_fu_1104_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_6_fu_1112_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_7_fu_1120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_8_fu_1128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_9_fu_1136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_s_fu_1144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_10_fu_1152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_11_fu_1160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_12_fu_1168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_13_fu_1176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_14_fu_1184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component scurve_adder36_subkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component scurve_adder36_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        N_ADDS : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    scurve_adder36_CTRL_BUS_s_axi_U : component scurve_adder36_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        N_ADDS => N_ADDS);

    sum_pix_ch0_0_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_0_address0,
        ce0 => sum_pix_ch0_0_ce0,
        we0 => sum_pix_ch0_0_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_0_q0,
        address1 => sum_pix_ch0_0_address1,
        ce1 => sum_pix_ch0_0_ce1,
        we1 => sum_pix_ch0_0_we1,
        d1 => tmp_5_reg_1561,
        q1 => sum_pix_ch0_0_q1);

    sum_pix_ch0_1_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_1_address0,
        ce0 => sum_pix_ch0_1_ce0,
        we0 => sum_pix_ch0_1_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_1_q0,
        address1 => sum_pix_ch0_1_address1,
        ce1 => sum_pix_ch0_1_ce1,
        we1 => sum_pix_ch0_1_we1,
        d1 => tmp_21_1_reg_1566,
        q1 => sum_pix_ch0_1_q1);

    sum_pix_ch0_2_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_2_address0,
        ce0 => sum_pix_ch0_2_ce0,
        we0 => sum_pix_ch0_2_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_2_q0,
        address1 => sum_pix_ch0_2_address1,
        ce1 => sum_pix_ch0_2_ce1,
        we1 => sum_pix_ch0_2_we1,
        d1 => tmp_21_2_reg_1571,
        q1 => sum_pix_ch0_2_q1);

    sum_pix_ch0_3_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_3_address0,
        ce0 => sum_pix_ch0_3_ce0,
        we0 => sum_pix_ch0_3_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_3_q0,
        address1 => sum_pix_ch0_3_address1,
        ce1 => sum_pix_ch0_3_ce1,
        we1 => sum_pix_ch0_3_we1,
        d1 => tmp_21_3_reg_1576,
        q1 => sum_pix_ch0_3_q1);

    sum_pix_ch0_4_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_4_address0,
        ce0 => sum_pix_ch0_4_ce0,
        we0 => sum_pix_ch0_4_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_4_q0,
        address1 => sum_pix_ch0_4_address1,
        ce1 => sum_pix_ch0_4_ce1,
        we1 => sum_pix_ch0_4_we1,
        d1 => tmp_21_4_reg_1581,
        q1 => sum_pix_ch0_4_q1);

    sum_pix_ch0_5_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_5_address0,
        ce0 => sum_pix_ch0_5_ce0,
        we0 => sum_pix_ch0_5_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_5_q0,
        address1 => sum_pix_ch0_5_address1,
        ce1 => sum_pix_ch0_5_ce1,
        we1 => sum_pix_ch0_5_we1,
        d1 => tmp_21_5_reg_1586,
        q1 => sum_pix_ch0_5_q1);

    sum_pix_ch0_6_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_6_address0,
        ce0 => sum_pix_ch0_6_ce0,
        we0 => sum_pix_ch0_6_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_6_q0,
        address1 => sum_pix_ch0_6_address1,
        ce1 => sum_pix_ch0_6_ce1,
        we1 => sum_pix_ch0_6_we1,
        d1 => tmp_21_6_reg_1591,
        q1 => sum_pix_ch0_6_q1);

    sum_pix_ch0_7_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_7_address0,
        ce0 => sum_pix_ch0_7_ce0,
        we0 => sum_pix_ch0_7_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_7_q0,
        address1 => sum_pix_ch0_7_address1,
        ce1 => sum_pix_ch0_7_ce1,
        we1 => sum_pix_ch0_7_we1,
        d1 => tmp_21_7_reg_1596,
        q1 => sum_pix_ch0_7_q1);

    sum_pix_ch0_8_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_8_address0,
        ce0 => sum_pix_ch0_8_ce0,
        we0 => sum_pix_ch0_8_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_8_q0,
        address1 => sum_pix_ch0_8_address1,
        ce1 => sum_pix_ch0_8_ce1,
        we1 => sum_pix_ch0_8_we1,
        d1 => tmp_21_8_reg_1601,
        q1 => sum_pix_ch0_8_q1);

    sum_pix_ch0_9_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_9_address0,
        ce0 => sum_pix_ch0_9_ce0,
        we0 => sum_pix_ch0_9_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_9_q0,
        address1 => sum_pix_ch0_9_address1,
        ce1 => sum_pix_ch0_9_ce1,
        we1 => sum_pix_ch0_9_we1,
        d1 => tmp_21_9_reg_1606,
        q1 => sum_pix_ch0_9_q1);

    sum_pix_ch0_10_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_10_address0,
        ce0 => sum_pix_ch0_10_ce0,
        we0 => sum_pix_ch0_10_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_10_q0,
        address1 => sum_pix_ch0_10_address1,
        ce1 => sum_pix_ch0_10_ce1,
        we1 => sum_pix_ch0_10_we1,
        d1 => tmp_21_s_reg_1611,
        q1 => sum_pix_ch0_10_q1);

    sum_pix_ch0_11_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_11_address0,
        ce0 => sum_pix_ch0_11_ce0,
        we0 => sum_pix_ch0_11_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_11_q0,
        address1 => sum_pix_ch0_11_address1,
        ce1 => sum_pix_ch0_11_ce1,
        we1 => sum_pix_ch0_11_we1,
        d1 => tmp_21_10_reg_1616,
        q1 => sum_pix_ch0_11_q1);

    sum_pix_ch0_12_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_12_address0,
        ce0 => sum_pix_ch0_12_ce0,
        we0 => sum_pix_ch0_12_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_12_q0,
        address1 => sum_pix_ch0_12_address1,
        ce1 => sum_pix_ch0_12_ce1,
        we1 => sum_pix_ch0_12_we1,
        d1 => tmp_21_11_reg_1621,
        q1 => sum_pix_ch0_12_q1);

    sum_pix_ch0_13_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_13_address0,
        ce0 => sum_pix_ch0_13_ce0,
        we0 => sum_pix_ch0_13_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_13_q0,
        address1 => sum_pix_ch0_13_address1,
        ce1 => sum_pix_ch0_13_ce1,
        we1 => sum_pix_ch0_13_we1,
        d1 => tmp_21_12_reg_1626,
        q1 => sum_pix_ch0_13_q1);

    sum_pix_ch0_14_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_14_address0,
        ce0 => sum_pix_ch0_14_ce0,
        we0 => sum_pix_ch0_14_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_14_q0,
        address1 => sum_pix_ch0_14_address1,
        ce1 => sum_pix_ch0_14_ce1,
        we1 => sum_pix_ch0_14_we1,
        d1 => tmp_21_13_reg_1631,
        q1 => sum_pix_ch0_14_q1);

    sum_pix_ch0_15_U : component scurve_adder36_subkb
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix_ch0_15_address0,
        ce0 => sum_pix_ch0_15_ce0,
        we0 => sum_pix_ch0_15_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix_ch0_15_q0,
        address1 => sum_pix_ch0_15_address1,
        ce1 => sum_pix_ch0_15_ce1,
        we1 => sum_pix_ch0_15_we1,
        d1 => tmp_21_14_reg_1636,
        q1 => sum_pix_ch0_15_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream0_V_data_V_0_ack_out = ap_const_logic_1) and (in_stream0_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        in_stream0_V_data_V_0_sel_rd <= not(in_stream0_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream0_V_data_V_0_ack_in = ap_const_logic_1) and (in_stream0_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        in_stream0_V_data_V_0_sel_wr <= not(in_stream0_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream0_V_data_V_0_state = ap_const_lv2_2) and (in_stream0_V_data_V_0_vld_in = ap_const_logic_0)) or ((in_stream0_V_data_V_0_state = ap_const_lv2_3) and (in_stream0_V_data_V_0_vld_in = ap_const_logic_0) and (in_stream0_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream0_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream0_V_data_V_0_state = ap_const_lv2_1) and (in_stream0_V_data_V_0_ack_out = ap_const_logic_0)) or ((in_stream0_V_data_V_0_state = ap_const_lv2_3) and (in_stream0_V_data_V_0_ack_out = ap_const_logic_0) and (in_stream0_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream0_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream0_V_data_V_0_vld_in = ap_const_logic_0) and (in_stream0_V_data_V_0_ack_out = ap_const_logic_1))) and not(((in_stream0_V_data_V_0_ack_out = ap_const_logic_0) and (in_stream0_V_data_V_0_vld_in = ap_const_logic_1))) and (in_stream0_V_data_V_0_state = ap_const_lv2_3)) or ((in_stream0_V_data_V_0_state = ap_const_lv2_1) and (in_stream0_V_data_V_0_ack_out = ap_const_logic_1)) or ((in_stream0_V_data_V_0_state = ap_const_lv2_2) and (in_stream0_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream0_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream0_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream0_V_dest_V_0_state = ap_const_lv2_2) and (in_stream0_V_dest_V_0_vld_in = ap_const_logic_0)) or ((in_stream0_V_dest_V_0_state = ap_const_lv2_3) and (in_stream0_V_dest_V_0_vld_in = ap_const_logic_0) and (in_stream0_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream0_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream0_V_dest_V_0_state = ap_const_lv2_1) and (in_stream0_V_dest_V_0_ack_out = ap_const_logic_0)) or ((in_stream0_V_dest_V_0_state = ap_const_lv2_3) and (in_stream0_V_dest_V_0_ack_out = ap_const_logic_0) and (in_stream0_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream0_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream0_V_dest_V_0_vld_in = ap_const_logic_0) and (in_stream0_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((in_stream0_V_dest_V_0_ack_out = ap_const_logic_0) and (in_stream0_V_dest_V_0_vld_in = ap_const_logic_1))) and (in_stream0_V_dest_V_0_state = ap_const_lv2_3)) or ((in_stream0_V_dest_V_0_state = ap_const_lv2_1) and (in_stream0_V_dest_V_0_ack_out = ap_const_logic_1)) or ((in_stream0_V_dest_V_0_state = ap_const_lv2_2) and (in_stream0_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream0_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream0_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_data_V_1_ack_out = ap_const_logic_1) and (out_stream_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_data_V_1_sel_rd <= not(out_stream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_data_V_1_ack_in = ap_const_logic_1) and (out_stream_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_data_V_1_sel_wr <= not(out_stream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_data_V_1_state = ap_const_lv2_2) and (out_stream_V_data_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_data_V_1_state = ap_const_lv2_3) and (out_stream_V_data_V_1_vld_in = ap_const_logic_0) and (out_stream_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_data_V_1_state = ap_const_lv2_1) and (out_stream_V_data_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_data_V_1_state = ap_const_lv2_3) and (out_stream_V_data_V_1_ack_out = ap_const_logic_0) and (out_stream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_data_V_1_vld_in = ap_const_logic_0) and (out_stream_V_data_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_data_V_1_ack_out = ap_const_logic_0) and (out_stream_V_data_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_data_V_1_state = ap_const_lv2_3)) or ((out_stream_V_data_V_1_state = ap_const_lv2_1) and (out_stream_V_data_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_data_V_1_state = ap_const_lv2_2) and (out_stream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_dest_V_1_ack_out = ap_const_logic_1) and (out_stream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_dest_V_1_sel_rd <= not(out_stream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_dest_V_1_state = ap_const_lv2_2) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_dest_V_1_state = ap_const_lv2_3) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_0) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_dest_V_1_state = ap_const_lv2_1) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_dest_V_1_state = ap_const_lv2_3) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_dest_V_1_vld_in = ap_const_logic_0) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_dest_V_1_state = ap_const_lv2_3)) or ((out_stream_V_dest_V_1_state = ap_const_lv2_1) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_dest_V_1_state = ap_const_lv2_2) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_id_V_1_ack_out = ap_const_logic_1) and (out_stream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_id_V_1_sel_rd <= not(out_stream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_id_V_1_state = ap_const_lv2_2) and (out_stream_V_id_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_id_V_1_state = ap_const_lv2_3) and (out_stream_V_id_V_1_vld_in = ap_const_logic_0) and (out_stream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_id_V_1_state = ap_const_lv2_1) and (out_stream_V_id_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_id_V_1_state = ap_const_lv2_3) and (out_stream_V_id_V_1_ack_out = ap_const_logic_0) and (out_stream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_id_V_1_vld_in = ap_const_logic_0) and (out_stream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_id_V_1_ack_out = ap_const_logic_0) and (out_stream_V_id_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_id_V_1_state = ap_const_lv2_3)) or ((out_stream_V_id_V_1_state = ap_const_lv2_1) and (out_stream_V_id_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_id_V_1_state = ap_const_lv2_2) and (out_stream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_keep_V_1_ack_out = ap_const_logic_1) and (out_stream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_keep_V_1_sel_rd <= not(out_stream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_keep_V_1_state = ap_const_lv2_2) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_keep_V_1_state = ap_const_lv2_3) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_0) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_keep_V_1_state = ap_const_lv2_1) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_keep_V_1_state = ap_const_lv2_3) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_keep_V_1_vld_in = ap_const_logic_0) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_keep_V_1_state = ap_const_lv2_3)) or ((out_stream_V_keep_V_1_state = ap_const_lv2_1) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_keep_V_1_state = ap_const_lv2_2) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_last_V_1_ack_out = ap_const_logic_1) and (out_stream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_last_V_1_sel_rd <= not(out_stream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_last_V_1_ack_in = ap_const_logic_1) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_last_V_1_sel_wr <= not(out_stream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_last_V_1_state = ap_const_lv2_2) and (out_stream_V_last_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_V_last_V_1_vld_in = ap_const_logic_0) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_last_V_1_state = ap_const_lv2_1) and (out_stream_V_last_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_V_last_V_1_ack_out = ap_const_logic_0) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_last_V_1_vld_in = ap_const_logic_0) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_last_V_1_ack_out = ap_const_logic_0) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_last_V_1_state = ap_const_lv2_3)) or ((out_stream_V_last_V_1_state = ap_const_lv2_1) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_last_V_1_state = ap_const_lv2_2) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_strb_V_1_ack_out = ap_const_logic_1) and (out_stream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_strb_V_1_sel_rd <= not(out_stream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_strb_V_1_state = ap_const_lv2_2) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_strb_V_1_state = ap_const_lv2_3) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_0) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_strb_V_1_state = ap_const_lv2_1) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_strb_V_1_state = ap_const_lv2_3) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_strb_V_1_vld_in = ap_const_logic_0) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_strb_V_1_state = ap_const_lv2_3)) or ((out_stream_V_strb_V_1_state = ap_const_lv2_1) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_strb_V_1_state = ap_const_lv2_2) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_user_V_1_ack_out = ap_const_logic_1) and (out_stream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_user_V_1_sel_rd <= not(out_stream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_user_V_1_state = ap_const_lv2_2) and (out_stream_V_user_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_user_V_1_state = ap_const_lv2_3) and (out_stream_V_user_V_1_vld_in = ap_const_logic_0) and (out_stream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_user_V_1_state = ap_const_lv2_1) and (out_stream_V_user_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_user_V_1_state = ap_const_lv2_3) and (out_stream_V_user_V_1_ack_out = ap_const_logic_0) and (out_stream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_user_V_1_vld_in = ap_const_logic_0) and (out_stream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_user_V_1_ack_out = ap_const_logic_0) and (out_stream_V_user_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_user_V_1_state = ap_const_lv2_3)) or ((out_stream_V_user_V_1_state = ap_const_lv2_1) and (out_stream_V_user_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_user_V_1_state = ap_const_lv2_2) and (out_stream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_774_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_fu_856_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_1_reg_774 <= i_5_fu_881_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_774 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_2_reg_785_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_2_reg_785 <= ap_const_lv8_0;
            elsif (((exitcond4_fu_1192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_2_reg_785 <= i_4_fu_1198_p2;
            end if; 
        end if;
    end process;

    i_reg_752_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_752 <= ap_const_lv8_0;
            elsif (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_752 <= i_3_fu_802_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_763_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_fu_856_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten_reg_763 <= indvar_flatten_next_fu_861_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_763 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                N_ADDS_read_reg_1267 <= N_ADDS;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    bound_reg_1281(23 downto 4) <= bound_fu_850_p2(23 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                exitcond4_reg_1641 <= exitcond4_fu_1192_p2;
                exitcond4_reg_1641_pp2_iter1_reg <= exitcond4_reg_1641;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten_reg_1286 <= exitcond_flatten_fu_856_p2;
                exitcond_flatten_reg_1286_pp1_iter1_reg <= exitcond_flatten_reg_1286;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                exitcond_flatten_reg_1286_pp1_iter2_reg <= exitcond_flatten_reg_1286_pp1_iter1_reg;
                exitcond_flatten_reg_1286_pp1_iter3_reg <= exitcond_flatten_reg_1286_pp1_iter2_reg;
                phitmp_10_reg_1426_pp1_iter2_reg <= phitmp_10_reg_1426;
                phitmp_11_reg_1437_pp1_iter2_reg <= phitmp_11_reg_1437;
                phitmp_12_reg_1448_pp1_iter2_reg <= phitmp_12_reg_1448;
                phitmp_13_reg_1459_pp1_iter2_reg <= phitmp_13_reg_1459;
                phitmp_14_reg_1470_pp1_iter2_reg <= phitmp_14_reg_1470;
                phitmp_1_reg_1316_pp1_iter2_reg <= phitmp_1_reg_1316;
                phitmp_2_reg_1327_pp1_iter2_reg <= phitmp_2_reg_1327;
                phitmp_3_reg_1338_pp1_iter2_reg <= phitmp_3_reg_1338;
                phitmp_4_reg_1349_pp1_iter2_reg <= phitmp_4_reg_1349;
                phitmp_5_reg_1360_pp1_iter2_reg <= phitmp_5_reg_1360;
                phitmp_6_reg_1371_pp1_iter2_reg <= phitmp_6_reg_1371;
                phitmp_7_reg_1382_pp1_iter2_reg <= phitmp_7_reg_1382;
                phitmp_8_reg_1393_pp1_iter2_reg <= phitmp_8_reg_1393;
                phitmp_9_reg_1404_pp1_iter2_reg <= phitmp_9_reg_1404;
                phitmp_s_reg_1415_pp1_iter2_reg <= phitmp_s_reg_1415;
                sum_pix_ch0_0_addr_2_reg_1310_pp1_iter2_reg <= sum_pix_ch0_0_addr_2_reg_1310;
                sum_pix_ch0_0_addr_2_reg_1310_pp1_iter3_reg <= sum_pix_ch0_0_addr_2_reg_1310_pp1_iter2_reg;
                sum_pix_ch0_10_addr_2_reg_1420_pp1_iter2_reg <= sum_pix_ch0_10_addr_2_reg_1420;
                sum_pix_ch0_10_addr_2_reg_1420_pp1_iter3_reg <= sum_pix_ch0_10_addr_2_reg_1420_pp1_iter2_reg;
                sum_pix_ch0_11_addr_2_reg_1431_pp1_iter2_reg <= sum_pix_ch0_11_addr_2_reg_1431;
                sum_pix_ch0_11_addr_2_reg_1431_pp1_iter3_reg <= sum_pix_ch0_11_addr_2_reg_1431_pp1_iter2_reg;
                sum_pix_ch0_12_addr_2_reg_1442_pp1_iter2_reg <= sum_pix_ch0_12_addr_2_reg_1442;
                sum_pix_ch0_12_addr_2_reg_1442_pp1_iter3_reg <= sum_pix_ch0_12_addr_2_reg_1442_pp1_iter2_reg;
                sum_pix_ch0_13_addr_2_reg_1453_pp1_iter2_reg <= sum_pix_ch0_13_addr_2_reg_1453;
                sum_pix_ch0_13_addr_2_reg_1453_pp1_iter3_reg <= sum_pix_ch0_13_addr_2_reg_1453_pp1_iter2_reg;
                sum_pix_ch0_14_addr_2_reg_1464_pp1_iter2_reg <= sum_pix_ch0_14_addr_2_reg_1464;
                sum_pix_ch0_14_addr_2_reg_1464_pp1_iter3_reg <= sum_pix_ch0_14_addr_2_reg_1464_pp1_iter2_reg;
                sum_pix_ch0_15_addr_2_reg_1475_pp1_iter2_reg <= sum_pix_ch0_15_addr_2_reg_1475;
                sum_pix_ch0_15_addr_2_reg_1475_pp1_iter3_reg <= sum_pix_ch0_15_addr_2_reg_1475_pp1_iter2_reg;
                sum_pix_ch0_1_addr_2_reg_1321_pp1_iter2_reg <= sum_pix_ch0_1_addr_2_reg_1321;
                sum_pix_ch0_1_addr_2_reg_1321_pp1_iter3_reg <= sum_pix_ch0_1_addr_2_reg_1321_pp1_iter2_reg;
                sum_pix_ch0_2_addr_2_reg_1332_pp1_iter2_reg <= sum_pix_ch0_2_addr_2_reg_1332;
                sum_pix_ch0_2_addr_2_reg_1332_pp1_iter3_reg <= sum_pix_ch0_2_addr_2_reg_1332_pp1_iter2_reg;
                sum_pix_ch0_3_addr_2_reg_1343_pp1_iter2_reg <= sum_pix_ch0_3_addr_2_reg_1343;
                sum_pix_ch0_3_addr_2_reg_1343_pp1_iter3_reg <= sum_pix_ch0_3_addr_2_reg_1343_pp1_iter2_reg;
                sum_pix_ch0_4_addr_2_reg_1354_pp1_iter2_reg <= sum_pix_ch0_4_addr_2_reg_1354;
                sum_pix_ch0_4_addr_2_reg_1354_pp1_iter3_reg <= sum_pix_ch0_4_addr_2_reg_1354_pp1_iter2_reg;
                sum_pix_ch0_5_addr_2_reg_1365_pp1_iter2_reg <= sum_pix_ch0_5_addr_2_reg_1365;
                sum_pix_ch0_5_addr_2_reg_1365_pp1_iter3_reg <= sum_pix_ch0_5_addr_2_reg_1365_pp1_iter2_reg;
                sum_pix_ch0_6_addr_2_reg_1376_pp1_iter2_reg <= sum_pix_ch0_6_addr_2_reg_1376;
                sum_pix_ch0_6_addr_2_reg_1376_pp1_iter3_reg <= sum_pix_ch0_6_addr_2_reg_1376_pp1_iter2_reg;
                sum_pix_ch0_7_addr_2_reg_1387_pp1_iter2_reg <= sum_pix_ch0_7_addr_2_reg_1387;
                sum_pix_ch0_7_addr_2_reg_1387_pp1_iter3_reg <= sum_pix_ch0_7_addr_2_reg_1387_pp1_iter2_reg;
                sum_pix_ch0_8_addr_2_reg_1398_pp1_iter2_reg <= sum_pix_ch0_8_addr_2_reg_1398;
                sum_pix_ch0_8_addr_2_reg_1398_pp1_iter3_reg <= sum_pix_ch0_8_addr_2_reg_1398_pp1_iter2_reg;
                sum_pix_ch0_9_addr_2_reg_1409_pp1_iter2_reg <= sum_pix_ch0_9_addr_2_reg_1409;
                sum_pix_ch0_9_addr_2_reg_1409_pp1_iter3_reg <= sum_pix_ch0_9_addr_2_reg_1409_pp1_iter2_reg;
                tmp_9_reg_1305_pp1_iter2_reg <= tmp_9_reg_1305;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_fu_856_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                i_1_mid2_reg_1295 <= i_1_mid2_fu_873_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream0_V_data_V_0_load_A = ap_const_logic_1)) then
                in_stream0_V_data_V_0_payload_A <= in_stream0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream0_V_data_V_0_load_B = ap_const_logic_1)) then
                in_stream0_V_data_V_0_payload_B <= in_stream0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_data_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_data_V_1_payload_A <= tmp_data_V_1_fu_1230_p17;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_data_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_data_V_1_payload_B <= tmp_data_V_1_fu_1230_p17;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_last_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_last_V_1_payload_A <= tmp_last_V_reg_1650;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_last_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_last_V_1_payload_B <= tmp_last_V_reg_1650;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                phitmp_10_reg_1426 <= in_stream0_V_data_V_0_data_out(95 downto 88);
                phitmp_11_reg_1437 <= in_stream0_V_data_V_0_data_out(103 downto 96);
                phitmp_12_reg_1448 <= in_stream0_V_data_V_0_data_out(111 downto 104);
                phitmp_13_reg_1459 <= in_stream0_V_data_V_0_data_out(119 downto 112);
                phitmp_14_reg_1470 <= in_stream0_V_data_V_0_data_out(127 downto 120);
                phitmp_1_reg_1316 <= in_stream0_V_data_V_0_data_out(15 downto 8);
                phitmp_2_reg_1327 <= in_stream0_V_data_V_0_data_out(23 downto 16);
                phitmp_3_reg_1338 <= in_stream0_V_data_V_0_data_out(31 downto 24);
                phitmp_4_reg_1349 <= in_stream0_V_data_V_0_data_out(39 downto 32);
                phitmp_5_reg_1360 <= in_stream0_V_data_V_0_data_out(47 downto 40);
                phitmp_6_reg_1371 <= in_stream0_V_data_V_0_data_out(55 downto 48);
                phitmp_7_reg_1382 <= in_stream0_V_data_V_0_data_out(63 downto 56);
                phitmp_8_reg_1393 <= in_stream0_V_data_V_0_data_out(71 downto 64);
                phitmp_9_reg_1404 <= in_stream0_V_data_V_0_data_out(79 downto 72);
                phitmp_s_reg_1415 <= in_stream0_V_data_V_0_data_out(87 downto 80);
                sum_pix_ch0_0_addr_2_reg_1310 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_10_addr_2_reg_1420 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_11_addr_2_reg_1431 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_12_addr_2_reg_1442 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_13_addr_2_reg_1453 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_14_addr_2_reg_1464 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_15_addr_2_reg_1475 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_1_addr_2_reg_1321 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_2_addr_2_reg_1332 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_3_addr_2_reg_1343 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_4_addr_2_reg_1354 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_5_addr_2_reg_1365 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_6_addr_2_reg_1376 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_7_addr_2_reg_1387 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_8_addr_2_reg_1398 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                sum_pix_ch0_9_addr_2_reg_1409 <= tmp_8_fu_887_p1(8 - 1 downto 0);
                tmp_9_reg_1305 <= tmp_9_fu_910_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then
                sum_pix_ch0_0_load_1_reg_1481 <= sum_pix_ch0_0_q0;
                sum_pix_ch0_10_load_1_reg_1531 <= sum_pix_ch0_10_q0;
                sum_pix_ch0_11_load_1_reg_1536 <= sum_pix_ch0_11_q0;
                sum_pix_ch0_12_load_1_reg_1541 <= sum_pix_ch0_12_q0;
                sum_pix_ch0_13_load_1_reg_1546 <= sum_pix_ch0_13_q0;
                sum_pix_ch0_14_load_1_reg_1551 <= sum_pix_ch0_14_q0;
                sum_pix_ch0_15_load_1_reg_1556 <= sum_pix_ch0_15_q0;
                sum_pix_ch0_1_load_1_reg_1486 <= sum_pix_ch0_1_q0;
                sum_pix_ch0_2_load_1_reg_1491 <= sum_pix_ch0_2_q0;
                sum_pix_ch0_3_load_1_reg_1496 <= sum_pix_ch0_3_q0;
                sum_pix_ch0_4_load_1_reg_1501 <= sum_pix_ch0_4_q0;
                sum_pix_ch0_5_load_1_reg_1506 <= sum_pix_ch0_5_q0;
                sum_pix_ch0_6_load_1_reg_1511 <= sum_pix_ch0_6_q0;
                sum_pix_ch0_7_load_1_reg_1516 <= sum_pix_ch0_7_q0;
                sum_pix_ch0_8_load_1_reg_1521 <= sum_pix_ch0_8_q0;
                sum_pix_ch0_9_load_1_reg_1526 <= sum_pix_ch0_9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter2_reg = ap_const_lv1_0))) then
                tmp_21_10_reg_1616 <= tmp_21_10_fu_1155_p2;
                tmp_21_11_reg_1621 <= tmp_21_11_fu_1163_p2;
                tmp_21_12_reg_1626 <= tmp_21_12_fu_1171_p2;
                tmp_21_13_reg_1631 <= tmp_21_13_fu_1179_p2;
                tmp_21_14_reg_1636 <= tmp_21_14_fu_1187_p2;
                tmp_21_1_reg_1566 <= tmp_21_1_fu_1075_p2;
                tmp_21_2_reg_1571 <= tmp_21_2_fu_1083_p2;
                tmp_21_3_reg_1576 <= tmp_21_3_fu_1091_p2;
                tmp_21_4_reg_1581 <= tmp_21_4_fu_1099_p2;
                tmp_21_5_reg_1586 <= tmp_21_5_fu_1107_p2;
                tmp_21_6_reg_1591 <= tmp_21_6_fu_1115_p2;
                tmp_21_7_reg_1596 <= tmp_21_7_fu_1123_p2;
                tmp_21_8_reg_1601 <= tmp_21_8_fu_1131_p2;
                tmp_21_9_reg_1606 <= tmp_21_9_fu_1139_p2;
                tmp_21_s_reg_1611 <= tmp_21_s_fu_1147_p2;
                tmp_5_reg_1561 <= tmp_5_fu_1067_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_1192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_last_V_reg_1650 <= tmp_last_V_fu_1204_p2;
            end if;
        end if;
    end process;
    bound_reg_1281(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, out_stream_V_data_V_1_ack_in, out_stream_V_keep_V_1_ack_in, out_stream_V_strb_V_1_ack_in, out_stream_V_user_V_1_ack_in, out_stream_V_last_V_1_ack_in, out_stream_V_id_V_1_ack_in, out_stream_V_dest_V_1_ack_in, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_CS_fsm_state2, exitcond_flatten_fu_856_p2, ap_enable_reg_pp1_iter0, exitcond4_fu_1192_p2, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_block_pp2_stage0_subdone, exitcond1_fu_796_p2, ap_CS_fsm_state13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond_flatten_fu_856_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond_flatten_fu_856_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (exitcond4_fu_1192_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (exitcond4_fu_1192_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(4);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(in_stream0_V_data_V_0_vld_out, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_1286)
    begin
                ap_block_pp1_stage0_11001 <= ((exitcond_flatten_reg_1286 = ap_const_lv1_0) and (in_stream0_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(in_stream0_V_data_V_0_vld_out, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_1286)
    begin
                ap_block_pp1_stage0_subdone <= ((exitcond_flatten_reg_1286 = ap_const_lv1_0) and (in_stream0_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_state11_io, ap_block_state12_io)
    begin
                ap_block_pp2_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state11_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_state11_io, ap_block_state12_io)
    begin
                ap_block_pp2_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state11_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_io_assign_proc : process(out_stream_V_data_V_1_ack_in, exitcond4_reg_1641)
    begin
                ap_block_state11_io <= ((exitcond4_reg_1641 = ap_const_lv1_0) and (out_stream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state11_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_io_assign_proc : process(out_stream_V_data_V_1_ack_in, exitcond4_reg_1641_pp2_iter1_reg)
    begin
                ap_block_state12_io <= ((exitcond4_reg_1641_pp2_iter1_reg = ap_const_lv1_0) and (out_stream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state12_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_assign_proc : process(out_stream_V_data_V_1_ack_in, out_stream_V_keep_V_1_ack_in, out_stream_V_strb_V_1_ack_in, out_stream_V_user_V_1_ack_in, out_stream_V_last_V_1_ack_in, out_stream_V_id_V_1_ack_in, out_stream_V_dest_V_1_ack_in)
    begin
                ap_block_state13 <= ((out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp1_stage0_iter1_assign_proc : process(in_stream0_V_data_V_0_vld_out, exitcond_flatten_reg_1286)
    begin
                ap_block_state5_pp1_stage0_iter1 <= ((exitcond_flatten_reg_1286 = ap_const_lv1_0) and (in_stream0_V_data_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state6_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state4_assign_proc : process(exitcond_flatten_fu_856_p2)
    begin
        if ((exitcond_flatten_fu_856_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state10_assign_proc : process(exitcond4_fu_1192_p2)
    begin
        if ((exitcond4_fu_1192_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(out_stream_V_data_V_1_ack_in, out_stream_V_keep_V_1_ack_in, out_stream_V_strb_V_1_ack_in, out_stream_V_user_V_1_ack_in, out_stream_V_last_V_1_ack_in, out_stream_V_id_V_1_ack_in, out_stream_V_dest_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if ((not(((out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_stream_V_data_V_1_ack_in, out_stream_V_keep_V_1_ack_in, out_stream_V_strb_V_1_ack_in, out_stream_V_user_V_1_ack_in, out_stream_V_last_V_1_ack_in, out_stream_V_id_V_1_ack_in, out_stream_V_dest_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if ((not(((out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound_fu_850_p2 <= std_logic_vector(unsigned(p_shl_fu_835_p1) + unsigned(p_shl2_fu_846_p1));
    exitcond1_fu_796_p2 <= "1" when (i_reg_752 = ap_const_lv8_90) else "0";
    exitcond4_fu_1192_p2 <= "1" when (i_2_reg_785 = ap_const_lv8_90) else "0";
    exitcond_flatten_fu_856_p2 <= "1" when (indvar_flatten_reg_763 = bound_reg_1281) else "0";
    exitcond_fu_867_p2 <= "1" when (i_1_reg_774 = ap_const_lv8_90) else "0";
    i_1_mid2_fu_873_p3 <= 
        ap_const_lv8_0 when (exitcond_fu_867_p2(0) = '1') else 
        i_1_reg_774;
    i_3_fu_802_p2 <= std_logic_vector(unsigned(i_reg_752) + unsigned(ap_const_lv8_1));
    i_4_fu_1198_p2 <= std_logic_vector(unsigned(i_2_reg_785) + unsigned(ap_const_lv8_1));
    i_5_fu_881_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(i_1_mid2_fu_873_p3));

    in_stream0_TDATA_blk_n_assign_proc : process(in_stream0_V_data_V_0_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten_reg_1286)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond_flatten_reg_1286 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            in_stream0_TDATA_blk_n <= in_stream0_V_data_V_0_state(0);
        else 
            in_stream0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream0_TREADY <= in_stream0_V_dest_V_0_state(1);
    in_stream0_V_data_V_0_ack_in <= in_stream0_V_data_V_0_state(1);

    in_stream0_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_1286, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            in_stream0_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream0_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream0_V_data_V_0_data_out_assign_proc : process(in_stream0_V_data_V_0_payload_A, in_stream0_V_data_V_0_payload_B, in_stream0_V_data_V_0_sel)
    begin
        if ((in_stream0_V_data_V_0_sel = ap_const_logic_1)) then 
            in_stream0_V_data_V_0_data_out <= in_stream0_V_data_V_0_payload_B;
        else 
            in_stream0_V_data_V_0_data_out <= in_stream0_V_data_V_0_payload_A;
        end if; 
    end process;

    in_stream0_V_data_V_0_load_A <= (in_stream0_V_data_V_0_state_cmp_full and not(in_stream0_V_data_V_0_sel_wr));
    in_stream0_V_data_V_0_load_B <= (in_stream0_V_data_V_0_state_cmp_full and in_stream0_V_data_V_0_sel_wr);
    in_stream0_V_data_V_0_sel <= in_stream0_V_data_V_0_sel_rd;
    in_stream0_V_data_V_0_state_cmp_full <= '0' when (in_stream0_V_data_V_0_state = ap_const_lv2_1) else '1';
    in_stream0_V_data_V_0_vld_in <= in_stream0_TVALID;
    in_stream0_V_data_V_0_vld_out <= in_stream0_V_data_V_0_state(0);

    in_stream0_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_1286, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            in_stream0_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream0_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    in_stream0_V_dest_V_0_vld_in <= in_stream0_TVALID;
    indvar_flatten_next_fu_861_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_763) + unsigned(ap_const_lv24_1));
    out_stream_TDATA <= out_stream_V_data_V_1_data_out;

    out_stream_TDATA_blk_n_assign_proc : process(out_stream_V_data_V_1_state, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond4_reg_1641, ap_enable_reg_pp2_iter2, exitcond4_reg_1641_pp2_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond4_reg_1641_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond4_reg_1641 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            out_stream_TDATA_blk_n <= out_stream_V_data_V_1_state(1);
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDEST <= out_stream_V_dest_V_1_data_out;
    out_stream_TID <= out_stream_V_id_V_1_data_out;
    out_stream_TKEEP <= out_stream_V_keep_V_1_data_out;
    out_stream_TLAST <= out_stream_V_last_V_1_data_out;
    out_stream_TSTRB <= out_stream_V_strb_V_1_data_out;
    out_stream_TUSER <= out_stream_V_user_V_1_data_out;
    out_stream_TVALID <= out_stream_V_dest_V_1_state(0);
    out_stream_V_data_V_1_ack_in <= out_stream_V_data_V_1_state(1);
    out_stream_V_data_V_1_ack_out <= out_stream_TREADY;

    out_stream_V_data_V_1_data_out_assign_proc : process(out_stream_V_data_V_1_payload_A, out_stream_V_data_V_1_payload_B, out_stream_V_data_V_1_sel)
    begin
        if ((out_stream_V_data_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_data_V_1_data_out <= out_stream_V_data_V_1_payload_B;
        else 
            out_stream_V_data_V_1_data_out <= out_stream_V_data_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_data_V_1_load_A <= (out_stream_V_data_V_1_state_cmp_full and not(out_stream_V_data_V_1_sel_wr));
    out_stream_V_data_V_1_load_B <= (out_stream_V_data_V_1_state_cmp_full and out_stream_V_data_V_1_sel_wr);
    out_stream_V_data_V_1_sel <= out_stream_V_data_V_1_sel_rd;
    out_stream_V_data_V_1_state_cmp_full <= '0' when (out_stream_V_data_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond4_reg_1641, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond4_reg_1641 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_data_V_1_vld_out <= out_stream_V_data_V_1_state(0);
    out_stream_V_dest_V_1_ack_in <= out_stream_V_dest_V_1_state(1);
    out_stream_V_dest_V_1_ack_out <= out_stream_TREADY;
    out_stream_V_dest_V_1_data_out <= ap_const_lv6_0;
    out_stream_V_dest_V_1_sel <= out_stream_V_dest_V_1_sel_rd;

    out_stream_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond4_reg_1641, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond4_reg_1641 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_dest_V_1_vld_out <= out_stream_V_dest_V_1_state(0);
    out_stream_V_id_V_1_ack_in <= out_stream_V_id_V_1_state(1);
    out_stream_V_id_V_1_ack_out <= out_stream_TREADY;
    out_stream_V_id_V_1_data_out <= ap_const_lv5_0;
    out_stream_V_id_V_1_sel <= out_stream_V_id_V_1_sel_rd;

    out_stream_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond4_reg_1641, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond4_reg_1641 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_id_V_1_vld_out <= out_stream_V_id_V_1_state(0);
    out_stream_V_keep_V_1_ack_in <= out_stream_V_keep_V_1_state(1);
    out_stream_V_keep_V_1_ack_out <= out_stream_TREADY;
    out_stream_V_keep_V_1_data_out <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    out_stream_V_keep_V_1_sel <= out_stream_V_keep_V_1_sel_rd;

    out_stream_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond4_reg_1641, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond4_reg_1641 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_keep_V_1_vld_out <= out_stream_V_keep_V_1_state(0);
    out_stream_V_last_V_1_ack_in <= out_stream_V_last_V_1_state(1);
    out_stream_V_last_V_1_ack_out <= out_stream_TREADY;

    out_stream_V_last_V_1_data_out_assign_proc : process(out_stream_V_last_V_1_payload_A, out_stream_V_last_V_1_payload_B, out_stream_V_last_V_1_sel)
    begin
        if ((out_stream_V_last_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_last_V_1_data_out <= out_stream_V_last_V_1_payload_B;
        else 
            out_stream_V_last_V_1_data_out <= out_stream_V_last_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_last_V_1_load_A <= (out_stream_V_last_V_1_state_cmp_full and not(out_stream_V_last_V_1_sel_wr));
    out_stream_V_last_V_1_load_B <= (out_stream_V_last_V_1_state_cmp_full and out_stream_V_last_V_1_sel_wr);
    out_stream_V_last_V_1_sel <= out_stream_V_last_V_1_sel_rd;
    out_stream_V_last_V_1_state_cmp_full <= '0' when (out_stream_V_last_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond4_reg_1641, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond4_reg_1641 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_last_V_1_vld_out <= out_stream_V_last_V_1_state(0);
    out_stream_V_strb_V_1_ack_in <= out_stream_V_strb_V_1_state(1);
    out_stream_V_strb_V_1_ack_out <= out_stream_TREADY;
    out_stream_V_strb_V_1_data_out <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    out_stream_V_strb_V_1_sel <= out_stream_V_strb_V_1_sel_rd;

    out_stream_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond4_reg_1641, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond4_reg_1641 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_strb_V_1_vld_out <= out_stream_V_strb_V_1_state(0);
    out_stream_V_user_V_1_ack_in <= out_stream_V_user_V_1_state(1);
    out_stream_V_user_V_1_ack_out <= out_stream_TREADY;
    out_stream_V_user_V_1_data_out <= ap_const_lv6_0;
    out_stream_V_user_V_1_sel <= out_stream_V_user_V_1_sel_rd;

    out_stream_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond4_reg_1641, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond4_reg_1641 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_user_V_1_vld_out <= out_stream_V_user_V_1_state(0);
    p_shl2_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_839_p3),24));
    p_shl_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_828_p3),24));

    sum_pix_ch0_0_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_0_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_0_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_0_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_0_addr_2_reg_1310_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_0_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_0_address1 <= sum_pix_ch0_0_addr_2_reg_1310_pp1_iter3_reg;
        else 
            sum_pix_ch0_0_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_0_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_0_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_0_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_0_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_0_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_0_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_0_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_10_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_10_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_10_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_10_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_10_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_10_addr_2_reg_1420_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_10_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_10_address1 <= sum_pix_ch0_10_addr_2_reg_1420_pp1_iter3_reg;
        else 
            sum_pix_ch0_10_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_10_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_10_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_10_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_10_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_10_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_10_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_10_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_10_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_10_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_11_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_11_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_11_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_11_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_11_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_11_addr_2_reg_1431_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_11_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_11_address1 <= sum_pix_ch0_11_addr_2_reg_1431_pp1_iter3_reg;
        else 
            sum_pix_ch0_11_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_11_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_11_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_11_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_11_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_11_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_11_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_11_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_11_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_11_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_12_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_12_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_12_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_12_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_12_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_12_addr_2_reg_1442_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_12_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_12_address1 <= sum_pix_ch0_12_addr_2_reg_1442_pp1_iter3_reg;
        else 
            sum_pix_ch0_12_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_12_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_12_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_12_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_12_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_12_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_12_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_12_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_12_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_12_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_13_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_13_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_13_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_13_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_13_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_13_addr_2_reg_1453_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_13_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_13_address1 <= sum_pix_ch0_13_addr_2_reg_1453_pp1_iter3_reg;
        else 
            sum_pix_ch0_13_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_13_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_13_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_13_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_13_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_13_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_13_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_13_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_13_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_13_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_14_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_14_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_14_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_14_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_14_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_14_addr_2_reg_1464_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_14_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_14_address1 <= sum_pix_ch0_14_addr_2_reg_1464_pp1_iter3_reg;
        else 
            sum_pix_ch0_14_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_14_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_14_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_14_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_14_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_14_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_14_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_14_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_14_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_14_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_14_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_15_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_15_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_15_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_15_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_15_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_15_addr_2_reg_1475_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_15_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_15_address1 <= sum_pix_ch0_15_addr_2_reg_1475_pp1_iter3_reg;
        else 
            sum_pix_ch0_15_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_15_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_15_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_15_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_15_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_15_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_15_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_15_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_15_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_15_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_15_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_1_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_1_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_1_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_1_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_1_addr_2_reg_1321_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_1_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_1_address1 <= sum_pix_ch0_1_addr_2_reg_1321_pp1_iter3_reg;
        else 
            sum_pix_ch0_1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_1_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_1_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_1_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_1_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_1_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_1_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_1_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_2_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_2_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_2_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_2_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_2_addr_2_reg_1332_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_2_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_2_address1 <= sum_pix_ch0_2_addr_2_reg_1332_pp1_iter3_reg;
        else 
            sum_pix_ch0_2_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_2_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_2_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_2_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_2_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_2_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_2_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_2_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_2_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_3_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_3_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_3_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_3_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_3_addr_2_reg_1343_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_3_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_3_address1 <= sum_pix_ch0_3_addr_2_reg_1343_pp1_iter3_reg;
        else 
            sum_pix_ch0_3_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_3_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_3_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_3_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_3_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_3_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_3_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_3_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_3_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_4_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_4_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_4_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_4_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_4_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_4_addr_2_reg_1354_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_4_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_4_address1 <= sum_pix_ch0_4_addr_2_reg_1354_pp1_iter3_reg;
        else 
            sum_pix_ch0_4_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_4_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_4_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_4_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_4_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_4_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_4_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_4_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_4_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_4_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_5_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_5_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_5_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_5_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_5_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_5_addr_2_reg_1365_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_5_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_5_address1 <= sum_pix_ch0_5_addr_2_reg_1365_pp1_iter3_reg;
        else 
            sum_pix_ch0_5_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_5_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_5_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_5_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_5_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_5_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_5_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_5_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_5_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_5_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_6_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_6_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_6_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_6_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_6_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_6_addr_2_reg_1376_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_6_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_6_address1 <= sum_pix_ch0_6_addr_2_reg_1376_pp1_iter3_reg;
        else 
            sum_pix_ch0_6_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_6_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_6_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_6_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_6_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_6_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_6_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_6_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_6_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_6_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_7_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_7_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_7_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_7_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_7_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_7_addr_2_reg_1387_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_7_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_7_address1 <= sum_pix_ch0_7_addr_2_reg_1387_pp1_iter3_reg;
        else 
            sum_pix_ch0_7_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_7_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_7_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_7_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_7_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_7_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_7_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_7_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_7_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_7_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_8_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_8_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_8_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_8_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_8_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_8_addr_2_reg_1398_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_8_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_8_address1 <= sum_pix_ch0_8_addr_2_reg_1398_pp1_iter3_reg;
        else 
            sum_pix_ch0_8_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_8_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_8_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_8_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_8_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_8_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_8_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_8_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_8_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_8_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_9_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, tmp_1_fu_808_p1, tmp_8_fu_887_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix_ch0_9_address0 <= tmp_8_fu_887_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix_ch0_9_address0 <= tmp_1_fu_808_p1(8 - 1 downto 0);
        else 
            sum_pix_ch0_9_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_9_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix_ch0_9_addr_2_reg_1409_pp1_iter3_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4, tmp_6_fu_1210_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix_ch0_9_address1 <= tmp_6_fu_1210_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_9_address1 <= sum_pix_ch0_9_addr_2_reg_1409_pp1_iter3_reg;
        else 
            sum_pix_ch0_9_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix_ch0_9_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix_ch0_9_ce0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_9_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sum_pix_ch0_9_ce1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_9_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_796_p2)
    begin
        if (((exitcond1_fu_796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix_ch0_9_we0 <= ap_const_logic_1;
        else 
            sum_pix_ch0_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix_ch0_9_we1_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten_reg_1286_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_1286_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            sum_pix_ch0_9_we1 <= ap_const_logic_1;
        else 
            sum_pix_ch0_9_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_752),64));
    tmp_20_10_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_10_reg_1426_pp1_iter2_reg),32));
    tmp_20_11_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_11_reg_1437_pp1_iter2_reg),32));
    tmp_20_12_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_12_reg_1448_pp1_iter2_reg),32));
    tmp_20_13_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_13_reg_1459_pp1_iter2_reg),32));
    tmp_20_14_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_14_reg_1470_pp1_iter2_reg),32));
    tmp_20_1_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_1_reg_1316_pp1_iter2_reg),32));
    tmp_20_2_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_2_reg_1327_pp1_iter2_reg),32));
    tmp_20_3_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_3_reg_1338_pp1_iter2_reg),32));
    tmp_20_4_fu_1096_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_4_reg_1349_pp1_iter2_reg),32));
    tmp_20_5_fu_1104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_5_reg_1360_pp1_iter2_reg),32));
    tmp_20_6_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_6_reg_1371_pp1_iter2_reg),32));
    tmp_20_7_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_7_reg_1382_pp1_iter2_reg),32));
    tmp_20_8_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_8_reg_1393_pp1_iter2_reg),32));
    tmp_20_9_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_9_reg_1404_pp1_iter2_reg),32));
    tmp_20_s_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_s_reg_1415_pp1_iter2_reg),32));
    tmp_21_10_fu_1155_p2 <= std_logic_vector(unsigned(sum_pix_ch0_11_load_1_reg_1536) + unsigned(tmp_20_10_fu_1152_p1));
    tmp_21_11_fu_1163_p2 <= std_logic_vector(unsigned(sum_pix_ch0_12_load_1_reg_1541) + unsigned(tmp_20_11_fu_1160_p1));
    tmp_21_12_fu_1171_p2 <= std_logic_vector(unsigned(sum_pix_ch0_13_load_1_reg_1546) + unsigned(tmp_20_12_fu_1168_p1));
    tmp_21_13_fu_1179_p2 <= std_logic_vector(unsigned(sum_pix_ch0_14_load_1_reg_1551) + unsigned(tmp_20_13_fu_1176_p1));
    tmp_21_14_fu_1187_p2 <= std_logic_vector(unsigned(sum_pix_ch0_15_load_1_reg_1556) + unsigned(tmp_20_14_fu_1184_p1));
    tmp_21_1_fu_1075_p2 <= std_logic_vector(unsigned(sum_pix_ch0_1_load_1_reg_1486) + unsigned(tmp_20_1_fu_1072_p1));
    tmp_21_2_fu_1083_p2 <= std_logic_vector(unsigned(sum_pix_ch0_2_load_1_reg_1491) + unsigned(tmp_20_2_fu_1080_p1));
    tmp_21_3_fu_1091_p2 <= std_logic_vector(unsigned(sum_pix_ch0_3_load_1_reg_1496) + unsigned(tmp_20_3_fu_1088_p1));
    tmp_21_4_fu_1099_p2 <= std_logic_vector(unsigned(sum_pix_ch0_4_load_1_reg_1501) + unsigned(tmp_20_4_fu_1096_p1));
    tmp_21_5_fu_1107_p2 <= std_logic_vector(unsigned(sum_pix_ch0_5_load_1_reg_1506) + unsigned(tmp_20_5_fu_1104_p1));
    tmp_21_6_fu_1115_p2 <= std_logic_vector(unsigned(sum_pix_ch0_6_load_1_reg_1511) + unsigned(tmp_20_6_fu_1112_p1));
    tmp_21_7_fu_1123_p2 <= std_logic_vector(unsigned(sum_pix_ch0_7_load_1_reg_1516) + unsigned(tmp_20_7_fu_1120_p1));
    tmp_21_8_fu_1131_p2 <= std_logic_vector(unsigned(sum_pix_ch0_8_load_1_reg_1521) + unsigned(tmp_20_8_fu_1128_p1));
    tmp_21_9_fu_1139_p2 <= std_logic_vector(unsigned(sum_pix_ch0_9_load_1_reg_1526) + unsigned(tmp_20_9_fu_1136_p1));
    tmp_21_s_fu_1147_p2 <= std_logic_vector(unsigned(sum_pix_ch0_10_load_1_reg_1531) + unsigned(tmp_20_s_fu_1144_p1));
    tmp_5_fu_1067_p2 <= std_logic_vector(unsigned(sum_pix_ch0_0_load_1_reg_1481) + unsigned(tmp_s_fu_1064_p1));
    tmp_6_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_785),64));
    tmp_7_fu_839_p3 <= (N_ADDS_read_reg_1267 & ap_const_lv4_0);
    tmp_8_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_mid2_reg_1295),64));
    tmp_9_fu_910_p1 <= in_stream0_V_data_V_0_data_out(8 - 1 downto 0);
    tmp_data_V_1_fu_1230_p17 <= (((((((((((((((sum_pix_ch0_15_q1 & sum_pix_ch0_14_q1) & sum_pix_ch0_13_q1) & sum_pix_ch0_12_q1) & sum_pix_ch0_11_q1) & sum_pix_ch0_10_q1) & sum_pix_ch0_9_q1) & sum_pix_ch0_8_q1) & sum_pix_ch0_7_q1) & sum_pix_ch0_6_q1) & sum_pix_ch0_5_q1) & sum_pix_ch0_4_q1) & sum_pix_ch0_3_q1) & sum_pix_ch0_2_q1) & sum_pix_ch0_1_q1) & sum_pix_ch0_0_q1);
    tmp_fu_828_p3 <= (N_ADDS_read_reg_1267 & ap_const_lv7_0);
    tmp_last_V_fu_1204_p2 <= "1" when (i_2_reg_785 = ap_const_lv8_8F) else "0";
    tmp_s_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1305_pp1_iter2_reg),32));
end behav;
