// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="scurve_adder36,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z035ffg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.426000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=0,HLS_SYN_FF=4121,HLS_SYN_LUT=3164}" *)

module scurve_adder36 (
        ap_clk,
        ap_rst_n,
        in_stream0_TDATA,
        in_stream0_TVALID,
        in_stream0_TREADY,
        in_stream0_TKEEP,
        in_stream0_TSTRB,
        in_stream0_TUSER,
        in_stream0_TLAST,
        in_stream0_TID,
        in_stream0_TDEST,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TKEEP,
        out_stream_TSTRB,
        out_stream_TUSER,
        out_stream_TLAST,
        out_stream_TID,
        out_stream_TDEST,
        TEST_MODE,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_pp1_stage0 = 7'd8;
parameter    ap_ST_fsm_state9 = 7'd16;
parameter    ap_ST_fsm_pp2_stage0 = 7'd32;
parameter    ap_ST_fsm_state14 = 7'd64;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [127:0] in_stream0_TDATA;
input   in_stream0_TVALID;
output   in_stream0_TREADY;
input  [15:0] in_stream0_TKEEP;
input  [15:0] in_stream0_TSTRB;
input  [5:0] in_stream0_TUSER;
input  [0:0] in_stream0_TLAST;
input  [4:0] in_stream0_TID;
input  [5:0] in_stream0_TDEST;
output  [511:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output  [63:0] out_stream_TKEEP;
output  [63:0] out_stream_TSTRB;
output  [5:0] out_stream_TUSER;
output  [0:0] out_stream_TLAST;
output  [4:0] out_stream_TID;
output  [5:0] out_stream_TDEST;
input  [31:0] TEST_MODE;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [127:0] in_stream0_V_data_V_0_data_out;
wire    in_stream0_V_data_V_0_vld_in;
wire    in_stream0_V_data_V_0_vld_out;
wire    in_stream0_V_data_V_0_ack_in;
reg    in_stream0_V_data_V_0_ack_out;
reg   [127:0] in_stream0_V_data_V_0_payload_A;
reg   [127:0] in_stream0_V_data_V_0_payload_B;
reg    in_stream0_V_data_V_0_sel_rd;
reg    in_stream0_V_data_V_0_sel_wr;
wire    in_stream0_V_data_V_0_sel;
wire    in_stream0_V_data_V_0_load_A;
wire    in_stream0_V_data_V_0_load_B;
reg   [1:0] in_stream0_V_data_V_0_state;
wire    in_stream0_V_data_V_0_state_cmp_full;
wire    in_stream0_V_dest_V_0_vld_in;
reg    in_stream0_V_dest_V_0_ack_out;
reg   [1:0] in_stream0_V_dest_V_0_state;
reg   [511:0] out_stream_V_data_V_1_data_out;
reg    out_stream_V_data_V_1_vld_in;
wire    out_stream_V_data_V_1_vld_out;
wire    out_stream_V_data_V_1_ack_in;
wire    out_stream_V_data_V_1_ack_out;
reg   [511:0] out_stream_V_data_V_1_payload_A;
reg   [511:0] out_stream_V_data_V_1_payload_B;
reg    out_stream_V_data_V_1_sel_rd;
reg    out_stream_V_data_V_1_sel_wr;
wire    out_stream_V_data_V_1_sel;
wire    out_stream_V_data_V_1_load_A;
wire    out_stream_V_data_V_1_load_B;
reg   [1:0] out_stream_V_data_V_1_state;
wire    out_stream_V_data_V_1_state_cmp_full;
wire   [63:0] out_stream_V_keep_V_1_data_out;
reg    out_stream_V_keep_V_1_vld_in;
wire    out_stream_V_keep_V_1_vld_out;
wire    out_stream_V_keep_V_1_ack_in;
wire    out_stream_V_keep_V_1_ack_out;
reg    out_stream_V_keep_V_1_sel_rd;
wire    out_stream_V_keep_V_1_sel;
reg   [1:0] out_stream_V_keep_V_1_state;
wire   [63:0] out_stream_V_strb_V_1_data_out;
reg    out_stream_V_strb_V_1_vld_in;
wire    out_stream_V_strb_V_1_vld_out;
wire    out_stream_V_strb_V_1_ack_in;
wire    out_stream_V_strb_V_1_ack_out;
reg    out_stream_V_strb_V_1_sel_rd;
wire    out_stream_V_strb_V_1_sel;
reg   [1:0] out_stream_V_strb_V_1_state;
wire   [5:0] out_stream_V_user_V_1_data_out;
reg    out_stream_V_user_V_1_vld_in;
wire    out_stream_V_user_V_1_vld_out;
wire    out_stream_V_user_V_1_ack_in;
wire    out_stream_V_user_V_1_ack_out;
reg    out_stream_V_user_V_1_sel_rd;
wire    out_stream_V_user_V_1_sel;
reg   [1:0] out_stream_V_user_V_1_state;
reg   [0:0] out_stream_V_last_V_1_data_out;
reg    out_stream_V_last_V_1_vld_in;
wire    out_stream_V_last_V_1_vld_out;
wire    out_stream_V_last_V_1_ack_in;
wire    out_stream_V_last_V_1_ack_out;
reg   [0:0] out_stream_V_last_V_1_payload_A;
reg   [0:0] out_stream_V_last_V_1_payload_B;
reg    out_stream_V_last_V_1_sel_rd;
reg    out_stream_V_last_V_1_sel_wr;
wire    out_stream_V_last_V_1_sel;
wire    out_stream_V_last_V_1_load_A;
wire    out_stream_V_last_V_1_load_B;
reg   [1:0] out_stream_V_last_V_1_state;
wire    out_stream_V_last_V_1_state_cmp_full;
wire   [4:0] out_stream_V_id_V_1_data_out;
reg    out_stream_V_id_V_1_vld_in;
wire    out_stream_V_id_V_1_vld_out;
wire    out_stream_V_id_V_1_ack_in;
wire    out_stream_V_id_V_1_ack_out;
reg    out_stream_V_id_V_1_sel_rd;
wire    out_stream_V_id_V_1_sel;
reg   [1:0] out_stream_V_id_V_1_state;
wire   [5:0] out_stream_V_dest_V_1_data_out;
reg    out_stream_V_dest_V_1_vld_in;
wire    out_stream_V_dest_V_1_vld_out;
wire    out_stream_V_dest_V_1_ack_in;
wire    out_stream_V_dest_V_1_ack_out;
reg    out_stream_V_dest_V_1_sel_rd;
wire    out_stream_V_dest_V_1_sel;
reg   [1:0] out_stream_V_dest_V_1_state;
wire   [15:0] N_ADDS;
reg    in_stream0_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_flatten_reg_1625;
reg    out_stream_TDATA_blk_n;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond4_reg_1905;
reg   [0:0] exitcond4_reg_1905_pp2_iter1_reg;
reg    ap_enable_reg_pp2_iter3;
reg   [0:0] exitcond4_reg_1905_pp2_iter2_reg;
reg   [23:0] indvar_flatten_reg_807;
reg   [7:0] i_1_reg_818;
reg   [7:0] i_2_reg_829;
wire   [31:0] sum_pix_ch0_0_q0;
reg   [31:0] reg_840;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state4_pp1_stage0_iter0;
reg    ap_block_state5_pp1_stage0_iter1;
wire    ap_block_state6_pp1_stage0_iter2;
wire    ap_block_state7_pp1_stage0_iter3;
wire    ap_block_state8_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] exitcond_flatten_reg_1625_pp1_iter1_reg;
wire   [31:0] sum_pix_ch0_0_q1;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state10_pp2_stage0_iter0;
wire    ap_block_state11_pp2_stage0_iter1;
wire    ap_block_state12_pp2_stage0_iter2;
reg    ap_block_state12_io;
wire    ap_block_state13_pp2_stage0_iter3;
reg    ap_block_state13_io;
reg    ap_block_pp2_stage0_11001;
reg   [0:0] tmp_2_reg_1900;
wire   [31:0] sum_pix_ch0_1_q0;
reg   [31:0] reg_845;
wire   [31:0] sum_pix_ch0_1_q1;
wire   [31:0] sum_pix_ch0_2_q0;
reg   [31:0] reg_850;
wire   [31:0] sum_pix_ch0_2_q1;
wire   [31:0] sum_pix_ch0_3_q0;
reg   [31:0] reg_855;
wire   [31:0] sum_pix_ch0_3_q1;
wire   [31:0] sum_pix_ch0_4_q0;
reg   [31:0] reg_860;
wire   [31:0] sum_pix_ch0_4_q1;
wire   [31:0] sum_pix_ch0_5_q0;
reg   [31:0] reg_865;
wire   [31:0] sum_pix_ch0_5_q1;
wire   [31:0] sum_pix_ch0_6_q0;
reg   [31:0] reg_870;
wire   [31:0] sum_pix_ch0_6_q1;
wire   [31:0] sum_pix_ch0_7_q0;
reg   [31:0] reg_875;
wire   [31:0] sum_pix_ch0_7_q1;
wire   [31:0] sum_pix_ch0_8_q0;
reg   [31:0] reg_880;
wire   [31:0] sum_pix_ch0_8_q1;
wire   [31:0] sum_pix_ch0_9_q0;
reg   [31:0] reg_885;
wire   [31:0] sum_pix_ch0_9_q1;
wire   [31:0] sum_pix_ch0_10_q0;
reg   [31:0] reg_890;
wire   [31:0] sum_pix_ch0_10_q1;
wire   [31:0] sum_pix_ch0_11_q0;
reg   [31:0] reg_895;
wire   [31:0] sum_pix_ch0_11_q1;
wire   [31:0] sum_pix_ch0_12_q0;
reg   [31:0] reg_900;
wire   [31:0] sum_pix_ch0_12_q1;
wire   [31:0] sum_pix_ch0_13_q0;
reg   [31:0] reg_905;
wire   [31:0] sum_pix_ch0_13_q1;
wire   [31:0] sum_pix_ch0_14_q0;
reg   [31:0] reg_910;
wire   [31:0] sum_pix_ch0_14_q1;
wire   [31:0] sum_pix_ch0_15_q0;
reg   [31:0] reg_915;
wire   [31:0] sum_pix_ch0_15_q1;
reg   [15:0] N_ADDS_read_reg_1606;
wire   [7:0] i_3_fu_926_p2;
wire    ap_CS_fsm_state2;
wire   [23:0] bound_fu_974_p2;
reg   [23:0] bound_reg_1620;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_flatten_fu_980_p2;
reg   [0:0] exitcond_flatten_reg_1625_pp1_iter2_reg;
reg   [0:0] exitcond_flatten_reg_1625_pp1_iter3_reg;
wire   [23:0] indvar_flatten_next_fu_985_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [7:0] i_1_mid2_fu_997_p3;
reg   [7:0] i_1_mid2_reg_1634;
wire   [7:0] i_4_fu_1005_p2;
wire   [7:0] tmp_12_fu_1034_p1;
reg   [7:0] tmp_12_reg_1644;
reg   [7:0] tmp_12_reg_1644_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_0_addr_1_reg_1649;
reg   [7:0] sum_pix_ch0_0_addr_1_reg_1649_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_0_addr_1_reg_1649_pp1_iter3_reg;
reg   [7:0] phitmp_1_reg_1655;
reg   [7:0] phitmp_1_reg_1655_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_1_addr_1_reg_1660;
reg   [7:0] sum_pix_ch0_1_addr_1_reg_1660_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_1_addr_1_reg_1660_pp1_iter3_reg;
reg   [7:0] phitmp_2_reg_1666;
reg   [7:0] phitmp_2_reg_1666_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_2_addr_1_reg_1671;
reg   [7:0] sum_pix_ch0_2_addr_1_reg_1671_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_2_addr_1_reg_1671_pp1_iter3_reg;
reg   [7:0] phitmp_3_reg_1677;
reg   [7:0] phitmp_3_reg_1677_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_3_addr_1_reg_1682;
reg   [7:0] sum_pix_ch0_3_addr_1_reg_1682_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_3_addr_1_reg_1682_pp1_iter3_reg;
reg   [7:0] phitmp_4_reg_1688;
reg   [7:0] phitmp_4_reg_1688_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_4_addr_1_reg_1693;
reg   [7:0] sum_pix_ch0_4_addr_1_reg_1693_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_4_addr_1_reg_1693_pp1_iter3_reg;
reg   [7:0] phitmp_5_reg_1699;
reg   [7:0] phitmp_5_reg_1699_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_5_addr_1_reg_1704;
reg   [7:0] sum_pix_ch0_5_addr_1_reg_1704_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_5_addr_1_reg_1704_pp1_iter3_reg;
reg   [7:0] phitmp_6_reg_1710;
reg   [7:0] phitmp_6_reg_1710_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_6_addr_1_reg_1715;
reg   [7:0] sum_pix_ch0_6_addr_1_reg_1715_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_6_addr_1_reg_1715_pp1_iter3_reg;
reg   [7:0] phitmp_7_reg_1721;
reg   [7:0] phitmp_7_reg_1721_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_7_addr_1_reg_1726;
reg   [7:0] sum_pix_ch0_7_addr_1_reg_1726_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_7_addr_1_reg_1726_pp1_iter3_reg;
reg   [7:0] phitmp_8_reg_1732;
reg   [7:0] phitmp_8_reg_1732_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_8_addr_1_reg_1737;
reg   [7:0] sum_pix_ch0_8_addr_1_reg_1737_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_8_addr_1_reg_1737_pp1_iter3_reg;
reg   [7:0] phitmp_9_reg_1743;
reg   [7:0] phitmp_9_reg_1743_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_9_addr_1_reg_1748;
reg   [7:0] sum_pix_ch0_9_addr_1_reg_1748_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_9_addr_1_reg_1748_pp1_iter3_reg;
reg   [7:0] phitmp_s_reg_1754;
reg   [7:0] phitmp_s_reg_1754_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_10_addr_1_reg_1759;
reg   [7:0] sum_pix_ch0_10_addr_1_reg_1759_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_10_addr_1_reg_1759_pp1_iter3_reg;
reg   [7:0] phitmp_10_reg_1765;
reg   [7:0] phitmp_10_reg_1765_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_11_addr_1_reg_1770;
reg   [7:0] sum_pix_ch0_11_addr_1_reg_1770_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_11_addr_1_reg_1770_pp1_iter3_reg;
reg   [7:0] phitmp_11_reg_1776;
reg   [7:0] phitmp_11_reg_1776_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_12_addr_1_reg_1781;
reg   [7:0] sum_pix_ch0_12_addr_1_reg_1781_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_12_addr_1_reg_1781_pp1_iter3_reg;
reg   [7:0] phitmp_12_reg_1787;
reg   [7:0] phitmp_12_reg_1787_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_13_addr_1_reg_1792;
reg   [7:0] sum_pix_ch0_13_addr_1_reg_1792_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_13_addr_1_reg_1792_pp1_iter3_reg;
reg   [7:0] phitmp_13_reg_1798;
reg   [7:0] phitmp_13_reg_1798_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_14_addr_1_reg_1803;
reg   [7:0] sum_pix_ch0_14_addr_1_reg_1803_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_14_addr_1_reg_1803_pp1_iter3_reg;
reg   [7:0] phitmp_14_reg_1809;
reg   [7:0] phitmp_14_reg_1809_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_15_addr_1_reg_1814;
reg   [7:0] sum_pix_ch0_15_addr_1_reg_1814_pp1_iter2_reg;
reg   [7:0] sum_pix_ch0_15_addr_1_reg_1814_pp1_iter3_reg;
wire   [31:0] tmp_9_fu_1191_p2;
reg   [31:0] tmp_9_reg_1820;
wire   [31:0] tmp_29_1_fu_1200_p2;
reg   [31:0] tmp_29_1_reg_1825;
wire   [31:0] tmp_29_2_fu_1209_p2;
reg   [31:0] tmp_29_2_reg_1830;
wire   [31:0] tmp_29_3_fu_1218_p2;
reg   [31:0] tmp_29_3_reg_1835;
wire   [31:0] tmp_29_4_fu_1227_p2;
reg   [31:0] tmp_29_4_reg_1840;
wire   [31:0] tmp_29_5_fu_1236_p2;
reg   [31:0] tmp_29_5_reg_1845;
wire   [31:0] tmp_29_6_fu_1245_p2;
reg   [31:0] tmp_29_6_reg_1850;
wire   [31:0] tmp_29_7_fu_1254_p2;
reg   [31:0] tmp_29_7_reg_1855;
wire   [31:0] tmp_29_8_fu_1263_p2;
reg   [31:0] tmp_29_8_reg_1860;
wire   [31:0] tmp_29_9_fu_1272_p2;
reg   [31:0] tmp_29_9_reg_1865;
wire   [31:0] tmp_29_s_fu_1281_p2;
reg   [31:0] tmp_29_s_reg_1870;
wire   [31:0] tmp_29_10_fu_1290_p2;
reg   [31:0] tmp_29_10_reg_1875;
wire   [31:0] tmp_29_11_fu_1299_p2;
reg   [31:0] tmp_29_11_reg_1880;
wire   [31:0] tmp_29_12_fu_1308_p2;
reg   [31:0] tmp_29_12_reg_1885;
wire   [31:0] tmp_29_13_fu_1317_p2;
reg   [31:0] tmp_29_13_reg_1890;
wire   [31:0] tmp_29_14_fu_1326_p2;
reg   [31:0] tmp_29_14_reg_1895;
wire   [0:0] tmp_2_fu_1332_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond4_fu_1337_p2;
wire   [7:0] i_5_fu_1343_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] tmp_last_V_fu_1349_p2;
reg   [0:0] tmp_last_V_reg_1914;
reg   [0:0] tmp_last_V_reg_1914_pp2_iter1_reg;
wire   [11:0] tmp_3_fu_1375_p3;
reg   [11:0] tmp_3_reg_1999;
reg   [11:0] tmp_3_reg_1999_pp2_iter1_reg;
wire   [511:0] tmp_data_V_1_fu_1593_p3;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state10;
reg   [7:0] sum_pix_ch0_0_address0;
reg    sum_pix_ch0_0_ce0;
reg    sum_pix_ch0_0_we0;
reg   [7:0] sum_pix_ch0_0_address1;
reg    sum_pix_ch0_0_ce1;
reg    sum_pix_ch0_0_we1;
reg   [7:0] sum_pix_ch0_1_address0;
reg    sum_pix_ch0_1_ce0;
reg    sum_pix_ch0_1_we0;
reg   [7:0] sum_pix_ch0_1_address1;
reg    sum_pix_ch0_1_ce1;
reg    sum_pix_ch0_1_we1;
reg   [7:0] sum_pix_ch0_2_address0;
reg    sum_pix_ch0_2_ce0;
reg    sum_pix_ch0_2_we0;
reg   [7:0] sum_pix_ch0_2_address1;
reg    sum_pix_ch0_2_ce1;
reg    sum_pix_ch0_2_we1;
reg   [7:0] sum_pix_ch0_3_address0;
reg    sum_pix_ch0_3_ce0;
reg    sum_pix_ch0_3_we0;
reg   [7:0] sum_pix_ch0_3_address1;
reg    sum_pix_ch0_3_ce1;
reg    sum_pix_ch0_3_we1;
reg   [7:0] sum_pix_ch0_4_address0;
reg    sum_pix_ch0_4_ce0;
reg    sum_pix_ch0_4_we0;
reg   [7:0] sum_pix_ch0_4_address1;
reg    sum_pix_ch0_4_ce1;
reg    sum_pix_ch0_4_we1;
reg   [7:0] sum_pix_ch0_5_address0;
reg    sum_pix_ch0_5_ce0;
reg    sum_pix_ch0_5_we0;
reg   [7:0] sum_pix_ch0_5_address1;
reg    sum_pix_ch0_5_ce1;
reg    sum_pix_ch0_5_we1;
reg   [7:0] sum_pix_ch0_6_address0;
reg    sum_pix_ch0_6_ce0;
reg    sum_pix_ch0_6_we0;
reg   [7:0] sum_pix_ch0_6_address1;
reg    sum_pix_ch0_6_ce1;
reg    sum_pix_ch0_6_we1;
reg   [7:0] sum_pix_ch0_7_address0;
reg    sum_pix_ch0_7_ce0;
reg    sum_pix_ch0_7_we0;
reg   [7:0] sum_pix_ch0_7_address1;
reg    sum_pix_ch0_7_ce1;
reg    sum_pix_ch0_7_we1;
reg   [7:0] sum_pix_ch0_8_address0;
reg    sum_pix_ch0_8_ce0;
reg    sum_pix_ch0_8_we0;
reg   [7:0] sum_pix_ch0_8_address1;
reg    sum_pix_ch0_8_ce1;
reg    sum_pix_ch0_8_we1;
reg   [7:0] sum_pix_ch0_9_address0;
reg    sum_pix_ch0_9_ce0;
reg    sum_pix_ch0_9_we0;
reg   [7:0] sum_pix_ch0_9_address1;
reg    sum_pix_ch0_9_ce1;
reg    sum_pix_ch0_9_we1;
reg   [7:0] sum_pix_ch0_10_address0;
reg    sum_pix_ch0_10_ce0;
reg    sum_pix_ch0_10_we0;
reg   [7:0] sum_pix_ch0_10_address1;
reg    sum_pix_ch0_10_ce1;
reg    sum_pix_ch0_10_we1;
reg   [7:0] sum_pix_ch0_11_address0;
reg    sum_pix_ch0_11_ce0;
reg    sum_pix_ch0_11_we0;
reg   [7:0] sum_pix_ch0_11_address1;
reg    sum_pix_ch0_11_ce1;
reg    sum_pix_ch0_11_we1;
reg   [7:0] sum_pix_ch0_12_address0;
reg    sum_pix_ch0_12_ce0;
reg    sum_pix_ch0_12_we0;
reg   [7:0] sum_pix_ch0_12_address1;
reg    sum_pix_ch0_12_ce1;
reg    sum_pix_ch0_12_we1;
reg   [7:0] sum_pix_ch0_13_address0;
reg    sum_pix_ch0_13_ce0;
reg    sum_pix_ch0_13_we0;
reg   [7:0] sum_pix_ch0_13_address1;
reg    sum_pix_ch0_13_ce1;
reg    sum_pix_ch0_13_we1;
reg   [7:0] sum_pix_ch0_14_address0;
reg    sum_pix_ch0_14_ce0;
reg    sum_pix_ch0_14_we0;
reg   [7:0] sum_pix_ch0_14_address1;
reg    sum_pix_ch0_14_ce1;
reg    sum_pix_ch0_14_we1;
reg   [7:0] sum_pix_ch0_15_address0;
reg    sum_pix_ch0_15_ce0;
reg    sum_pix_ch0_15_we0;
reg   [7:0] sum_pix_ch0_15_address1;
reg    sum_pix_ch0_15_ce1;
reg    sum_pix_ch0_15_we1;
reg   [7:0] i_reg_796;
wire   [0:0] exitcond1_fu_920_p2;
wire   [63:0] tmp_1_fu_932_p1;
wire   [63:0] tmp_8_fu_1011_p1;
wire   [63:0] tmp_s_fu_1355_p1;
wire    ap_block_pp2_stage0_01001;
wire   [22:0] tmp_10_fu_952_p3;
wire   [19:0] tmp_11_fu_963_p3;
wire   [23:0] p_shl_fu_959_p1;
wire   [23:0] p_shl2_fu_970_p1;
wire   [0:0] exitcond_fu_991_p2;
wire   [31:0] tmp_6_fu_1188_p1;
wire   [31:0] tmp_28_1_fu_1197_p1;
wire   [31:0] tmp_28_2_fu_1206_p1;
wire   [31:0] tmp_28_3_fu_1215_p1;
wire   [31:0] tmp_28_4_fu_1224_p1;
wire   [31:0] tmp_28_5_fu_1233_p1;
wire   [31:0] tmp_28_6_fu_1242_p1;
wire   [31:0] tmp_28_7_fu_1251_p1;
wire   [31:0] tmp_28_8_fu_1260_p1;
wire   [31:0] tmp_28_9_fu_1269_p1;
wire   [31:0] tmp_28_s_fu_1278_p1;
wire   [31:0] tmp_28_10_fu_1287_p1;
wire   [31:0] tmp_28_11_fu_1296_p1;
wire   [31:0] tmp_28_12_fu_1305_p1;
wire   [31:0] tmp_28_13_fu_1314_p1;
wire   [31:0] tmp_28_14_fu_1323_p1;
wire   [11:0] val_assign_1_s_fu_1422_p2;
wire   [11:0] val_assign_1_1_fu_1431_p2;
wire   [11:0] val_assign_1_2_fu_1440_p2;
wire   [11:0] val_assign_1_3_fu_1449_p2;
wire   [11:0] val_assign_1_4_fu_1458_p2;
wire   [11:0] val_assign_1_5_fu_1467_p2;
wire   [11:0] val_assign_1_6_fu_1476_p2;
wire   [11:0] val_assign_1_7_fu_1485_p2;
wire   [11:0] val_assign_1_8_fu_1494_p2;
wire   [11:0] val_assign_1_9_fu_1503_p2;
wire   [11:0] val_assign_1_10_fu_1512_p2;
wire   [11:0] val_assign_1_11_fu_1521_p2;
wire   [11:0] val_assign_1_12_fu_1530_p2;
wire   [11:0] val_assign_1_13_fu_1539_p2;
wire   [11:0] val_assign_1_14_fu_1548_p2;
wire   [31:0] val_assign_1_13_cast_fu_1544_p1;
wire   [31:0] val_assign_1_12_cast_fu_1535_p1;
wire   [31:0] val_assign_1_11_cast_fu_1526_p1;
wire   [31:0] val_assign_1_10_cast_fu_1517_p1;
wire   [31:0] val_assign_1_9_cast_fu_1508_p1;
wire   [31:0] val_assign_1_8_cast_fu_1499_p1;
wire   [31:0] val_assign_1_7_cast_fu_1490_p1;
wire   [31:0] val_assign_1_6_cast_fu_1481_p1;
wire   [31:0] val_assign_1_5_cast_fu_1472_p1;
wire   [31:0] val_assign_1_4_cast_fu_1463_p1;
wire   [31:0] val_assign_1_3_cast_fu_1454_p1;
wire   [31:0] val_assign_1_2_cast_fu_1445_p1;
wire   [31:0] val_assign_1_1_cast_fu_1436_p1;
wire   [31:0] val_assign_1_cast_fu_1427_p1;
wire   [31:0] tmp_3_cast_fu_1419_p1;
wire   [491:0] tmp_fu_1553_p17;
wire   [511:0] sum_pix_tot_data_V_s_fu_1383_p17;
wire   [511:0] sum_pix_tot_data_V_1_fu_1589_p1;
wire    ap_CS_fsm_state14;
reg    ap_block_state14;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 in_stream0_V_data_V_0_sel_rd = 1'b0;
#0 in_stream0_V_data_V_0_sel_wr = 1'b0;
#0 in_stream0_V_data_V_0_state = 2'd0;
#0 in_stream0_V_dest_V_0_state = 2'd0;
#0 out_stream_V_data_V_1_sel_rd = 1'b0;
#0 out_stream_V_data_V_1_sel_wr = 1'b0;
#0 out_stream_V_data_V_1_state = 2'd0;
#0 out_stream_V_keep_V_1_sel_rd = 1'b0;
#0 out_stream_V_keep_V_1_state = 2'd0;
#0 out_stream_V_strb_V_1_sel_rd = 1'b0;
#0 out_stream_V_strb_V_1_state = 2'd0;
#0 out_stream_V_user_V_1_sel_rd = 1'b0;
#0 out_stream_V_user_V_1_state = 2'd0;
#0 out_stream_V_last_V_1_sel_rd = 1'b0;
#0 out_stream_V_last_V_1_sel_wr = 1'b0;
#0 out_stream_V_last_V_1_state = 2'd0;
#0 out_stream_V_id_V_1_sel_rd = 1'b0;
#0 out_stream_V_id_V_1_state = 2'd0;
#0 out_stream_V_dest_V_1_sel_rd = 1'b0;
#0 out_stream_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
end

scurve_adder36_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
scurve_adder36_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .N_ADDS(N_ADDS)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_0_address0),
    .ce0(sum_pix_ch0_0_ce0),
    .we0(sum_pix_ch0_0_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_0_q0),
    .address1(sum_pix_ch0_0_address1),
    .ce1(sum_pix_ch0_0_ce1),
    .we1(sum_pix_ch0_0_we1),
    .d1(tmp_9_reg_1820),
    .q1(sum_pix_ch0_0_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_1_address0),
    .ce0(sum_pix_ch0_1_ce0),
    .we0(sum_pix_ch0_1_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_1_q0),
    .address1(sum_pix_ch0_1_address1),
    .ce1(sum_pix_ch0_1_ce1),
    .we1(sum_pix_ch0_1_we1),
    .d1(tmp_29_1_reg_1825),
    .q1(sum_pix_ch0_1_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_2_address0),
    .ce0(sum_pix_ch0_2_ce0),
    .we0(sum_pix_ch0_2_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_2_q0),
    .address1(sum_pix_ch0_2_address1),
    .ce1(sum_pix_ch0_2_ce1),
    .we1(sum_pix_ch0_2_we1),
    .d1(tmp_29_2_reg_1830),
    .q1(sum_pix_ch0_2_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_3_address0),
    .ce0(sum_pix_ch0_3_ce0),
    .we0(sum_pix_ch0_3_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_3_q0),
    .address1(sum_pix_ch0_3_address1),
    .ce1(sum_pix_ch0_3_ce1),
    .we1(sum_pix_ch0_3_we1),
    .d1(tmp_29_3_reg_1835),
    .q1(sum_pix_ch0_3_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_4_address0),
    .ce0(sum_pix_ch0_4_ce0),
    .we0(sum_pix_ch0_4_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_4_q0),
    .address1(sum_pix_ch0_4_address1),
    .ce1(sum_pix_ch0_4_ce1),
    .we1(sum_pix_ch0_4_we1),
    .d1(tmp_29_4_reg_1840),
    .q1(sum_pix_ch0_4_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_5_address0),
    .ce0(sum_pix_ch0_5_ce0),
    .we0(sum_pix_ch0_5_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_5_q0),
    .address1(sum_pix_ch0_5_address1),
    .ce1(sum_pix_ch0_5_ce1),
    .we1(sum_pix_ch0_5_we1),
    .d1(tmp_29_5_reg_1845),
    .q1(sum_pix_ch0_5_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_6_address0),
    .ce0(sum_pix_ch0_6_ce0),
    .we0(sum_pix_ch0_6_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_6_q0),
    .address1(sum_pix_ch0_6_address1),
    .ce1(sum_pix_ch0_6_ce1),
    .we1(sum_pix_ch0_6_we1),
    .d1(tmp_29_6_reg_1850),
    .q1(sum_pix_ch0_6_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_7_address0),
    .ce0(sum_pix_ch0_7_ce0),
    .we0(sum_pix_ch0_7_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_7_q0),
    .address1(sum_pix_ch0_7_address1),
    .ce1(sum_pix_ch0_7_ce1),
    .we1(sum_pix_ch0_7_we1),
    .d1(tmp_29_7_reg_1855),
    .q1(sum_pix_ch0_7_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_8_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_8_address0),
    .ce0(sum_pix_ch0_8_ce0),
    .we0(sum_pix_ch0_8_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_8_q0),
    .address1(sum_pix_ch0_8_address1),
    .ce1(sum_pix_ch0_8_ce1),
    .we1(sum_pix_ch0_8_we1),
    .d1(tmp_29_8_reg_1860),
    .q1(sum_pix_ch0_8_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_9_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_9_address0),
    .ce0(sum_pix_ch0_9_ce0),
    .we0(sum_pix_ch0_9_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_9_q0),
    .address1(sum_pix_ch0_9_address1),
    .ce1(sum_pix_ch0_9_ce1),
    .we1(sum_pix_ch0_9_we1),
    .d1(tmp_29_9_reg_1865),
    .q1(sum_pix_ch0_9_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_10_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_10_address0),
    .ce0(sum_pix_ch0_10_ce0),
    .we0(sum_pix_ch0_10_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_10_q0),
    .address1(sum_pix_ch0_10_address1),
    .ce1(sum_pix_ch0_10_ce1),
    .we1(sum_pix_ch0_10_we1),
    .d1(tmp_29_s_reg_1870),
    .q1(sum_pix_ch0_10_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_11_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_11_address0),
    .ce0(sum_pix_ch0_11_ce0),
    .we0(sum_pix_ch0_11_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_11_q0),
    .address1(sum_pix_ch0_11_address1),
    .ce1(sum_pix_ch0_11_ce1),
    .we1(sum_pix_ch0_11_we1),
    .d1(tmp_29_10_reg_1875),
    .q1(sum_pix_ch0_11_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_12_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_12_address0),
    .ce0(sum_pix_ch0_12_ce0),
    .we0(sum_pix_ch0_12_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_12_q0),
    .address1(sum_pix_ch0_12_address1),
    .ce1(sum_pix_ch0_12_ce1),
    .we1(sum_pix_ch0_12_we1),
    .d1(tmp_29_11_reg_1880),
    .q1(sum_pix_ch0_12_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_13_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_13_address0),
    .ce0(sum_pix_ch0_13_ce0),
    .we0(sum_pix_ch0_13_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_13_q0),
    .address1(sum_pix_ch0_13_address1),
    .ce1(sum_pix_ch0_13_ce1),
    .we1(sum_pix_ch0_13_we1),
    .d1(tmp_29_12_reg_1885),
    .q1(sum_pix_ch0_13_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_14_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_14_address0),
    .ce0(sum_pix_ch0_14_ce0),
    .we0(sum_pix_ch0_14_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_14_q0),
    .address1(sum_pix_ch0_14_address1),
    .ce1(sum_pix_ch0_14_ce1),
    .we1(sum_pix_ch0_14_we1),
    .d1(tmp_29_13_reg_1890),
    .q1(sum_pix_ch0_14_q1)
);

scurve_adder36_subkb #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
sum_pix_ch0_15_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix_ch0_15_address0),
    .ce0(sum_pix_ch0_15_ce0),
    .we0(sum_pix_ch0_15_we0),
    .d0(32'd0),
    .q0(sum_pix_ch0_15_q0),
    .address1(sum_pix_ch0_15_address1),
    .ce1(sum_pix_ch0_15_ce1),
    .we1(sum_pix_ch0_15_we1),
    .d1(tmp_29_14_reg_1895),
    .q1(sum_pix_ch0_15_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state4)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state10) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state10)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream0_V_data_V_0_ack_out == 1'b1) & (in_stream0_V_data_V_0_vld_out == 1'b1))) begin
            in_stream0_V_data_V_0_sel_rd <= ~in_stream0_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream0_V_data_V_0_ack_in == 1'b1) & (in_stream0_V_data_V_0_vld_in == 1'b1))) begin
            in_stream0_V_data_V_0_sel_wr <= ~in_stream0_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream0_V_data_V_0_state == 2'd2) & (in_stream0_V_data_V_0_vld_in == 1'b0)) | ((in_stream0_V_data_V_0_state == 2'd3) & (in_stream0_V_data_V_0_vld_in == 1'b0) & (in_stream0_V_data_V_0_ack_out == 1'b1)))) begin
            in_stream0_V_data_V_0_state <= 2'd2;
        end else if ((((in_stream0_V_data_V_0_state == 2'd1) & (in_stream0_V_data_V_0_ack_out == 1'b0)) | ((in_stream0_V_data_V_0_state == 2'd3) & (in_stream0_V_data_V_0_ack_out == 1'b0) & (in_stream0_V_data_V_0_vld_in == 1'b1)))) begin
            in_stream0_V_data_V_0_state <= 2'd1;
        end else if (((~((in_stream0_V_data_V_0_vld_in == 1'b0) & (in_stream0_V_data_V_0_ack_out == 1'b1)) & ~((in_stream0_V_data_V_0_ack_out == 1'b0) & (in_stream0_V_data_V_0_vld_in == 1'b1)) & (in_stream0_V_data_V_0_state == 2'd3)) | ((in_stream0_V_data_V_0_state == 2'd1) & (in_stream0_V_data_V_0_ack_out == 1'b1)) | ((in_stream0_V_data_V_0_state == 2'd2) & (in_stream0_V_data_V_0_vld_in == 1'b1)))) begin
            in_stream0_V_data_V_0_state <= 2'd3;
        end else begin
            in_stream0_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream0_V_dest_V_0_state == 2'd2) & (in_stream0_V_dest_V_0_vld_in == 1'b0)) | ((in_stream0_V_dest_V_0_state == 2'd3) & (in_stream0_V_dest_V_0_vld_in == 1'b0) & (in_stream0_V_dest_V_0_ack_out == 1'b1)))) begin
            in_stream0_V_dest_V_0_state <= 2'd2;
        end else if ((((in_stream0_V_dest_V_0_state == 2'd1) & (in_stream0_V_dest_V_0_ack_out == 1'b0)) | ((in_stream0_V_dest_V_0_state == 2'd3) & (in_stream0_V_dest_V_0_ack_out == 1'b0) & (in_stream0_V_dest_V_0_vld_in == 1'b1)))) begin
            in_stream0_V_dest_V_0_state <= 2'd1;
        end else if (((~((in_stream0_V_dest_V_0_vld_in == 1'b0) & (in_stream0_V_dest_V_0_ack_out == 1'b1)) & ~((in_stream0_V_dest_V_0_ack_out == 1'b0) & (in_stream0_V_dest_V_0_vld_in == 1'b1)) & (in_stream0_V_dest_V_0_state == 2'd3)) | ((in_stream0_V_dest_V_0_state == 2'd1) & (in_stream0_V_dest_V_0_ack_out == 1'b1)) | ((in_stream0_V_dest_V_0_state == 2'd2) & (in_stream0_V_dest_V_0_vld_in == 1'b1)))) begin
            in_stream0_V_dest_V_0_state <= 2'd3;
        end else begin
            in_stream0_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_data_V_1_ack_out == 1'b1) & (out_stream_V_data_V_1_vld_out == 1'b1))) begin
            out_stream_V_data_V_1_sel_rd <= ~out_stream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_data_V_1_ack_in == 1'b1) & (out_stream_V_data_V_1_vld_in == 1'b1))) begin
            out_stream_V_data_V_1_sel_wr <= ~out_stream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_data_V_1_state == 2'd2) & (out_stream_V_data_V_1_vld_in == 1'b0)) | ((out_stream_V_data_V_1_state == 2'd3) & (out_stream_V_data_V_1_vld_in == 1'b0) & (out_stream_V_data_V_1_ack_out == 1'b1)))) begin
            out_stream_V_data_V_1_state <= 2'd2;
        end else if ((((out_stream_V_data_V_1_state == 2'd1) & (out_stream_V_data_V_1_ack_out == 1'b0)) | ((out_stream_V_data_V_1_state == 2'd3) & (out_stream_V_data_V_1_ack_out == 1'b0) & (out_stream_V_data_V_1_vld_in == 1'b1)))) begin
            out_stream_V_data_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_data_V_1_vld_in == 1'b0) & (out_stream_V_data_V_1_ack_out == 1'b1)) & ~((out_stream_V_data_V_1_ack_out == 1'b0) & (out_stream_V_data_V_1_vld_in == 1'b1)) & (out_stream_V_data_V_1_state == 2'd3)) | ((out_stream_V_data_V_1_state == 2'd1) & (out_stream_V_data_V_1_ack_out == 1'b1)) | ((out_stream_V_data_V_1_state == 2'd2) & (out_stream_V_data_V_1_vld_in == 1'b1)))) begin
            out_stream_V_data_V_1_state <= 2'd3;
        end else begin
            out_stream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_dest_V_1_ack_out == 1'b1) & (out_stream_V_dest_V_1_vld_out == 1'b1))) begin
            out_stream_V_dest_V_1_sel_rd <= ~out_stream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_dest_V_1_state == 2'd2) & (out_stream_V_dest_V_1_vld_in == 1'b0)) | ((out_stream_V_dest_V_1_state == 2'd3) & (out_stream_V_dest_V_1_vld_in == 1'b0) & (out_stream_V_dest_V_1_ack_out == 1'b1)))) begin
            out_stream_V_dest_V_1_state <= 2'd2;
        end else if ((((out_stream_V_dest_V_1_state == 2'd1) & (out_stream_V_dest_V_1_ack_out == 1'b0)) | ((out_stream_V_dest_V_1_state == 2'd3) & (out_stream_V_dest_V_1_ack_out == 1'b0) & (out_stream_V_dest_V_1_vld_in == 1'b1)))) begin
            out_stream_V_dest_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_dest_V_1_vld_in == 1'b0) & (out_stream_V_dest_V_1_ack_out == 1'b1)) & ~((out_stream_V_dest_V_1_ack_out == 1'b0) & (out_stream_V_dest_V_1_vld_in == 1'b1)) & (out_stream_V_dest_V_1_state == 2'd3)) | ((out_stream_V_dest_V_1_state == 2'd1) & (out_stream_V_dest_V_1_ack_out == 1'b1)) | ((out_stream_V_dest_V_1_state == 2'd2) & (out_stream_V_dest_V_1_vld_in == 1'b1)))) begin
            out_stream_V_dest_V_1_state <= 2'd3;
        end else begin
            out_stream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_id_V_1_ack_out == 1'b1) & (out_stream_V_id_V_1_vld_out == 1'b1))) begin
            out_stream_V_id_V_1_sel_rd <= ~out_stream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_id_V_1_state == 2'd2) & (out_stream_V_id_V_1_vld_in == 1'b0)) | ((out_stream_V_id_V_1_state == 2'd3) & (out_stream_V_id_V_1_vld_in == 1'b0) & (out_stream_V_id_V_1_ack_out == 1'b1)))) begin
            out_stream_V_id_V_1_state <= 2'd2;
        end else if ((((out_stream_V_id_V_1_state == 2'd1) & (out_stream_V_id_V_1_ack_out == 1'b0)) | ((out_stream_V_id_V_1_state == 2'd3) & (out_stream_V_id_V_1_ack_out == 1'b0) & (out_stream_V_id_V_1_vld_in == 1'b1)))) begin
            out_stream_V_id_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_id_V_1_vld_in == 1'b0) & (out_stream_V_id_V_1_ack_out == 1'b1)) & ~((out_stream_V_id_V_1_ack_out == 1'b0) & (out_stream_V_id_V_1_vld_in == 1'b1)) & (out_stream_V_id_V_1_state == 2'd3)) | ((out_stream_V_id_V_1_state == 2'd1) & (out_stream_V_id_V_1_ack_out == 1'b1)) | ((out_stream_V_id_V_1_state == 2'd2) & (out_stream_V_id_V_1_vld_in == 1'b1)))) begin
            out_stream_V_id_V_1_state <= 2'd3;
        end else begin
            out_stream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_keep_V_1_ack_out == 1'b1) & (out_stream_V_keep_V_1_vld_out == 1'b1))) begin
            out_stream_V_keep_V_1_sel_rd <= ~out_stream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_keep_V_1_state == 2'd2) & (out_stream_V_keep_V_1_vld_in == 1'b0)) | ((out_stream_V_keep_V_1_state == 2'd3) & (out_stream_V_keep_V_1_vld_in == 1'b0) & (out_stream_V_keep_V_1_ack_out == 1'b1)))) begin
            out_stream_V_keep_V_1_state <= 2'd2;
        end else if ((((out_stream_V_keep_V_1_state == 2'd1) & (out_stream_V_keep_V_1_ack_out == 1'b0)) | ((out_stream_V_keep_V_1_state == 2'd3) & (out_stream_V_keep_V_1_ack_out == 1'b0) & (out_stream_V_keep_V_1_vld_in == 1'b1)))) begin
            out_stream_V_keep_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_keep_V_1_vld_in == 1'b0) & (out_stream_V_keep_V_1_ack_out == 1'b1)) & ~((out_stream_V_keep_V_1_ack_out == 1'b0) & (out_stream_V_keep_V_1_vld_in == 1'b1)) & (out_stream_V_keep_V_1_state == 2'd3)) | ((out_stream_V_keep_V_1_state == 2'd1) & (out_stream_V_keep_V_1_ack_out == 1'b1)) | ((out_stream_V_keep_V_1_state == 2'd2) & (out_stream_V_keep_V_1_vld_in == 1'b1)))) begin
            out_stream_V_keep_V_1_state <= 2'd3;
        end else begin
            out_stream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_last_V_1_ack_out == 1'b1) & (out_stream_V_last_V_1_vld_out == 1'b1))) begin
            out_stream_V_last_V_1_sel_rd <= ~out_stream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_last_V_1_ack_in == 1'b1) & (out_stream_V_last_V_1_vld_in == 1'b1))) begin
            out_stream_V_last_V_1_sel_wr <= ~out_stream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_last_V_1_state == 2'd2) & (out_stream_V_last_V_1_vld_in == 1'b0)) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_V_last_V_1_vld_in == 1'b0) & (out_stream_V_last_V_1_ack_out == 1'b1)))) begin
            out_stream_V_last_V_1_state <= 2'd2;
        end else if ((((out_stream_V_last_V_1_state == 2'd1) & (out_stream_V_last_V_1_ack_out == 1'b0)) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_V_last_V_1_ack_out == 1'b0) & (out_stream_V_last_V_1_vld_in == 1'b1)))) begin
            out_stream_V_last_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_last_V_1_vld_in == 1'b0) & (out_stream_V_last_V_1_ack_out == 1'b1)) & ~((out_stream_V_last_V_1_ack_out == 1'b0) & (out_stream_V_last_V_1_vld_in == 1'b1)) & (out_stream_V_last_V_1_state == 2'd3)) | ((out_stream_V_last_V_1_state == 2'd1) & (out_stream_V_last_V_1_ack_out == 1'b1)) | ((out_stream_V_last_V_1_state == 2'd2) & (out_stream_V_last_V_1_vld_in == 1'b1)))) begin
            out_stream_V_last_V_1_state <= 2'd3;
        end else begin
            out_stream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_strb_V_1_ack_out == 1'b1) & (out_stream_V_strb_V_1_vld_out == 1'b1))) begin
            out_stream_V_strb_V_1_sel_rd <= ~out_stream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_strb_V_1_state == 2'd2) & (out_stream_V_strb_V_1_vld_in == 1'b0)) | ((out_stream_V_strb_V_1_state == 2'd3) & (out_stream_V_strb_V_1_vld_in == 1'b0) & (out_stream_V_strb_V_1_ack_out == 1'b1)))) begin
            out_stream_V_strb_V_1_state <= 2'd2;
        end else if ((((out_stream_V_strb_V_1_state == 2'd1) & (out_stream_V_strb_V_1_ack_out == 1'b0)) | ((out_stream_V_strb_V_1_state == 2'd3) & (out_stream_V_strb_V_1_ack_out == 1'b0) & (out_stream_V_strb_V_1_vld_in == 1'b1)))) begin
            out_stream_V_strb_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_strb_V_1_vld_in == 1'b0) & (out_stream_V_strb_V_1_ack_out == 1'b1)) & ~((out_stream_V_strb_V_1_ack_out == 1'b0) & (out_stream_V_strb_V_1_vld_in == 1'b1)) & (out_stream_V_strb_V_1_state == 2'd3)) | ((out_stream_V_strb_V_1_state == 2'd1) & (out_stream_V_strb_V_1_ack_out == 1'b1)) | ((out_stream_V_strb_V_1_state == 2'd2) & (out_stream_V_strb_V_1_vld_in == 1'b1)))) begin
            out_stream_V_strb_V_1_state <= 2'd3;
        end else begin
            out_stream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_user_V_1_ack_out == 1'b1) & (out_stream_V_user_V_1_vld_out == 1'b1))) begin
            out_stream_V_user_V_1_sel_rd <= ~out_stream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_user_V_1_state == 2'd2) & (out_stream_V_user_V_1_vld_in == 1'b0)) | ((out_stream_V_user_V_1_state == 2'd3) & (out_stream_V_user_V_1_vld_in == 1'b0) & (out_stream_V_user_V_1_ack_out == 1'b1)))) begin
            out_stream_V_user_V_1_state <= 2'd2;
        end else if ((((out_stream_V_user_V_1_state == 2'd1) & (out_stream_V_user_V_1_ack_out == 1'b0)) | ((out_stream_V_user_V_1_state == 2'd3) & (out_stream_V_user_V_1_ack_out == 1'b0) & (out_stream_V_user_V_1_vld_in == 1'b1)))) begin
            out_stream_V_user_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_user_V_1_vld_in == 1'b0) & (out_stream_V_user_V_1_ack_out == 1'b1)) & ~((out_stream_V_user_V_1_ack_out == 1'b0) & (out_stream_V_user_V_1_vld_in == 1'b1)) & (out_stream_V_user_V_1_state == 2'd3)) | ((out_stream_V_user_V_1_state == 2'd1) & (out_stream_V_user_V_1_ack_out == 1'b1)) | ((out_stream_V_user_V_1_state == 2'd2) & (out_stream_V_user_V_1_vld_in == 1'b1)))) begin
            out_stream_V_user_V_1_state <= 2'd3;
        end else begin
            out_stream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_fu_980_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_1_reg_818 <= i_4_fu_1005_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_818 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_2_reg_829 <= 8'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond4_fu_1337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        i_2_reg_829 <= i_5_fu_1343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_796 <= 8'd0;
    end else if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_796 <= i_3_fu_926_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_fu_980_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten_reg_807 <= indvar_flatten_next_fu_985_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_807 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_840 <= sum_pix_ch0_0_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_840 <= sum_pix_ch0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_845 <= sum_pix_ch0_1_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_845 <= sum_pix_ch0_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_850 <= sum_pix_ch0_2_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_850 <= sum_pix_ch0_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_855 <= sum_pix_ch0_3_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_855 <= sum_pix_ch0_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_860 <= sum_pix_ch0_4_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_860 <= sum_pix_ch0_4_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_865 <= sum_pix_ch0_5_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_865 <= sum_pix_ch0_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_870 <= sum_pix_ch0_6_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_870 <= sum_pix_ch0_6_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_875 <= sum_pix_ch0_7_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_875 <= sum_pix_ch0_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_880 <= sum_pix_ch0_8_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_880 <= sum_pix_ch0_8_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_885 <= sum_pix_ch0_9_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_885 <= sum_pix_ch0_9_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_890 <= sum_pix_ch0_10_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_890 <= sum_pix_ch0_10_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_895 <= sum_pix_ch0_11_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_895 <= sum_pix_ch0_11_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_900 <= sum_pix_ch0_12_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_900 <= sum_pix_ch0_12_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_905 <= sum_pix_ch0_13_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_905 <= sum_pix_ch0_13_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_910 <= sum_pix_ch0_14_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_910 <= sum_pix_ch0_14_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd1) & (exitcond4_reg_1905 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reg_915 <= sum_pix_ch0_15_q1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reg_915 <= sum_pix_ch0_15_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        N_ADDS_read_reg_1606 <= N_ADDS;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound_reg_1620[23 : 4] <= bound_fu_974_p2[23 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond4_reg_1905 <= exitcond4_fu_1337_p2;
        exitcond4_reg_1905_pp2_iter1_reg <= exitcond4_reg_1905;
        tmp_3_reg_1999_pp2_iter1_reg[11 : 4] <= tmp_3_reg_1999[11 : 4];
        tmp_last_V_reg_1914_pp2_iter1_reg <= tmp_last_V_reg_1914;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        exitcond4_reg_1905_pp2_iter2_reg <= exitcond4_reg_1905_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten_reg_1625 <= exitcond_flatten_fu_980_p2;
        exitcond_flatten_reg_1625_pp1_iter1_reg <= exitcond_flatten_reg_1625;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        exitcond_flatten_reg_1625_pp1_iter2_reg <= exitcond_flatten_reg_1625_pp1_iter1_reg;
        exitcond_flatten_reg_1625_pp1_iter3_reg <= exitcond_flatten_reg_1625_pp1_iter2_reg;
        phitmp_10_reg_1765_pp1_iter2_reg <= phitmp_10_reg_1765;
        phitmp_11_reg_1776_pp1_iter2_reg <= phitmp_11_reg_1776;
        phitmp_12_reg_1787_pp1_iter2_reg <= phitmp_12_reg_1787;
        phitmp_13_reg_1798_pp1_iter2_reg <= phitmp_13_reg_1798;
        phitmp_14_reg_1809_pp1_iter2_reg <= phitmp_14_reg_1809;
        phitmp_1_reg_1655_pp1_iter2_reg <= phitmp_1_reg_1655;
        phitmp_2_reg_1666_pp1_iter2_reg <= phitmp_2_reg_1666;
        phitmp_3_reg_1677_pp1_iter2_reg <= phitmp_3_reg_1677;
        phitmp_4_reg_1688_pp1_iter2_reg <= phitmp_4_reg_1688;
        phitmp_5_reg_1699_pp1_iter2_reg <= phitmp_5_reg_1699;
        phitmp_6_reg_1710_pp1_iter2_reg <= phitmp_6_reg_1710;
        phitmp_7_reg_1721_pp1_iter2_reg <= phitmp_7_reg_1721;
        phitmp_8_reg_1732_pp1_iter2_reg <= phitmp_8_reg_1732;
        phitmp_9_reg_1743_pp1_iter2_reg <= phitmp_9_reg_1743;
        phitmp_s_reg_1754_pp1_iter2_reg <= phitmp_s_reg_1754;
        sum_pix_ch0_0_addr_1_reg_1649_pp1_iter2_reg <= sum_pix_ch0_0_addr_1_reg_1649;
        sum_pix_ch0_0_addr_1_reg_1649_pp1_iter3_reg <= sum_pix_ch0_0_addr_1_reg_1649_pp1_iter2_reg;
        sum_pix_ch0_10_addr_1_reg_1759_pp1_iter2_reg <= sum_pix_ch0_10_addr_1_reg_1759;
        sum_pix_ch0_10_addr_1_reg_1759_pp1_iter3_reg <= sum_pix_ch0_10_addr_1_reg_1759_pp1_iter2_reg;
        sum_pix_ch0_11_addr_1_reg_1770_pp1_iter2_reg <= sum_pix_ch0_11_addr_1_reg_1770;
        sum_pix_ch0_11_addr_1_reg_1770_pp1_iter3_reg <= sum_pix_ch0_11_addr_1_reg_1770_pp1_iter2_reg;
        sum_pix_ch0_12_addr_1_reg_1781_pp1_iter2_reg <= sum_pix_ch0_12_addr_1_reg_1781;
        sum_pix_ch0_12_addr_1_reg_1781_pp1_iter3_reg <= sum_pix_ch0_12_addr_1_reg_1781_pp1_iter2_reg;
        sum_pix_ch0_13_addr_1_reg_1792_pp1_iter2_reg <= sum_pix_ch0_13_addr_1_reg_1792;
        sum_pix_ch0_13_addr_1_reg_1792_pp1_iter3_reg <= sum_pix_ch0_13_addr_1_reg_1792_pp1_iter2_reg;
        sum_pix_ch0_14_addr_1_reg_1803_pp1_iter2_reg <= sum_pix_ch0_14_addr_1_reg_1803;
        sum_pix_ch0_14_addr_1_reg_1803_pp1_iter3_reg <= sum_pix_ch0_14_addr_1_reg_1803_pp1_iter2_reg;
        sum_pix_ch0_15_addr_1_reg_1814_pp1_iter2_reg <= sum_pix_ch0_15_addr_1_reg_1814;
        sum_pix_ch0_15_addr_1_reg_1814_pp1_iter3_reg <= sum_pix_ch0_15_addr_1_reg_1814_pp1_iter2_reg;
        sum_pix_ch0_1_addr_1_reg_1660_pp1_iter2_reg <= sum_pix_ch0_1_addr_1_reg_1660;
        sum_pix_ch0_1_addr_1_reg_1660_pp1_iter3_reg <= sum_pix_ch0_1_addr_1_reg_1660_pp1_iter2_reg;
        sum_pix_ch0_2_addr_1_reg_1671_pp1_iter2_reg <= sum_pix_ch0_2_addr_1_reg_1671;
        sum_pix_ch0_2_addr_1_reg_1671_pp1_iter3_reg <= sum_pix_ch0_2_addr_1_reg_1671_pp1_iter2_reg;
        sum_pix_ch0_3_addr_1_reg_1682_pp1_iter2_reg <= sum_pix_ch0_3_addr_1_reg_1682;
        sum_pix_ch0_3_addr_1_reg_1682_pp1_iter3_reg <= sum_pix_ch0_3_addr_1_reg_1682_pp1_iter2_reg;
        sum_pix_ch0_4_addr_1_reg_1693_pp1_iter2_reg <= sum_pix_ch0_4_addr_1_reg_1693;
        sum_pix_ch0_4_addr_1_reg_1693_pp1_iter3_reg <= sum_pix_ch0_4_addr_1_reg_1693_pp1_iter2_reg;
        sum_pix_ch0_5_addr_1_reg_1704_pp1_iter2_reg <= sum_pix_ch0_5_addr_1_reg_1704;
        sum_pix_ch0_5_addr_1_reg_1704_pp1_iter3_reg <= sum_pix_ch0_5_addr_1_reg_1704_pp1_iter2_reg;
        sum_pix_ch0_6_addr_1_reg_1715_pp1_iter2_reg <= sum_pix_ch0_6_addr_1_reg_1715;
        sum_pix_ch0_6_addr_1_reg_1715_pp1_iter3_reg <= sum_pix_ch0_6_addr_1_reg_1715_pp1_iter2_reg;
        sum_pix_ch0_7_addr_1_reg_1726_pp1_iter2_reg <= sum_pix_ch0_7_addr_1_reg_1726;
        sum_pix_ch0_7_addr_1_reg_1726_pp1_iter3_reg <= sum_pix_ch0_7_addr_1_reg_1726_pp1_iter2_reg;
        sum_pix_ch0_8_addr_1_reg_1737_pp1_iter2_reg <= sum_pix_ch0_8_addr_1_reg_1737;
        sum_pix_ch0_8_addr_1_reg_1737_pp1_iter3_reg <= sum_pix_ch0_8_addr_1_reg_1737_pp1_iter2_reg;
        sum_pix_ch0_9_addr_1_reg_1748_pp1_iter2_reg <= sum_pix_ch0_9_addr_1_reg_1748;
        sum_pix_ch0_9_addr_1_reg_1748_pp1_iter3_reg <= sum_pix_ch0_9_addr_1_reg_1748_pp1_iter2_reg;
        tmp_12_reg_1644_pp1_iter2_reg <= tmp_12_reg_1644;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_fu_980_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_mid2_reg_1634 <= i_1_mid2_fu_997_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream0_V_data_V_0_load_A == 1'b1)) begin
        in_stream0_V_data_V_0_payload_A <= in_stream0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream0_V_data_V_0_load_B == 1'b1)) begin
        in_stream0_V_data_V_0_payload_B <= in_stream0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_data_V_1_load_A == 1'b1)) begin
        out_stream_V_data_V_1_payload_A <= tmp_data_V_1_fu_1593_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_data_V_1_load_B == 1'b1)) begin
        out_stream_V_data_V_1_payload_B <= tmp_data_V_1_fu_1593_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_last_V_1_load_A == 1'b1)) begin
        out_stream_V_last_V_1_payload_A <= tmp_last_V_reg_1914_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_last_V_1_load_B == 1'b1)) begin
        out_stream_V_last_V_1_payload_B <= tmp_last_V_reg_1914_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        phitmp_10_reg_1765 <= {{in_stream0_V_data_V_0_data_out[95:88]}};
        phitmp_11_reg_1776 <= {{in_stream0_V_data_V_0_data_out[103:96]}};
        phitmp_12_reg_1787 <= {{in_stream0_V_data_V_0_data_out[111:104]}};
        phitmp_13_reg_1798 <= {{in_stream0_V_data_V_0_data_out[119:112]}};
        phitmp_14_reg_1809 <= {{in_stream0_V_data_V_0_data_out[127:120]}};
        phitmp_1_reg_1655 <= {{in_stream0_V_data_V_0_data_out[15:8]}};
        phitmp_2_reg_1666 <= {{in_stream0_V_data_V_0_data_out[23:16]}};
        phitmp_3_reg_1677 <= {{in_stream0_V_data_V_0_data_out[31:24]}};
        phitmp_4_reg_1688 <= {{in_stream0_V_data_V_0_data_out[39:32]}};
        phitmp_5_reg_1699 <= {{in_stream0_V_data_V_0_data_out[47:40]}};
        phitmp_6_reg_1710 <= {{in_stream0_V_data_V_0_data_out[55:48]}};
        phitmp_7_reg_1721 <= {{in_stream0_V_data_V_0_data_out[63:56]}};
        phitmp_8_reg_1732 <= {{in_stream0_V_data_V_0_data_out[71:64]}};
        phitmp_9_reg_1743 <= {{in_stream0_V_data_V_0_data_out[79:72]}};
        phitmp_s_reg_1754 <= {{in_stream0_V_data_V_0_data_out[87:80]}};
        sum_pix_ch0_0_addr_1_reg_1649 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_10_addr_1_reg_1759 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_11_addr_1_reg_1770 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_12_addr_1_reg_1781 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_13_addr_1_reg_1792 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_14_addr_1_reg_1803 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_15_addr_1_reg_1814 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_1_addr_1_reg_1660 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_2_addr_1_reg_1671 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_3_addr_1_reg_1682 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_4_addr_1_reg_1693 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_5_addr_1_reg_1704 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_6_addr_1_reg_1715 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_7_addr_1_reg_1726 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_8_addr_1_reg_1737 <= tmp_8_fu_1011_p1;
        sum_pix_ch0_9_addr_1_reg_1748 <= tmp_8_fu_1011_p1;
        tmp_12_reg_1644 <= tmp_12_fu_1034_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter2_reg == 1'd0))) begin
        tmp_29_10_reg_1875 <= tmp_29_10_fu_1290_p2;
        tmp_29_11_reg_1880 <= tmp_29_11_fu_1299_p2;
        tmp_29_12_reg_1885 <= tmp_29_12_fu_1308_p2;
        tmp_29_13_reg_1890 <= tmp_29_13_fu_1317_p2;
        tmp_29_14_reg_1895 <= tmp_29_14_fu_1326_p2;
        tmp_29_1_reg_1825 <= tmp_29_1_fu_1200_p2;
        tmp_29_2_reg_1830 <= tmp_29_2_fu_1209_p2;
        tmp_29_3_reg_1835 <= tmp_29_3_fu_1218_p2;
        tmp_29_4_reg_1840 <= tmp_29_4_fu_1227_p2;
        tmp_29_5_reg_1845 <= tmp_29_5_fu_1236_p2;
        tmp_29_6_reg_1850 <= tmp_29_6_fu_1245_p2;
        tmp_29_7_reg_1855 <= tmp_29_7_fu_1254_p2;
        tmp_29_8_reg_1860 <= tmp_29_8_fu_1263_p2;
        tmp_29_9_reg_1865 <= tmp_29_9_fu_1272_p2;
        tmp_29_s_reg_1870 <= tmp_29_s_fu_1281_p2;
        tmp_9_reg_1820 <= tmp_9_fu_1191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_2_reg_1900 <= tmp_2_fu_1332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (tmp_2_reg_1900 == 1'd0) & (exitcond4_fu_1337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_3_reg_1999[11 : 4] <= tmp_3_fu_1375_p3[11 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond4_fu_1337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_last_V_reg_1914 <= tmp_last_V_fu_1349_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_980_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond4_fu_1337_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_V_dest_V_1_ack_in == 1'b0) | (out_stream_V_id_V_1_ack_in == 1'b0) | (out_stream_V_last_V_1_ack_in == 1'b0) | (out_stream_V_user_V_1_ack_in == 1'b0) | (out_stream_V_strb_V_1_ack_in == 1'b0) | (out_stream_V_keep_V_1_ack_in == 1'b0) | (out_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_V_dest_V_1_ack_in == 1'b0) | (out_stream_V_id_V_1_ack_in == 1'b0) | (out_stream_V_last_V_1_ack_in == 1'b0) | (out_stream_V_user_V_1_ack_in == 1'b0) | (out_stream_V_strb_V_1_ack_in == 1'b0) | (out_stream_V_keep_V_1_ack_in == 1'b0) | (out_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond_flatten_reg_1625 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in_stream0_TDATA_blk_n = in_stream0_V_data_V_0_state[1'd0];
    end else begin
        in_stream0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in_stream0_V_data_V_0_ack_out = 1'b1;
    end else begin
        in_stream0_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream0_V_data_V_0_sel == 1'b1)) begin
        in_stream0_V_data_V_0_data_out = in_stream0_V_data_V_0_payload_B;
    end else begin
        in_stream0_V_data_V_0_data_out = in_stream0_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in_stream0_V_dest_V_0_ack_out = 1'b1;
    end else begin
        in_stream0_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0) & (exitcond4_reg_1905_pp2_iter2_reg == 1'd0) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (exitcond4_reg_1905_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        out_stream_TDATA_blk_n = out_stream_V_data_V_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_stream_V_data_V_1_sel == 1'b1)) begin
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_B;
    end else begin
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond4_reg_1905_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        out_stream_V_data_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond4_reg_1905_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        out_stream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond4_reg_1905_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        out_stream_V_id_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond4_reg_1905_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        out_stream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_V_last_V_1_sel == 1'b1)) begin
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_B;
    end else begin
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond4_reg_1905_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        out_stream_V_last_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond4_reg_1905_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        out_stream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond4_reg_1905_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        out_stream_V_user_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_0_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_0_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_0_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_0_address1 = sum_pix_ch0_0_addr_1_reg_1649_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_0_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_0_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_0_we0 = 1'b1;
    end else begin
        sum_pix_ch0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_0_we1 = 1'b1;
    end else begin
        sum_pix_ch0_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_10_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_10_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_10_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_10_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_10_address1 = sum_pix_ch0_10_addr_1_reg_1759_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_10_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_10_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_10_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_10_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_10_we0 = 1'b1;
    end else begin
        sum_pix_ch0_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_10_we1 = 1'b1;
    end else begin
        sum_pix_ch0_10_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_11_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_11_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_11_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_11_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_11_address1 = sum_pix_ch0_11_addr_1_reg_1770_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_11_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_11_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_11_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_11_we0 = 1'b1;
    end else begin
        sum_pix_ch0_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_11_we1 = 1'b1;
    end else begin
        sum_pix_ch0_11_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_12_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_12_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_12_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_12_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_12_address1 = sum_pix_ch0_12_addr_1_reg_1781_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_12_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_12_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_12_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_12_we0 = 1'b1;
    end else begin
        sum_pix_ch0_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_12_we1 = 1'b1;
    end else begin
        sum_pix_ch0_12_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_13_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_13_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_13_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_13_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_13_address1 = sum_pix_ch0_13_addr_1_reg_1792_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_13_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_13_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_13_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_13_we0 = 1'b1;
    end else begin
        sum_pix_ch0_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_13_we1 = 1'b1;
    end else begin
        sum_pix_ch0_13_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_14_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_14_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_14_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_14_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_14_address1 = sum_pix_ch0_14_addr_1_reg_1803_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_14_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_14_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_14_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_14_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_14_we0 = 1'b1;
    end else begin
        sum_pix_ch0_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_14_we1 = 1'b1;
    end else begin
        sum_pix_ch0_14_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_15_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_15_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_15_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_15_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_15_address1 = sum_pix_ch0_15_addr_1_reg_1814_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_15_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_15_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_15_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_15_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_15_we0 = 1'b1;
    end else begin
        sum_pix_ch0_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_15_we1 = 1'b1;
    end else begin
        sum_pix_ch0_15_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_1_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_1_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_1_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_1_address1 = sum_pix_ch0_1_addr_1_reg_1660_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_1_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_1_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_1_we0 = 1'b1;
    end else begin
        sum_pix_ch0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_1_we1 = 1'b1;
    end else begin
        sum_pix_ch0_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_2_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_2_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_2_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_2_address1 = sum_pix_ch0_2_addr_1_reg_1671_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_2_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_2_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_2_we0 = 1'b1;
    end else begin
        sum_pix_ch0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_2_we1 = 1'b1;
    end else begin
        sum_pix_ch0_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_3_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_3_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_3_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_3_address1 = sum_pix_ch0_3_addr_1_reg_1682_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_3_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_3_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_3_we0 = 1'b1;
    end else begin
        sum_pix_ch0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_3_we1 = 1'b1;
    end else begin
        sum_pix_ch0_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_4_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_4_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_4_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_4_address1 = sum_pix_ch0_4_addr_1_reg_1693_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_4_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_4_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_4_we0 = 1'b1;
    end else begin
        sum_pix_ch0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_4_we1 = 1'b1;
    end else begin
        sum_pix_ch0_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_5_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_5_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_5_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_5_address1 = sum_pix_ch0_5_addr_1_reg_1704_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_5_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_5_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_5_we0 = 1'b1;
    end else begin
        sum_pix_ch0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_5_we1 = 1'b1;
    end else begin
        sum_pix_ch0_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_6_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_6_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_6_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_6_address1 = sum_pix_ch0_6_addr_1_reg_1715_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_6_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_6_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_6_we0 = 1'b1;
    end else begin
        sum_pix_ch0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_6_we1 = 1'b1;
    end else begin
        sum_pix_ch0_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_7_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_7_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_7_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_7_address1 = sum_pix_ch0_7_addr_1_reg_1726_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_7_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_7_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_7_we0 = 1'b1;
    end else begin
        sum_pix_ch0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_7_we1 = 1'b1;
    end else begin
        sum_pix_ch0_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_8_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_8_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_8_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_8_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_8_address1 = sum_pix_ch0_8_addr_1_reg_1737_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_8_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_8_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_8_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_8_we0 = 1'b1;
    end else begin
        sum_pix_ch0_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_8_we1 = 1'b1;
    end else begin
        sum_pix_ch0_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix_ch0_9_address0 = tmp_8_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix_ch0_9_address0 = tmp_1_fu_932_p1;
    end else begin
        sum_pix_ch0_9_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix_ch0_9_address1 = tmp_s_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_9_address1 = sum_pix_ch0_9_addr_1_reg_1748_pp1_iter3_reg;
    end else begin
        sum_pix_ch0_9_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix_ch0_9_ce0 = 1'b1;
    end else begin
        sum_pix_ch0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        sum_pix_ch0_9_ce1 = 1'b1;
    end else begin
        sum_pix_ch0_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix_ch0_9_we0 = 1'b1;
    end else begin
        sum_pix_ch0_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1625_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        sum_pix_ch0_9_we1 = 1'b1;
    end else begin
        sum_pix_ch0_9_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond_flatten_fu_980_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond_flatten_fu_980_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (exitcond4_fu_1337_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (exitcond4_fu_1337_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((out_stream_V_dest_V_1_ack_in == 1'b0) | (out_stream_V_id_V_1_ack_in == 1'b0) | (out_stream_V_last_V_1_ack_in == 1'b0) | (out_stream_V_user_V_1_ack_in == 1'b0) | (out_stream_V_strb_V_1_ack_in == 1'b0) | (out_stream_V_keep_V_1_ack_in == 1'b0) | (out_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((exitcond_flatten_reg_1625 == 1'd0) & (in_stream0_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((exitcond_flatten_reg_1625 == 1'd0) & (in_stream0_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp2_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp2_iter2 == 1'b1)));
end

assign ap_block_state10_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((exitcond4_reg_1905_pp2_iter1_reg == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state12_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((exitcond4_reg_1905_pp2_iter2_reg == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state13_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14 = ((out_stream_V_dest_V_1_ack_in == 1'b0) | (out_stream_V_id_V_1_ack_in == 1'b0) | (out_stream_V_last_V_1_ack_in == 1'b0) | (out_stream_V_user_V_1_ack_in == 1'b0) | (out_stream_V_strb_V_1_ack_in == 1'b0) | (out_stream_V_keep_V_1_ack_in == 1'b0) | (out_stream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp1_stage0_iter1 = ((exitcond_flatten_reg_1625 == 1'd0) & (in_stream0_V_data_V_0_vld_out == 1'b0));
end

assign ap_block_state6_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_974_p2 = (p_shl_fu_959_p1 + p_shl2_fu_970_p1);

assign exitcond1_fu_920_p2 = ((i_reg_796 == 8'd144) ? 1'b1 : 1'b0);

assign exitcond4_fu_1337_p2 = ((i_2_reg_829 == 8'd144) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_980_p2 = ((indvar_flatten_reg_807 == bound_reg_1620) ? 1'b1 : 1'b0);

assign exitcond_fu_991_p2 = ((i_1_reg_818 == 8'd144) ? 1'b1 : 1'b0);

assign i_1_mid2_fu_997_p3 = ((exitcond_fu_991_p2[0:0] === 1'b1) ? 8'd0 : i_1_reg_818);

assign i_3_fu_926_p2 = (i_reg_796 + 8'd1);

assign i_4_fu_1005_p2 = (8'd1 + i_1_mid2_fu_997_p3);

assign i_5_fu_1343_p2 = (i_2_reg_829 + 8'd1);

assign in_stream0_TREADY = in_stream0_V_dest_V_0_state[1'd1];

assign in_stream0_V_data_V_0_ack_in = in_stream0_V_data_V_0_state[1'd1];

assign in_stream0_V_data_V_0_load_A = (in_stream0_V_data_V_0_state_cmp_full & ~in_stream0_V_data_V_0_sel_wr);

assign in_stream0_V_data_V_0_load_B = (in_stream0_V_data_V_0_state_cmp_full & in_stream0_V_data_V_0_sel_wr);

assign in_stream0_V_data_V_0_sel = in_stream0_V_data_V_0_sel_rd;

assign in_stream0_V_data_V_0_state_cmp_full = ((in_stream0_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream0_V_data_V_0_vld_in = in_stream0_TVALID;

assign in_stream0_V_data_V_0_vld_out = in_stream0_V_data_V_0_state[1'd0];

assign in_stream0_V_dest_V_0_vld_in = in_stream0_TVALID;

assign indvar_flatten_next_fu_985_p2 = (indvar_flatten_reg_807 + 24'd1);

assign out_stream_TDATA = out_stream_V_data_V_1_data_out;

assign out_stream_TDEST = out_stream_V_dest_V_1_data_out;

assign out_stream_TID = out_stream_V_id_V_1_data_out;

assign out_stream_TKEEP = out_stream_V_keep_V_1_data_out;

assign out_stream_TLAST = out_stream_V_last_V_1_data_out;

assign out_stream_TSTRB = out_stream_V_strb_V_1_data_out;

assign out_stream_TUSER = out_stream_V_user_V_1_data_out;

assign out_stream_TVALID = out_stream_V_dest_V_1_state[1'd0];

assign out_stream_V_data_V_1_ack_in = out_stream_V_data_V_1_state[1'd1];

assign out_stream_V_data_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_data_V_1_load_A = (out_stream_V_data_V_1_state_cmp_full & ~out_stream_V_data_V_1_sel_wr);

assign out_stream_V_data_V_1_load_B = (out_stream_V_data_V_1_state_cmp_full & out_stream_V_data_V_1_sel_wr);

assign out_stream_V_data_V_1_sel = out_stream_V_data_V_1_sel_rd;

assign out_stream_V_data_V_1_state_cmp_full = ((out_stream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_data_V_1_vld_out = out_stream_V_data_V_1_state[1'd0];

assign out_stream_V_dest_V_1_ack_in = out_stream_V_dest_V_1_state[1'd1];

assign out_stream_V_dest_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_dest_V_1_data_out = 6'd0;

assign out_stream_V_dest_V_1_sel = out_stream_V_dest_V_1_sel_rd;

assign out_stream_V_dest_V_1_vld_out = out_stream_V_dest_V_1_state[1'd0];

assign out_stream_V_id_V_1_ack_in = out_stream_V_id_V_1_state[1'd1];

assign out_stream_V_id_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_id_V_1_data_out = 5'd0;

assign out_stream_V_id_V_1_sel = out_stream_V_id_V_1_sel_rd;

assign out_stream_V_id_V_1_vld_out = out_stream_V_id_V_1_state[1'd0];

assign out_stream_V_keep_V_1_ack_in = out_stream_V_keep_V_1_state[1'd1];

assign out_stream_V_keep_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_keep_V_1_data_out = 64'd18446744073709551615;

assign out_stream_V_keep_V_1_sel = out_stream_V_keep_V_1_sel_rd;

assign out_stream_V_keep_V_1_vld_out = out_stream_V_keep_V_1_state[1'd0];

assign out_stream_V_last_V_1_ack_in = out_stream_V_last_V_1_state[1'd1];

assign out_stream_V_last_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_last_V_1_load_A = (out_stream_V_last_V_1_state_cmp_full & ~out_stream_V_last_V_1_sel_wr);

assign out_stream_V_last_V_1_load_B = (out_stream_V_last_V_1_state_cmp_full & out_stream_V_last_V_1_sel_wr);

assign out_stream_V_last_V_1_sel = out_stream_V_last_V_1_sel_rd;

assign out_stream_V_last_V_1_state_cmp_full = ((out_stream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_last_V_1_vld_out = out_stream_V_last_V_1_state[1'd0];

assign out_stream_V_strb_V_1_ack_in = out_stream_V_strb_V_1_state[1'd1];

assign out_stream_V_strb_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_strb_V_1_data_out = 64'd18446744073709551615;

assign out_stream_V_strb_V_1_sel = out_stream_V_strb_V_1_sel_rd;

assign out_stream_V_strb_V_1_vld_out = out_stream_V_strb_V_1_state[1'd0];

assign out_stream_V_user_V_1_ack_in = out_stream_V_user_V_1_state[1'd1];

assign out_stream_V_user_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_user_V_1_data_out = 6'd0;

assign out_stream_V_user_V_1_sel = out_stream_V_user_V_1_sel_rd;

assign out_stream_V_user_V_1_vld_out = out_stream_V_user_V_1_state[1'd0];

assign p_shl2_fu_970_p1 = tmp_11_fu_963_p3;

assign p_shl_fu_959_p1 = tmp_10_fu_952_p3;

assign sum_pix_tot_data_V_1_fu_1589_p1 = tmp_fu_1553_p17;

assign sum_pix_tot_data_V_s_fu_1383_p17 = {{{{{{{{{{{{{{{{reg_915}, {reg_910}}, {reg_905}}, {reg_900}}, {reg_895}}, {reg_890}}, {reg_885}}, {reg_880}}, {reg_875}}, {reg_870}}, {reg_865}}, {reg_860}}, {reg_855}}, {reg_850}}, {reg_845}}, {reg_840}};

assign tmp_10_fu_952_p3 = {{N_ADDS_read_reg_1606}, {7'd0}};

assign tmp_11_fu_963_p3 = {{N_ADDS_read_reg_1606}, {4'd0}};

assign tmp_12_fu_1034_p1 = in_stream0_V_data_V_0_data_out[7:0];

assign tmp_1_fu_932_p1 = i_reg_796;

assign tmp_28_10_fu_1287_p1 = phitmp_10_reg_1765_pp1_iter2_reg;

assign tmp_28_11_fu_1296_p1 = phitmp_11_reg_1776_pp1_iter2_reg;

assign tmp_28_12_fu_1305_p1 = phitmp_12_reg_1787_pp1_iter2_reg;

assign tmp_28_13_fu_1314_p1 = phitmp_13_reg_1798_pp1_iter2_reg;

assign tmp_28_14_fu_1323_p1 = phitmp_14_reg_1809_pp1_iter2_reg;

assign tmp_28_1_fu_1197_p1 = phitmp_1_reg_1655_pp1_iter2_reg;

assign tmp_28_2_fu_1206_p1 = phitmp_2_reg_1666_pp1_iter2_reg;

assign tmp_28_3_fu_1215_p1 = phitmp_3_reg_1677_pp1_iter2_reg;

assign tmp_28_4_fu_1224_p1 = phitmp_4_reg_1688_pp1_iter2_reg;

assign tmp_28_5_fu_1233_p1 = phitmp_5_reg_1699_pp1_iter2_reg;

assign tmp_28_6_fu_1242_p1 = phitmp_6_reg_1710_pp1_iter2_reg;

assign tmp_28_7_fu_1251_p1 = phitmp_7_reg_1721_pp1_iter2_reg;

assign tmp_28_8_fu_1260_p1 = phitmp_8_reg_1732_pp1_iter2_reg;

assign tmp_28_9_fu_1269_p1 = phitmp_9_reg_1743_pp1_iter2_reg;

assign tmp_28_s_fu_1278_p1 = phitmp_s_reg_1754_pp1_iter2_reg;

assign tmp_29_10_fu_1290_p2 = (reg_895 + tmp_28_10_fu_1287_p1);

assign tmp_29_11_fu_1299_p2 = (reg_900 + tmp_28_11_fu_1296_p1);

assign tmp_29_12_fu_1308_p2 = (reg_905 + tmp_28_12_fu_1305_p1);

assign tmp_29_13_fu_1317_p2 = (reg_910 + tmp_28_13_fu_1314_p1);

assign tmp_29_14_fu_1326_p2 = (reg_915 + tmp_28_14_fu_1323_p1);

assign tmp_29_1_fu_1200_p2 = (reg_845 + tmp_28_1_fu_1197_p1);

assign tmp_29_2_fu_1209_p2 = (reg_850 + tmp_28_2_fu_1206_p1);

assign tmp_29_3_fu_1218_p2 = (reg_855 + tmp_28_3_fu_1215_p1);

assign tmp_29_4_fu_1227_p2 = (reg_860 + tmp_28_4_fu_1224_p1);

assign tmp_29_5_fu_1236_p2 = (reg_865 + tmp_28_5_fu_1233_p1);

assign tmp_29_6_fu_1245_p2 = (reg_870 + tmp_28_6_fu_1242_p1);

assign tmp_29_7_fu_1254_p2 = (reg_875 + tmp_28_7_fu_1251_p1);

assign tmp_29_8_fu_1263_p2 = (reg_880 + tmp_28_8_fu_1260_p1);

assign tmp_29_9_fu_1272_p2 = (reg_885 + tmp_28_9_fu_1269_p1);

assign tmp_29_s_fu_1281_p2 = (reg_890 + tmp_28_s_fu_1278_p1);

assign tmp_2_fu_1332_p2 = ((TEST_MODE == 32'd0) ? 1'b1 : 1'b0);

assign tmp_3_cast_fu_1419_p1 = tmp_3_reg_1999_pp2_iter1_reg;

assign tmp_3_fu_1375_p3 = {{i_2_reg_829}, {4'd0}};

assign tmp_6_fu_1188_p1 = tmp_12_reg_1644_pp1_iter2_reg;

assign tmp_8_fu_1011_p1 = i_1_mid2_reg_1634;

assign tmp_9_fu_1191_p2 = (reg_840 + tmp_6_fu_1188_p1);

assign tmp_data_V_1_fu_1593_p3 = ((tmp_2_reg_1900[0:0] === 1'b1) ? sum_pix_tot_data_V_s_fu_1383_p17 : sum_pix_tot_data_V_1_fu_1589_p1);

assign tmp_fu_1553_p17 = {{{{{{{{{{{{{{{{val_assign_1_14_fu_1548_p2}, {val_assign_1_13_cast_fu_1544_p1}}, {val_assign_1_12_cast_fu_1535_p1}}, {val_assign_1_11_cast_fu_1526_p1}}, {val_assign_1_10_cast_fu_1517_p1}}, {val_assign_1_9_cast_fu_1508_p1}}, {val_assign_1_8_cast_fu_1499_p1}}, {val_assign_1_7_cast_fu_1490_p1}}, {val_assign_1_6_cast_fu_1481_p1}}, {val_assign_1_5_cast_fu_1472_p1}}, {val_assign_1_4_cast_fu_1463_p1}}, {val_assign_1_3_cast_fu_1454_p1}}, {val_assign_1_2_cast_fu_1445_p1}}, {val_assign_1_1_cast_fu_1436_p1}}, {val_assign_1_cast_fu_1427_p1}}, {tmp_3_cast_fu_1419_p1}};

assign tmp_last_V_fu_1349_p2 = ((i_2_reg_829 == 8'd143) ? 1'b1 : 1'b0);

assign tmp_s_fu_1355_p1 = i_2_reg_829;

assign val_assign_1_10_cast_fu_1517_p1 = val_assign_1_10_fu_1512_p2;

assign val_assign_1_10_fu_1512_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd11);

assign val_assign_1_11_cast_fu_1526_p1 = val_assign_1_11_fu_1521_p2;

assign val_assign_1_11_fu_1521_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd12);

assign val_assign_1_12_cast_fu_1535_p1 = val_assign_1_12_fu_1530_p2;

assign val_assign_1_12_fu_1530_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd13);

assign val_assign_1_13_cast_fu_1544_p1 = val_assign_1_13_fu_1539_p2;

assign val_assign_1_13_fu_1539_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd14);

assign val_assign_1_14_fu_1548_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd15);

assign val_assign_1_1_cast_fu_1436_p1 = val_assign_1_1_fu_1431_p2;

assign val_assign_1_1_fu_1431_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd2);

assign val_assign_1_2_cast_fu_1445_p1 = val_assign_1_2_fu_1440_p2;

assign val_assign_1_2_fu_1440_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd3);

assign val_assign_1_3_cast_fu_1454_p1 = val_assign_1_3_fu_1449_p2;

assign val_assign_1_3_fu_1449_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd4);

assign val_assign_1_4_cast_fu_1463_p1 = val_assign_1_4_fu_1458_p2;

assign val_assign_1_4_fu_1458_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd5);

assign val_assign_1_5_cast_fu_1472_p1 = val_assign_1_5_fu_1467_p2;

assign val_assign_1_5_fu_1467_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd6);

assign val_assign_1_6_cast_fu_1481_p1 = val_assign_1_6_fu_1476_p2;

assign val_assign_1_6_fu_1476_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd7);

assign val_assign_1_7_cast_fu_1490_p1 = val_assign_1_7_fu_1485_p2;

assign val_assign_1_7_fu_1485_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd8);

assign val_assign_1_8_cast_fu_1499_p1 = val_assign_1_8_fu_1494_p2;

assign val_assign_1_8_fu_1494_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd9);

assign val_assign_1_9_cast_fu_1508_p1 = val_assign_1_9_fu_1503_p2;

assign val_assign_1_9_fu_1503_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd10);

assign val_assign_1_cast_fu_1427_p1 = val_assign_1_s_fu_1422_p2;

assign val_assign_1_s_fu_1422_p2 = (tmp_3_reg_1999_pp2_iter1_reg | 12'd1);

always @ (posedge ap_clk) begin
    bound_reg_1620[3:0] <= 4'b0000;
    tmp_3_reg_1999[3:0] <= 4'b0000;
    tmp_3_reg_1999_pp2_iter1_reg[3:0] <= 4'b0000;
end

endmodule //scurve_adder36
