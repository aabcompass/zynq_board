// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="scurve_adder,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z035ffg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.787000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=457,HLS_SYN_LUT=972}" *)

module scurve_adder (
        ap_clk,
        ap_rst_n,
        in_stream0_TDATA,
        in_stream0_TVALID,
        in_stream0_TREADY,
        in_stream0_TKEEP,
        in_stream0_TSTRB,
        in_stream0_TUSER,
        in_stream0_TLAST,
        in_stream0_TID,
        in_stream0_TDEST,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TKEEP,
        out_stream_TSTRB,
        out_stream_TUSER,
        out_stream_TLAST,
        out_stream_TID,
        out_stream_TDEST,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_pp1_stage0 = 8'd8;
parameter    ap_ST_fsm_state6 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_pp2_stage0 = 8'd64;
parameter    ap_ST_fsm_state11 = 8'd128;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [15:0] in_stream0_TDATA;
input   in_stream0_TVALID;
output   in_stream0_TREADY;
input  [1:0] in_stream0_TKEEP;
input  [1:0] in_stream0_TSTRB;
input  [1:0] in_stream0_TUSER;
input  [0:0] in_stream0_TLAST;
input  [4:0] in_stream0_TID;
input  [5:0] in_stream0_TDEST;
output  [63:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output  [7:0] out_stream_TKEEP;
output  [7:0] out_stream_TSTRB;
output  [1:0] out_stream_TUSER;
output  [0:0] out_stream_TLAST;
output  [4:0] out_stream_TID;
output  [5:0] out_stream_TDEST;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [15:0] in_stream0_V_data_V_0_data_out;
wire    in_stream0_V_data_V_0_vld_in;
wire    in_stream0_V_data_V_0_vld_out;
wire    in_stream0_V_data_V_0_ack_in;
reg    in_stream0_V_data_V_0_ack_out;
reg   [15:0] in_stream0_V_data_V_0_payload_A;
reg   [15:0] in_stream0_V_data_V_0_payload_B;
reg    in_stream0_V_data_V_0_sel_rd;
reg    in_stream0_V_data_V_0_sel_wr;
wire    in_stream0_V_data_V_0_sel;
wire    in_stream0_V_data_V_0_load_A;
wire    in_stream0_V_data_V_0_load_B;
reg   [1:0] in_stream0_V_data_V_0_state;
wire    in_stream0_V_data_V_0_state_cmp_full;
reg   [1:0] in_stream0_V_user_V_0_data_out;
wire    in_stream0_V_user_V_0_vld_in;
wire    in_stream0_V_user_V_0_vld_out;
wire    in_stream0_V_user_V_0_ack_in;
reg    in_stream0_V_user_V_0_ack_out;
reg   [1:0] in_stream0_V_user_V_0_payload_A;
reg   [1:0] in_stream0_V_user_V_0_payload_B;
reg    in_stream0_V_user_V_0_sel_rd;
reg    in_stream0_V_user_V_0_sel_wr;
wire    in_stream0_V_user_V_0_sel;
wire    in_stream0_V_user_V_0_load_A;
wire    in_stream0_V_user_V_0_load_B;
reg   [1:0] in_stream0_V_user_V_0_state;
wire    in_stream0_V_user_V_0_state_cmp_full;
reg   [4:0] in_stream0_V_id_V_0_data_out;
wire    in_stream0_V_id_V_0_vld_in;
wire    in_stream0_V_id_V_0_vld_out;
wire    in_stream0_V_id_V_0_ack_in;
reg    in_stream0_V_id_V_0_ack_out;
reg   [4:0] in_stream0_V_id_V_0_payload_A;
reg   [4:0] in_stream0_V_id_V_0_payload_B;
reg    in_stream0_V_id_V_0_sel_rd;
reg    in_stream0_V_id_V_0_sel_wr;
wire    in_stream0_V_id_V_0_sel;
wire    in_stream0_V_id_V_0_load_A;
wire    in_stream0_V_id_V_0_load_B;
reg   [1:0] in_stream0_V_id_V_0_state;
wire    in_stream0_V_id_V_0_state_cmp_full;
reg   [5:0] in_stream0_V_dest_V_0_data_out;
wire    in_stream0_V_dest_V_0_vld_in;
wire    in_stream0_V_dest_V_0_vld_out;
wire    in_stream0_V_dest_V_0_ack_in;
reg    in_stream0_V_dest_V_0_ack_out;
reg   [5:0] in_stream0_V_dest_V_0_payload_A;
reg   [5:0] in_stream0_V_dest_V_0_payload_B;
reg    in_stream0_V_dest_V_0_sel_rd;
reg    in_stream0_V_dest_V_0_sel_wr;
wire    in_stream0_V_dest_V_0_sel;
wire    in_stream0_V_dest_V_0_load_A;
wire    in_stream0_V_dest_V_0_load_B;
reg   [1:0] in_stream0_V_dest_V_0_state;
wire    in_stream0_V_dest_V_0_state_cmp_full;
reg   [63:0] out_stream_V_data_V_1_data_out;
reg    out_stream_V_data_V_1_vld_in;
wire    out_stream_V_data_V_1_vld_out;
wire    out_stream_V_data_V_1_ack_in;
wire    out_stream_V_data_V_1_ack_out;
reg   [63:0] out_stream_V_data_V_1_payload_A;
reg   [63:0] out_stream_V_data_V_1_payload_B;
reg    out_stream_V_data_V_1_sel_rd;
reg    out_stream_V_data_V_1_sel_wr;
wire    out_stream_V_data_V_1_sel;
wire    out_stream_V_data_V_1_load_A;
wire    out_stream_V_data_V_1_load_B;
reg   [1:0] out_stream_V_data_V_1_state;
wire    out_stream_V_data_V_1_state_cmp_full;
wire   [7:0] out_stream_V_keep_V_1_data_out;
reg    out_stream_V_keep_V_1_vld_in;
wire    out_stream_V_keep_V_1_vld_out;
wire    out_stream_V_keep_V_1_ack_in;
wire    out_stream_V_keep_V_1_ack_out;
reg    out_stream_V_keep_V_1_sel_rd;
wire    out_stream_V_keep_V_1_sel;
reg   [1:0] out_stream_V_keep_V_1_state;
wire   [7:0] out_stream_V_strb_V_1_data_out;
reg    out_stream_V_strb_V_1_vld_in;
wire    out_stream_V_strb_V_1_vld_out;
wire    out_stream_V_strb_V_1_ack_in;
wire    out_stream_V_strb_V_1_ack_out;
reg    out_stream_V_strb_V_1_sel_rd;
wire    out_stream_V_strb_V_1_sel;
reg   [1:0] out_stream_V_strb_V_1_state;
reg   [1:0] out_stream_V_user_V_1_data_out;
reg    out_stream_V_user_V_1_vld_in;
wire    out_stream_V_user_V_1_vld_out;
wire    out_stream_V_user_V_1_ack_in;
wire    out_stream_V_user_V_1_ack_out;
reg   [1:0] out_stream_V_user_V_1_payload_A;
reg   [1:0] out_stream_V_user_V_1_payload_B;
reg    out_stream_V_user_V_1_sel_rd;
reg    out_stream_V_user_V_1_sel_wr;
wire    out_stream_V_user_V_1_sel;
wire    out_stream_V_user_V_1_load_A;
wire    out_stream_V_user_V_1_load_B;
reg   [1:0] out_stream_V_user_V_1_state;
wire    out_stream_V_user_V_1_state_cmp_full;
reg   [0:0] out_stream_V_last_V_1_data_out;
reg    out_stream_V_last_V_1_vld_in;
wire    out_stream_V_last_V_1_vld_out;
wire    out_stream_V_last_V_1_ack_in;
wire    out_stream_V_last_V_1_ack_out;
reg   [0:0] out_stream_V_last_V_1_payload_A;
reg   [0:0] out_stream_V_last_V_1_payload_B;
reg    out_stream_V_last_V_1_sel_rd;
reg    out_stream_V_last_V_1_sel_wr;
wire    out_stream_V_last_V_1_sel;
wire    out_stream_V_last_V_1_load_A;
wire    out_stream_V_last_V_1_load_B;
reg   [1:0] out_stream_V_last_V_1_state;
wire    out_stream_V_last_V_1_state_cmp_full;
reg   [4:0] out_stream_V_id_V_1_data_out;
reg    out_stream_V_id_V_1_vld_in;
wire    out_stream_V_id_V_1_vld_out;
wire    out_stream_V_id_V_1_ack_in;
wire    out_stream_V_id_V_1_ack_out;
reg   [4:0] out_stream_V_id_V_1_payload_A;
reg   [4:0] out_stream_V_id_V_1_payload_B;
reg    out_stream_V_id_V_1_sel_rd;
reg    out_stream_V_id_V_1_sel_wr;
wire    out_stream_V_id_V_1_sel;
wire    out_stream_V_id_V_1_load_A;
wire    out_stream_V_id_V_1_load_B;
reg   [1:0] out_stream_V_id_V_1_state;
wire    out_stream_V_id_V_1_state_cmp_full;
reg   [5:0] out_stream_V_dest_V_1_data_out;
reg    out_stream_V_dest_V_1_vld_in;
wire    out_stream_V_dest_V_1_vld_out;
wire    out_stream_V_dest_V_1_ack_in;
wire    out_stream_V_dest_V_1_ack_out;
reg   [5:0] out_stream_V_dest_V_1_payload_A;
reg   [5:0] out_stream_V_dest_V_1_payload_B;
reg    out_stream_V_dest_V_1_sel_rd;
reg    out_stream_V_dest_V_1_sel_wr;
wire    out_stream_V_dest_V_1_sel;
wire    out_stream_V_dest_V_1_load_A;
wire    out_stream_V_dest_V_1_load_B;
reg   [1:0] out_stream_V_dest_V_1_state;
wire    out_stream_V_dest_V_1_state_cmp_full;
wire   [15:0] N_ADDS;
reg    in_stream0_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_flatten_reg_514;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond_reg_577;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] exitcond_reg_577_pp2_iter1_reg;
reg   [20:0] indvar_flatten_reg_303;
reg   [5:0] i_1_reg_314;
reg   [5:0] i_2_reg_325;
reg   [15:0] N_ADDS_read_reg_496;
wire   [5:0] i_3_fu_342_p2;
wire    ap_CS_fsm_state2;
wire   [20:0] tmp_fu_354_p3;
reg   [20:0] tmp_reg_509;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_flatten_fu_361_p2;
wire    ap_block_state4_pp1_stage0_iter0;
reg    ap_block_state5_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [20:0] indvar_flatten_next_fu_366_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] tmp_s_fu_386_p1;
reg   [63:0] tmp_s_reg_523;
reg   [4:0] sum_pix1_ch0_addr_2_reg_530;
reg   [4:0] sum_pix2_ch0_addr_2_reg_536;
wire   [5:0] i_5_fu_392_p2;
wire    ap_CS_fsm_state6;
wire   [1:0] dub_pix_ch0_user_V_q0;
reg   [1:0] sum_pix_tot_user_V_reg_562;
wire    ap_CS_fsm_state7;
wire   [4:0] dub_pix_ch0_id_V_q0;
reg   [4:0] sum_pix_tot_id_V_reg_567;
wire   [5:0] dub_pix_ch0_dest_V_q0;
reg   [5:0] sum_pix_tot_dest_V_reg_572;
wire   [0:0] exitcond_fu_453_p2;
wire    ap_block_state8_pp2_stage0_iter0;
wire    ap_block_state9_pp2_stage0_iter1;
reg    ap_block_state9_io;
wire    ap_block_state10_pp2_stage0_iter2;
reg    ap_block_state10_io;
reg    ap_block_pp2_stage0_11001;
wire   [5:0] i_4_fu_459_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] tmp_last_V_fu_471_p2;
reg   [0:0] tmp_last_V_reg_596;
wire   [63:0] tmp_data_V_1_fu_489_p2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state8;
reg   [4:0] sum_pix1_ch0_address0;
reg    sum_pix1_ch0_ce0;
reg    sum_pix1_ch0_we0;
wire   [31:0] sum_pix1_ch0_q0;
reg   [4:0] sum_pix1_ch0_address1;
reg    sum_pix1_ch0_ce1;
reg    sum_pix1_ch0_we1;
wire   [31:0] sum_pix1_ch0_d1;
wire   [31:0] sum_pix1_ch0_q1;
reg   [4:0] sum_pix2_ch0_address0;
reg    sum_pix2_ch0_ce0;
reg    sum_pix2_ch0_we0;
wire   [31:0] sum_pix2_ch0_q0;
reg   [4:0] sum_pix2_ch0_address1;
reg    sum_pix2_ch0_ce1;
reg    sum_pix2_ch0_we1;
wire   [31:0] sum_pix2_ch0_d1;
wire   [31:0] sum_pix2_ch0_q1;
reg   [4:0] dub_pix_ch0_user_V_address0;
reg    dub_pix_ch0_user_V_ce0;
reg    dub_pix_ch0_user_V_we0;
reg   [4:0] dub_pix_ch0_id_V_address0;
reg    dub_pix_ch0_id_V_ce0;
reg    dub_pix_ch0_id_V_we0;
reg   [4:0] dub_pix_ch0_dest_V_address0;
reg    dub_pix_ch0_dest_V_ce0;
reg    dub_pix_ch0_dest_V_we0;
reg   [5:0] i_reg_292;
wire   [0:0] exitcond1_fu_336_p2;
wire   [63:0] tmp_1_fu_348_p1;
wire   [63:0] tmp_3_fu_465_p1;
wire    ap_block_pp2_stage0_01001;
wire   [0:0] exitcond2_fu_372_p2;
wire   [5:0] i_1_mid2_fu_378_p3;
wire   [7:0] tmp_2_fu_417_p1;
wire   [31:0] tmp_9_fu_431_p1;
wire   [7:0] phitmp_fu_421_p4;
wire   [31:0] tmp_10_fu_442_p1;
wire   [63:0] tmp_5_fu_477_p3;
wire  signed [63:0] tmp_6_fu_485_p1;
wire    ap_CS_fsm_state11;
reg    ap_block_state11;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 in_stream0_V_data_V_0_sel_rd = 1'b0;
#0 in_stream0_V_data_V_0_sel_wr = 1'b0;
#0 in_stream0_V_data_V_0_state = 2'd0;
#0 in_stream0_V_user_V_0_sel_rd = 1'b0;
#0 in_stream0_V_user_V_0_sel_wr = 1'b0;
#0 in_stream0_V_user_V_0_state = 2'd0;
#0 in_stream0_V_id_V_0_sel_rd = 1'b0;
#0 in_stream0_V_id_V_0_sel_wr = 1'b0;
#0 in_stream0_V_id_V_0_state = 2'd0;
#0 in_stream0_V_dest_V_0_sel_rd = 1'b0;
#0 in_stream0_V_dest_V_0_sel_wr = 1'b0;
#0 in_stream0_V_dest_V_0_state = 2'd0;
#0 out_stream_V_data_V_1_sel_rd = 1'b0;
#0 out_stream_V_data_V_1_sel_wr = 1'b0;
#0 out_stream_V_data_V_1_state = 2'd0;
#0 out_stream_V_keep_V_1_sel_rd = 1'b0;
#0 out_stream_V_keep_V_1_state = 2'd0;
#0 out_stream_V_strb_V_1_sel_rd = 1'b0;
#0 out_stream_V_strb_V_1_state = 2'd0;
#0 out_stream_V_user_V_1_sel_rd = 1'b0;
#0 out_stream_V_user_V_1_sel_wr = 1'b0;
#0 out_stream_V_user_V_1_state = 2'd0;
#0 out_stream_V_last_V_1_sel_rd = 1'b0;
#0 out_stream_V_last_V_1_sel_wr = 1'b0;
#0 out_stream_V_last_V_1_state = 2'd0;
#0 out_stream_V_id_V_1_sel_rd = 1'b0;
#0 out_stream_V_id_V_1_sel_wr = 1'b0;
#0 out_stream_V_id_V_1_state = 2'd0;
#0 out_stream_V_dest_V_1_sel_rd = 1'b0;
#0 out_stream_V_dest_V_1_sel_wr = 1'b0;
#0 out_stream_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
end

scurve_adder_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
scurve_adder_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .N_ADDS(N_ADDS)
);

scurve_adder_sum_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
sum_pix1_ch0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix1_ch0_address0),
    .ce0(sum_pix1_ch0_ce0),
    .we0(sum_pix1_ch0_we0),
    .d0(32'd0),
    .q0(sum_pix1_ch0_q0),
    .address1(sum_pix1_ch0_address1),
    .ce1(sum_pix1_ch0_ce1),
    .we1(sum_pix1_ch0_we1),
    .d1(sum_pix1_ch0_d1),
    .q1(sum_pix1_ch0_q1)
);

scurve_adder_sum_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
sum_pix2_ch0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix2_ch0_address0),
    .ce0(sum_pix2_ch0_ce0),
    .we0(sum_pix2_ch0_we0),
    .d0(32'd0),
    .q0(sum_pix2_ch0_q0),
    .address1(sum_pix2_ch0_address1),
    .ce1(sum_pix2_ch0_ce1),
    .we1(sum_pix2_ch0_we1),
    .d1(sum_pix2_ch0_d1),
    .q1(sum_pix2_ch0_q1)
);

scurve_adder_dub_dEe #(
    .DataWidth( 2 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
dub_pix_ch0_user_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dub_pix_ch0_user_V_address0),
    .ce0(dub_pix_ch0_user_V_ce0),
    .we0(dub_pix_ch0_user_V_we0),
    .d0(in_stream0_V_user_V_0_data_out),
    .q0(dub_pix_ch0_user_V_q0)
);

scurve_adder_dub_eOg #(
    .DataWidth( 5 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
dub_pix_ch0_id_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dub_pix_ch0_id_V_address0),
    .ce0(dub_pix_ch0_id_V_ce0),
    .we0(dub_pix_ch0_id_V_we0),
    .d0(in_stream0_V_id_V_0_data_out),
    .q0(dub_pix_ch0_id_V_q0)
);

scurve_adder_dub_fYi #(
    .DataWidth( 6 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
dub_pix_ch0_dest_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dub_pix_ch0_dest_V_address0),
    .ce0(dub_pix_ch0_dest_V_ce0),
    .we0(dub_pix_ch0_dest_V_we0),
    .d0(in_stream0_V_dest_V_0_data_out),
    .q0(dub_pix_ch0_dest_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state8) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state8)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream0_V_data_V_0_ack_out == 1'b1) & (in_stream0_V_data_V_0_vld_out == 1'b1))) begin
            in_stream0_V_data_V_0_sel_rd <= ~in_stream0_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream0_V_data_V_0_ack_in == 1'b1) & (in_stream0_V_data_V_0_vld_in == 1'b1))) begin
            in_stream0_V_data_V_0_sel_wr <= ~in_stream0_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream0_V_data_V_0_state == 2'd2) & (in_stream0_V_data_V_0_vld_in == 1'b0)) | ((in_stream0_V_data_V_0_state == 2'd3) & (in_stream0_V_data_V_0_vld_in == 1'b0) & (in_stream0_V_data_V_0_ack_out == 1'b1)))) begin
            in_stream0_V_data_V_0_state <= 2'd2;
        end else if ((((in_stream0_V_data_V_0_state == 2'd1) & (in_stream0_V_data_V_0_ack_out == 1'b0)) | ((in_stream0_V_data_V_0_state == 2'd3) & (in_stream0_V_data_V_0_ack_out == 1'b0) & (in_stream0_V_data_V_0_vld_in == 1'b1)))) begin
            in_stream0_V_data_V_0_state <= 2'd1;
        end else if (((~((in_stream0_V_data_V_0_vld_in == 1'b0) & (in_stream0_V_data_V_0_ack_out == 1'b1)) & ~((in_stream0_V_data_V_0_ack_out == 1'b0) & (in_stream0_V_data_V_0_vld_in == 1'b1)) & (in_stream0_V_data_V_0_state == 2'd3)) | ((in_stream0_V_data_V_0_state == 2'd1) & (in_stream0_V_data_V_0_ack_out == 1'b1)) | ((in_stream0_V_data_V_0_state == 2'd2) & (in_stream0_V_data_V_0_vld_in == 1'b1)))) begin
            in_stream0_V_data_V_0_state <= 2'd3;
        end else begin
            in_stream0_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream0_V_dest_V_0_ack_out == 1'b1) & (in_stream0_V_dest_V_0_vld_out == 1'b1))) begin
            in_stream0_V_dest_V_0_sel_rd <= ~in_stream0_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream0_V_dest_V_0_ack_in == 1'b1) & (in_stream0_V_dest_V_0_vld_in == 1'b1))) begin
            in_stream0_V_dest_V_0_sel_wr <= ~in_stream0_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream0_V_dest_V_0_state == 2'd2) & (in_stream0_V_dest_V_0_vld_in == 1'b0)) | ((in_stream0_V_dest_V_0_state == 2'd3) & (in_stream0_V_dest_V_0_vld_in == 1'b0) & (in_stream0_V_dest_V_0_ack_out == 1'b1)))) begin
            in_stream0_V_dest_V_0_state <= 2'd2;
        end else if ((((in_stream0_V_dest_V_0_state == 2'd1) & (in_stream0_V_dest_V_0_ack_out == 1'b0)) | ((in_stream0_V_dest_V_0_state == 2'd3) & (in_stream0_V_dest_V_0_ack_out == 1'b0) & (in_stream0_V_dest_V_0_vld_in == 1'b1)))) begin
            in_stream0_V_dest_V_0_state <= 2'd1;
        end else if (((~((in_stream0_V_dest_V_0_vld_in == 1'b0) & (in_stream0_V_dest_V_0_ack_out == 1'b1)) & ~((in_stream0_V_dest_V_0_ack_out == 1'b0) & (in_stream0_V_dest_V_0_vld_in == 1'b1)) & (in_stream0_V_dest_V_0_state == 2'd3)) | ((in_stream0_V_dest_V_0_state == 2'd1) & (in_stream0_V_dest_V_0_ack_out == 1'b1)) | ((in_stream0_V_dest_V_0_state == 2'd2) & (in_stream0_V_dest_V_0_vld_in == 1'b1)))) begin
            in_stream0_V_dest_V_0_state <= 2'd3;
        end else begin
            in_stream0_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream0_V_id_V_0_ack_out == 1'b1) & (in_stream0_V_id_V_0_vld_out == 1'b1))) begin
            in_stream0_V_id_V_0_sel_rd <= ~in_stream0_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream0_V_id_V_0_ack_in == 1'b1) & (in_stream0_V_id_V_0_vld_in == 1'b1))) begin
            in_stream0_V_id_V_0_sel_wr <= ~in_stream0_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream0_V_id_V_0_state == 2'd2) & (in_stream0_V_id_V_0_vld_in == 1'b0)) | ((in_stream0_V_id_V_0_state == 2'd3) & (in_stream0_V_id_V_0_vld_in == 1'b0) & (in_stream0_V_id_V_0_ack_out == 1'b1)))) begin
            in_stream0_V_id_V_0_state <= 2'd2;
        end else if ((((in_stream0_V_id_V_0_state == 2'd1) & (in_stream0_V_id_V_0_ack_out == 1'b0)) | ((in_stream0_V_id_V_0_state == 2'd3) & (in_stream0_V_id_V_0_ack_out == 1'b0) & (in_stream0_V_id_V_0_vld_in == 1'b1)))) begin
            in_stream0_V_id_V_0_state <= 2'd1;
        end else if (((~((in_stream0_V_id_V_0_vld_in == 1'b0) & (in_stream0_V_id_V_0_ack_out == 1'b1)) & ~((in_stream0_V_id_V_0_ack_out == 1'b0) & (in_stream0_V_id_V_0_vld_in == 1'b1)) & (in_stream0_V_id_V_0_state == 2'd3)) | ((in_stream0_V_id_V_0_state == 2'd1) & (in_stream0_V_id_V_0_ack_out == 1'b1)) | ((in_stream0_V_id_V_0_state == 2'd2) & (in_stream0_V_id_V_0_vld_in == 1'b1)))) begin
            in_stream0_V_id_V_0_state <= 2'd3;
        end else begin
            in_stream0_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream0_V_user_V_0_ack_out == 1'b1) & (in_stream0_V_user_V_0_vld_out == 1'b1))) begin
            in_stream0_V_user_V_0_sel_rd <= ~in_stream0_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream0_V_user_V_0_ack_in == 1'b1) & (in_stream0_V_user_V_0_vld_in == 1'b1))) begin
            in_stream0_V_user_V_0_sel_wr <= ~in_stream0_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream0_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream0_V_user_V_0_state == 2'd2) & (in_stream0_V_user_V_0_vld_in == 1'b0)) | ((in_stream0_V_user_V_0_state == 2'd3) & (in_stream0_V_user_V_0_vld_in == 1'b0) & (in_stream0_V_user_V_0_ack_out == 1'b1)))) begin
            in_stream0_V_user_V_0_state <= 2'd2;
        end else if ((((in_stream0_V_user_V_0_state == 2'd1) & (in_stream0_V_user_V_0_ack_out == 1'b0)) | ((in_stream0_V_user_V_0_state == 2'd3) & (in_stream0_V_user_V_0_ack_out == 1'b0) & (in_stream0_V_user_V_0_vld_in == 1'b1)))) begin
            in_stream0_V_user_V_0_state <= 2'd1;
        end else if (((~((in_stream0_V_user_V_0_vld_in == 1'b0) & (in_stream0_V_user_V_0_ack_out == 1'b1)) & ~((in_stream0_V_user_V_0_ack_out == 1'b0) & (in_stream0_V_user_V_0_vld_in == 1'b1)) & (in_stream0_V_user_V_0_state == 2'd3)) | ((in_stream0_V_user_V_0_state == 2'd1) & (in_stream0_V_user_V_0_ack_out == 1'b1)) | ((in_stream0_V_user_V_0_state == 2'd2) & (in_stream0_V_user_V_0_vld_in == 1'b1)))) begin
            in_stream0_V_user_V_0_state <= 2'd3;
        end else begin
            in_stream0_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_data_V_1_ack_out == 1'b1) & (out_stream_V_data_V_1_vld_out == 1'b1))) begin
            out_stream_V_data_V_1_sel_rd <= ~out_stream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_data_V_1_ack_in == 1'b1) & (out_stream_V_data_V_1_vld_in == 1'b1))) begin
            out_stream_V_data_V_1_sel_wr <= ~out_stream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_data_V_1_state == 2'd2) & (out_stream_V_data_V_1_vld_in == 1'b0)) | ((out_stream_V_data_V_1_state == 2'd3) & (out_stream_V_data_V_1_vld_in == 1'b0) & (out_stream_V_data_V_1_ack_out == 1'b1)))) begin
            out_stream_V_data_V_1_state <= 2'd2;
        end else if ((((out_stream_V_data_V_1_state == 2'd1) & (out_stream_V_data_V_1_ack_out == 1'b0)) | ((out_stream_V_data_V_1_state == 2'd3) & (out_stream_V_data_V_1_ack_out == 1'b0) & (out_stream_V_data_V_1_vld_in == 1'b1)))) begin
            out_stream_V_data_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_data_V_1_vld_in == 1'b0) & (out_stream_V_data_V_1_ack_out == 1'b1)) & ~((out_stream_V_data_V_1_ack_out == 1'b0) & (out_stream_V_data_V_1_vld_in == 1'b1)) & (out_stream_V_data_V_1_state == 2'd3)) | ((out_stream_V_data_V_1_state == 2'd1) & (out_stream_V_data_V_1_ack_out == 1'b1)) | ((out_stream_V_data_V_1_state == 2'd2) & (out_stream_V_data_V_1_vld_in == 1'b1)))) begin
            out_stream_V_data_V_1_state <= 2'd3;
        end else begin
            out_stream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_dest_V_1_ack_out == 1'b1) & (out_stream_V_dest_V_1_vld_out == 1'b1))) begin
            out_stream_V_dest_V_1_sel_rd <= ~out_stream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_dest_V_1_ack_in == 1'b1) & (out_stream_V_dest_V_1_vld_in == 1'b1))) begin
            out_stream_V_dest_V_1_sel_wr <= ~out_stream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_dest_V_1_state == 2'd2) & (out_stream_V_dest_V_1_vld_in == 1'b0)) | ((out_stream_V_dest_V_1_state == 2'd3) & (out_stream_V_dest_V_1_vld_in == 1'b0) & (out_stream_V_dest_V_1_ack_out == 1'b1)))) begin
            out_stream_V_dest_V_1_state <= 2'd2;
        end else if ((((out_stream_V_dest_V_1_state == 2'd1) & (out_stream_V_dest_V_1_ack_out == 1'b0)) | ((out_stream_V_dest_V_1_state == 2'd3) & (out_stream_V_dest_V_1_ack_out == 1'b0) & (out_stream_V_dest_V_1_vld_in == 1'b1)))) begin
            out_stream_V_dest_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_dest_V_1_vld_in == 1'b0) & (out_stream_V_dest_V_1_ack_out == 1'b1)) & ~((out_stream_V_dest_V_1_ack_out == 1'b0) & (out_stream_V_dest_V_1_vld_in == 1'b1)) & (out_stream_V_dest_V_1_state == 2'd3)) | ((out_stream_V_dest_V_1_state == 2'd1) & (out_stream_V_dest_V_1_ack_out == 1'b1)) | ((out_stream_V_dest_V_1_state == 2'd2) & (out_stream_V_dest_V_1_vld_in == 1'b1)))) begin
            out_stream_V_dest_V_1_state <= 2'd3;
        end else begin
            out_stream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_id_V_1_ack_out == 1'b1) & (out_stream_V_id_V_1_vld_out == 1'b1))) begin
            out_stream_V_id_V_1_sel_rd <= ~out_stream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_id_V_1_ack_in == 1'b1) & (out_stream_V_id_V_1_vld_in == 1'b1))) begin
            out_stream_V_id_V_1_sel_wr <= ~out_stream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_id_V_1_state == 2'd2) & (out_stream_V_id_V_1_vld_in == 1'b0)) | ((out_stream_V_id_V_1_state == 2'd3) & (out_stream_V_id_V_1_vld_in == 1'b0) & (out_stream_V_id_V_1_ack_out == 1'b1)))) begin
            out_stream_V_id_V_1_state <= 2'd2;
        end else if ((((out_stream_V_id_V_1_state == 2'd1) & (out_stream_V_id_V_1_ack_out == 1'b0)) | ((out_stream_V_id_V_1_state == 2'd3) & (out_stream_V_id_V_1_ack_out == 1'b0) & (out_stream_V_id_V_1_vld_in == 1'b1)))) begin
            out_stream_V_id_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_id_V_1_vld_in == 1'b0) & (out_stream_V_id_V_1_ack_out == 1'b1)) & ~((out_stream_V_id_V_1_ack_out == 1'b0) & (out_stream_V_id_V_1_vld_in == 1'b1)) & (out_stream_V_id_V_1_state == 2'd3)) | ((out_stream_V_id_V_1_state == 2'd1) & (out_stream_V_id_V_1_ack_out == 1'b1)) | ((out_stream_V_id_V_1_state == 2'd2) & (out_stream_V_id_V_1_vld_in == 1'b1)))) begin
            out_stream_V_id_V_1_state <= 2'd3;
        end else begin
            out_stream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_keep_V_1_ack_out == 1'b1) & (out_stream_V_keep_V_1_vld_out == 1'b1))) begin
            out_stream_V_keep_V_1_sel_rd <= ~out_stream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_keep_V_1_state == 2'd2) & (out_stream_V_keep_V_1_vld_in == 1'b0)) | ((out_stream_V_keep_V_1_state == 2'd3) & (out_stream_V_keep_V_1_vld_in == 1'b0) & (out_stream_V_keep_V_1_ack_out == 1'b1)))) begin
            out_stream_V_keep_V_1_state <= 2'd2;
        end else if ((((out_stream_V_keep_V_1_state == 2'd1) & (out_stream_V_keep_V_1_ack_out == 1'b0)) | ((out_stream_V_keep_V_1_state == 2'd3) & (out_stream_V_keep_V_1_ack_out == 1'b0) & (out_stream_V_keep_V_1_vld_in == 1'b1)))) begin
            out_stream_V_keep_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_keep_V_1_vld_in == 1'b0) & (out_stream_V_keep_V_1_ack_out == 1'b1)) & ~((out_stream_V_keep_V_1_ack_out == 1'b0) & (out_stream_V_keep_V_1_vld_in == 1'b1)) & (out_stream_V_keep_V_1_state == 2'd3)) | ((out_stream_V_keep_V_1_state == 2'd1) & (out_stream_V_keep_V_1_ack_out == 1'b1)) | ((out_stream_V_keep_V_1_state == 2'd2) & (out_stream_V_keep_V_1_vld_in == 1'b1)))) begin
            out_stream_V_keep_V_1_state <= 2'd3;
        end else begin
            out_stream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_last_V_1_ack_out == 1'b1) & (out_stream_V_last_V_1_vld_out == 1'b1))) begin
            out_stream_V_last_V_1_sel_rd <= ~out_stream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_last_V_1_ack_in == 1'b1) & (out_stream_V_last_V_1_vld_in == 1'b1))) begin
            out_stream_V_last_V_1_sel_wr <= ~out_stream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_last_V_1_state == 2'd2) & (out_stream_V_last_V_1_vld_in == 1'b0)) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_V_last_V_1_vld_in == 1'b0) & (out_stream_V_last_V_1_ack_out == 1'b1)))) begin
            out_stream_V_last_V_1_state <= 2'd2;
        end else if ((((out_stream_V_last_V_1_state == 2'd1) & (out_stream_V_last_V_1_ack_out == 1'b0)) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_V_last_V_1_ack_out == 1'b0) & (out_stream_V_last_V_1_vld_in == 1'b1)))) begin
            out_stream_V_last_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_last_V_1_vld_in == 1'b0) & (out_stream_V_last_V_1_ack_out == 1'b1)) & ~((out_stream_V_last_V_1_ack_out == 1'b0) & (out_stream_V_last_V_1_vld_in == 1'b1)) & (out_stream_V_last_V_1_state == 2'd3)) | ((out_stream_V_last_V_1_state == 2'd1) & (out_stream_V_last_V_1_ack_out == 1'b1)) | ((out_stream_V_last_V_1_state == 2'd2) & (out_stream_V_last_V_1_vld_in == 1'b1)))) begin
            out_stream_V_last_V_1_state <= 2'd3;
        end else begin
            out_stream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_strb_V_1_ack_out == 1'b1) & (out_stream_V_strb_V_1_vld_out == 1'b1))) begin
            out_stream_V_strb_V_1_sel_rd <= ~out_stream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_strb_V_1_state == 2'd2) & (out_stream_V_strb_V_1_vld_in == 1'b0)) | ((out_stream_V_strb_V_1_state == 2'd3) & (out_stream_V_strb_V_1_vld_in == 1'b0) & (out_stream_V_strb_V_1_ack_out == 1'b1)))) begin
            out_stream_V_strb_V_1_state <= 2'd2;
        end else if ((((out_stream_V_strb_V_1_state == 2'd1) & (out_stream_V_strb_V_1_ack_out == 1'b0)) | ((out_stream_V_strb_V_1_state == 2'd3) & (out_stream_V_strb_V_1_ack_out == 1'b0) & (out_stream_V_strb_V_1_vld_in == 1'b1)))) begin
            out_stream_V_strb_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_strb_V_1_vld_in == 1'b0) & (out_stream_V_strb_V_1_ack_out == 1'b1)) & ~((out_stream_V_strb_V_1_ack_out == 1'b0) & (out_stream_V_strb_V_1_vld_in == 1'b1)) & (out_stream_V_strb_V_1_state == 2'd3)) | ((out_stream_V_strb_V_1_state == 2'd1) & (out_stream_V_strb_V_1_ack_out == 1'b1)) | ((out_stream_V_strb_V_1_state == 2'd2) & (out_stream_V_strb_V_1_vld_in == 1'b1)))) begin
            out_stream_V_strb_V_1_state <= 2'd3;
        end else begin
            out_stream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_user_V_1_ack_out == 1'b1) & (out_stream_V_user_V_1_vld_out == 1'b1))) begin
            out_stream_V_user_V_1_sel_rd <= ~out_stream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_user_V_1_ack_in == 1'b1) & (out_stream_V_user_V_1_vld_in == 1'b1))) begin
            out_stream_V_user_V_1_sel_wr <= ~out_stream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_user_V_1_state == 2'd2) & (out_stream_V_user_V_1_vld_in == 1'b0)) | ((out_stream_V_user_V_1_state == 2'd3) & (out_stream_V_user_V_1_vld_in == 1'b0) & (out_stream_V_user_V_1_ack_out == 1'b1)))) begin
            out_stream_V_user_V_1_state <= 2'd2;
        end else if ((((out_stream_V_user_V_1_state == 2'd1) & (out_stream_V_user_V_1_ack_out == 1'b0)) | ((out_stream_V_user_V_1_state == 2'd3) & (out_stream_V_user_V_1_ack_out == 1'b0) & (out_stream_V_user_V_1_vld_in == 1'b1)))) begin
            out_stream_V_user_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_user_V_1_vld_in == 1'b0) & (out_stream_V_user_V_1_ack_out == 1'b1)) & ~((out_stream_V_user_V_1_ack_out == 1'b0) & (out_stream_V_user_V_1_vld_in == 1'b1)) & (out_stream_V_user_V_1_state == 2'd3)) | ((out_stream_V_user_V_1_state == 2'd1) & (out_stream_V_user_V_1_ack_out == 1'b1)) | ((out_stream_V_user_V_1_state == 2'd2) & (out_stream_V_user_V_1_vld_in == 1'b1)))) begin
            out_stream_V_user_V_1_state <= 2'd3;
        end else begin
            out_stream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_fu_361_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_314 <= i_5_fu_392_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_314 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_2_reg_325 <= 6'd0;
    end else if (((exitcond_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_2_reg_325 <= i_4_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_292 <= 6'd0;
    end else if (((exitcond1_fu_336_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_292 <= i_3_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_fu_361_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_303 <= indvar_flatten_next_fu_366_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_303 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        N_ADDS_read_reg_496 <= N_ADDS;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten_reg_514 <= exitcond_flatten_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        exitcond_reg_577 <= exitcond_fu_453_p2;
        exitcond_reg_577_pp2_iter1_reg <= exitcond_reg_577;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream0_V_data_V_0_load_A == 1'b1)) begin
        in_stream0_V_data_V_0_payload_A <= in_stream0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream0_V_data_V_0_load_B == 1'b1)) begin
        in_stream0_V_data_V_0_payload_B <= in_stream0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream0_V_dest_V_0_load_A == 1'b1)) begin
        in_stream0_V_dest_V_0_payload_A <= in_stream0_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream0_V_dest_V_0_load_B == 1'b1)) begin
        in_stream0_V_dest_V_0_payload_B <= in_stream0_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream0_V_id_V_0_load_A == 1'b1)) begin
        in_stream0_V_id_V_0_payload_A <= in_stream0_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream0_V_id_V_0_load_B == 1'b1)) begin
        in_stream0_V_id_V_0_payload_B <= in_stream0_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream0_V_user_V_0_load_A == 1'b1)) begin
        in_stream0_V_user_V_0_payload_A <= in_stream0_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream0_V_user_V_0_load_B == 1'b1)) begin
        in_stream0_V_user_V_0_payload_B <= in_stream0_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_data_V_1_load_A == 1'b1)) begin
        out_stream_V_data_V_1_payload_A <= tmp_data_V_1_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_data_V_1_load_B == 1'b1)) begin
        out_stream_V_data_V_1_payload_B <= tmp_data_V_1_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_dest_V_1_load_A == 1'b1)) begin
        out_stream_V_dest_V_1_payload_A <= sum_pix_tot_dest_V_reg_572;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_dest_V_1_load_B == 1'b1)) begin
        out_stream_V_dest_V_1_payload_B <= sum_pix_tot_dest_V_reg_572;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_id_V_1_load_A == 1'b1)) begin
        out_stream_V_id_V_1_payload_A <= sum_pix_tot_id_V_reg_567;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_id_V_1_load_B == 1'b1)) begin
        out_stream_V_id_V_1_payload_B <= sum_pix_tot_id_V_reg_567;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_last_V_1_load_A == 1'b1)) begin
        out_stream_V_last_V_1_payload_A <= tmp_last_V_reg_596;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_last_V_1_load_B == 1'b1)) begin
        out_stream_V_last_V_1_payload_B <= tmp_last_V_reg_596;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_user_V_1_load_A == 1'b1)) begin
        out_stream_V_user_V_1_payload_A <= sum_pix_tot_user_V_reg_562;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_user_V_1_load_B == 1'b1)) begin
        out_stream_V_user_V_1_payload_B <= sum_pix_tot_user_V_reg_562;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix1_ch0_addr_2_reg_530 <= tmp_s_fu_386_p1;
        sum_pix2_ch0_addr_2_reg_536 <= tmp_s_fu_386_p1;
        tmp_s_reg_523[5 : 0] <= tmp_s_fu_386_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sum_pix_tot_dest_V_reg_572 <= dub_pix_ch0_dest_V_q0;
        sum_pix_tot_id_V_reg_567 <= dub_pix_ch0_id_V_q0;
        sum_pix_tot_user_V_reg_562 <= dub_pix_ch0_user_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_last_V_reg_596 <= tmp_last_V_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_reg_509[20 : 5] <= tmp_fu_354_p3[20 : 5];
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_361_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_453_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_V_dest_V_1_ack_in == 1'b0) | (out_stream_V_id_V_1_ack_in == 1'b0) | (out_stream_V_last_V_1_ack_in == 1'b0) | (out_stream_V_user_V_1_ack_in == 1'b0) | (out_stream_V_strb_V_1_ack_in == 1'b0) | (out_stream_V_keep_V_1_ack_in == 1'b0) | (out_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_V_dest_V_1_ack_in == 1'b0) | (out_stream_V_id_V_1_ack_in == 1'b0) | (out_stream_V_last_V_1_ack_in == 1'b0) | (out_stream_V_user_V_1_ack_in == 1'b0) | (out_stream_V_strb_V_1_ack_in == 1'b0) | (out_stream_V_keep_V_1_ack_in == 1'b0) | (out_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dub_pix_ch0_dest_V_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        dub_pix_ch0_dest_V_address0 = tmp_s_reg_523;
    end else begin
        dub_pix_ch0_dest_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        dub_pix_ch0_dest_V_ce0 = 1'b1;
    end else begin
        dub_pix_ch0_dest_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_514 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        dub_pix_ch0_dest_V_we0 = 1'b1;
    end else begin
        dub_pix_ch0_dest_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dub_pix_ch0_id_V_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        dub_pix_ch0_id_V_address0 = tmp_s_reg_523;
    end else begin
        dub_pix_ch0_id_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        dub_pix_ch0_id_V_ce0 = 1'b1;
    end else begin
        dub_pix_ch0_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_514 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        dub_pix_ch0_id_V_we0 = 1'b1;
    end else begin
        dub_pix_ch0_id_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dub_pix_ch0_user_V_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        dub_pix_ch0_user_V_address0 = tmp_s_reg_523;
    end else begin
        dub_pix_ch0_user_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        dub_pix_ch0_user_V_ce0 = 1'b1;
    end else begin
        dub_pix_ch0_user_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_514 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        dub_pix_ch0_user_V_we0 = 1'b1;
    end else begin
        dub_pix_ch0_user_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond_flatten_reg_514 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in_stream0_TDATA_blk_n = in_stream0_V_data_V_0_state[1'd0];
    end else begin
        in_stream0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_514 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in_stream0_V_data_V_0_ack_out = 1'b1;
    end else begin
        in_stream0_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream0_V_data_V_0_sel == 1'b1)) begin
        in_stream0_V_data_V_0_data_out = in_stream0_V_data_V_0_payload_B;
    end else begin
        in_stream0_V_data_V_0_data_out = in_stream0_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_514 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in_stream0_V_dest_V_0_ack_out = 1'b1;
    end else begin
        in_stream0_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream0_V_dest_V_0_sel == 1'b1)) begin
        in_stream0_V_dest_V_0_data_out = in_stream0_V_dest_V_0_payload_B;
    end else begin
        in_stream0_V_dest_V_0_data_out = in_stream0_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_514 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in_stream0_V_id_V_0_ack_out = 1'b1;
    end else begin
        in_stream0_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream0_V_id_V_0_sel == 1'b1)) begin
        in_stream0_V_id_V_0_data_out = in_stream0_V_id_V_0_payload_B;
    end else begin
        in_stream0_V_id_V_0_data_out = in_stream0_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_514 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in_stream0_V_user_V_0_ack_out = 1'b1;
    end else begin
        in_stream0_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream0_V_user_V_0_sel == 1'b1)) begin
        in_stream0_V_user_V_0_data_out = in_stream0_V_user_V_0_payload_B;
    end else begin
        in_stream0_V_user_V_0_data_out = in_stream0_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0) & (exitcond_reg_577_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (exitcond_reg_577 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        out_stream_TDATA_blk_n = out_stream_V_data_V_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_stream_V_data_V_1_sel == 1'b1)) begin
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_B;
    end else begin
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_577 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        out_stream_V_data_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_V_dest_V_1_sel == 1'b1)) begin
        out_stream_V_dest_V_1_data_out = out_stream_V_dest_V_1_payload_B;
    end else begin
        out_stream_V_dest_V_1_data_out = out_stream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_577 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        out_stream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_V_id_V_1_sel == 1'b1)) begin
        out_stream_V_id_V_1_data_out = out_stream_V_id_V_1_payload_B;
    end else begin
        out_stream_V_id_V_1_data_out = out_stream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_577 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        out_stream_V_id_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_577 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        out_stream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_V_last_V_1_sel == 1'b1)) begin
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_B;
    end else begin
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_577 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        out_stream_V_last_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_577 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        out_stream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_V_user_V_1_sel == 1'b1)) begin
        out_stream_V_user_V_1_data_out = out_stream_V_user_V_1_payload_B;
    end else begin
        out_stream_V_user_V_1_data_out = out_stream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_577 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        out_stream_V_user_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix1_ch0_address0 = tmp_s_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix1_ch0_address0 = tmp_1_fu_348_p1;
    end else begin
        sum_pix1_ch0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix1_ch0_address1 = tmp_3_fu_465_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix1_ch0_address1 = sum_pix1_ch0_addr_2_reg_530;
    end else begin
        sum_pix1_ch0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix1_ch0_ce0 = 1'b1;
    end else begin
        sum_pix1_ch0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix1_ch0_ce1 = 1'b1;
    end else begin
        sum_pix1_ch0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_336_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix1_ch0_we0 = 1'b1;
    end else begin
        sum_pix1_ch0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_514 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix1_ch0_we1 = 1'b1;
    end else begin
        sum_pix1_ch0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix2_ch0_address0 = tmp_s_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_pix2_ch0_address0 = tmp_1_fu_348_p1;
    end else begin
        sum_pix2_ch0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sum_pix2_ch0_address1 = tmp_3_fu_465_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix2_ch0_address1 = sum_pix2_ch0_addr_2_reg_536;
    end else begin
        sum_pix2_ch0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix2_ch0_ce0 = 1'b1;
    end else begin
        sum_pix2_ch0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sum_pix2_ch0_ce1 = 1'b1;
    end else begin
        sum_pix2_ch0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_336_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_pix2_ch0_we0 = 1'b1;
    end else begin
        sum_pix2_ch0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_514 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_pix2_ch0_we1 = 1'b1;
    end else begin
        sum_pix2_ch0_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_336_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((exitcond_flatten_fu_361_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((exitcond_flatten_fu_361_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (exitcond_fu_453_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (exitcond_fu_453_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((out_stream_V_dest_V_1_ack_in == 1'b0) | (out_stream_V_id_V_1_ack_in == 1'b0) | (out_stream_V_last_V_1_ack_in == 1'b0) | (out_stream_V_user_V_1_ack_in == 1'b0) | (out_stream_V_strb_V_1_ack_in == 1'b0) | (out_stream_V_keep_V_1_ack_in == 1'b0) | (out_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((exitcond_flatten_reg_514 == 1'd0) & (in_stream0_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((exitcond_flatten_reg_514 == 1'd0) & (in_stream0_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_io = ((exitcond_reg_577_pp2_iter1_reg == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state10_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11 = ((out_stream_V_dest_V_1_ack_in == 1'b0) | (out_stream_V_id_V_1_ack_in == 1'b0) | (out_stream_V_last_V_1_ack_in == 1'b0) | (out_stream_V_user_V_1_ack_in == 1'b0) | (out_stream_V_strb_V_1_ack_in == 1'b0) | (out_stream_V_keep_V_1_ack_in == 1'b0) | (out_stream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp1_stage0_iter1 = ((exitcond_flatten_reg_514 == 1'd0) & (in_stream0_V_data_V_0_vld_out == 1'b0));
end

assign ap_block_state8_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((exitcond_reg_577 == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state9_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_336_p2 = ((i_reg_292 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond2_fu_372_p2 = ((i_1_reg_314 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_361_p2 = ((indvar_flatten_reg_303 == tmp_reg_509) ? 1'b1 : 1'b0);

assign exitcond_fu_453_p2 = ((i_2_reg_325 == 6'd32) ? 1'b1 : 1'b0);

assign i_1_mid2_fu_378_p3 = ((exitcond2_fu_372_p2[0:0] === 1'b1) ? 6'd0 : i_1_reg_314);

assign i_3_fu_342_p2 = (i_reg_292 + 6'd1);

assign i_4_fu_459_p2 = (i_2_reg_325 + 6'd1);

assign i_5_fu_392_p2 = (6'd1 + i_1_mid2_fu_378_p3);

assign in_stream0_TREADY = in_stream0_V_dest_V_0_state[1'd1];

assign in_stream0_V_data_V_0_ack_in = in_stream0_V_data_V_0_state[1'd1];

assign in_stream0_V_data_V_0_load_A = (in_stream0_V_data_V_0_state_cmp_full & ~in_stream0_V_data_V_0_sel_wr);

assign in_stream0_V_data_V_0_load_B = (in_stream0_V_data_V_0_state_cmp_full & in_stream0_V_data_V_0_sel_wr);

assign in_stream0_V_data_V_0_sel = in_stream0_V_data_V_0_sel_rd;

assign in_stream0_V_data_V_0_state_cmp_full = ((in_stream0_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream0_V_data_V_0_vld_in = in_stream0_TVALID;

assign in_stream0_V_data_V_0_vld_out = in_stream0_V_data_V_0_state[1'd0];

assign in_stream0_V_dest_V_0_ack_in = in_stream0_V_dest_V_0_state[1'd1];

assign in_stream0_V_dest_V_0_load_A = (in_stream0_V_dest_V_0_state_cmp_full & ~in_stream0_V_dest_V_0_sel_wr);

assign in_stream0_V_dest_V_0_load_B = (in_stream0_V_dest_V_0_state_cmp_full & in_stream0_V_dest_V_0_sel_wr);

assign in_stream0_V_dest_V_0_sel = in_stream0_V_dest_V_0_sel_rd;

assign in_stream0_V_dest_V_0_state_cmp_full = ((in_stream0_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream0_V_dest_V_0_vld_in = in_stream0_TVALID;

assign in_stream0_V_dest_V_0_vld_out = in_stream0_V_dest_V_0_state[1'd0];

assign in_stream0_V_id_V_0_ack_in = in_stream0_V_id_V_0_state[1'd1];

assign in_stream0_V_id_V_0_load_A = (in_stream0_V_id_V_0_state_cmp_full & ~in_stream0_V_id_V_0_sel_wr);

assign in_stream0_V_id_V_0_load_B = (in_stream0_V_id_V_0_state_cmp_full & in_stream0_V_id_V_0_sel_wr);

assign in_stream0_V_id_V_0_sel = in_stream0_V_id_V_0_sel_rd;

assign in_stream0_V_id_V_0_state_cmp_full = ((in_stream0_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream0_V_id_V_0_vld_in = in_stream0_TVALID;

assign in_stream0_V_id_V_0_vld_out = in_stream0_V_id_V_0_state[1'd0];

assign in_stream0_V_user_V_0_ack_in = in_stream0_V_user_V_0_state[1'd1];

assign in_stream0_V_user_V_0_load_A = (in_stream0_V_user_V_0_state_cmp_full & ~in_stream0_V_user_V_0_sel_wr);

assign in_stream0_V_user_V_0_load_B = (in_stream0_V_user_V_0_state_cmp_full & in_stream0_V_user_V_0_sel_wr);

assign in_stream0_V_user_V_0_sel = in_stream0_V_user_V_0_sel_rd;

assign in_stream0_V_user_V_0_state_cmp_full = ((in_stream0_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream0_V_user_V_0_vld_in = in_stream0_TVALID;

assign in_stream0_V_user_V_0_vld_out = in_stream0_V_user_V_0_state[1'd0];

assign indvar_flatten_next_fu_366_p2 = (indvar_flatten_reg_303 + 21'd1);

assign out_stream_TDATA = out_stream_V_data_V_1_data_out;

assign out_stream_TDEST = out_stream_V_dest_V_1_data_out;

assign out_stream_TID = out_stream_V_id_V_1_data_out;

assign out_stream_TKEEP = out_stream_V_keep_V_1_data_out;

assign out_stream_TLAST = out_stream_V_last_V_1_data_out;

assign out_stream_TSTRB = out_stream_V_strb_V_1_data_out;

assign out_stream_TUSER = out_stream_V_user_V_1_data_out;

assign out_stream_TVALID = out_stream_V_dest_V_1_state[1'd0];

assign out_stream_V_data_V_1_ack_in = out_stream_V_data_V_1_state[1'd1];

assign out_stream_V_data_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_data_V_1_load_A = (out_stream_V_data_V_1_state_cmp_full & ~out_stream_V_data_V_1_sel_wr);

assign out_stream_V_data_V_1_load_B = (out_stream_V_data_V_1_state_cmp_full & out_stream_V_data_V_1_sel_wr);

assign out_stream_V_data_V_1_sel = out_stream_V_data_V_1_sel_rd;

assign out_stream_V_data_V_1_state_cmp_full = ((out_stream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_data_V_1_vld_out = out_stream_V_data_V_1_state[1'd0];

assign out_stream_V_dest_V_1_ack_in = out_stream_V_dest_V_1_state[1'd1];

assign out_stream_V_dest_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_dest_V_1_load_A = (out_stream_V_dest_V_1_state_cmp_full & ~out_stream_V_dest_V_1_sel_wr);

assign out_stream_V_dest_V_1_load_B = (out_stream_V_dest_V_1_state_cmp_full & out_stream_V_dest_V_1_sel_wr);

assign out_stream_V_dest_V_1_sel = out_stream_V_dest_V_1_sel_rd;

assign out_stream_V_dest_V_1_state_cmp_full = ((out_stream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_dest_V_1_vld_out = out_stream_V_dest_V_1_state[1'd0];

assign out_stream_V_id_V_1_ack_in = out_stream_V_id_V_1_state[1'd1];

assign out_stream_V_id_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_id_V_1_load_A = (out_stream_V_id_V_1_state_cmp_full & ~out_stream_V_id_V_1_sel_wr);

assign out_stream_V_id_V_1_load_B = (out_stream_V_id_V_1_state_cmp_full & out_stream_V_id_V_1_sel_wr);

assign out_stream_V_id_V_1_sel = out_stream_V_id_V_1_sel_rd;

assign out_stream_V_id_V_1_state_cmp_full = ((out_stream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_id_V_1_vld_out = out_stream_V_id_V_1_state[1'd0];

assign out_stream_V_keep_V_1_ack_in = out_stream_V_keep_V_1_state[1'd1];

assign out_stream_V_keep_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_keep_V_1_data_out = 8'd31;

assign out_stream_V_keep_V_1_sel = out_stream_V_keep_V_1_sel_rd;

assign out_stream_V_keep_V_1_vld_out = out_stream_V_keep_V_1_state[1'd0];

assign out_stream_V_last_V_1_ack_in = out_stream_V_last_V_1_state[1'd1];

assign out_stream_V_last_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_last_V_1_load_A = (out_stream_V_last_V_1_state_cmp_full & ~out_stream_V_last_V_1_sel_wr);

assign out_stream_V_last_V_1_load_B = (out_stream_V_last_V_1_state_cmp_full & out_stream_V_last_V_1_sel_wr);

assign out_stream_V_last_V_1_sel = out_stream_V_last_V_1_sel_rd;

assign out_stream_V_last_V_1_state_cmp_full = ((out_stream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_last_V_1_vld_out = out_stream_V_last_V_1_state[1'd0];

assign out_stream_V_strb_V_1_ack_in = out_stream_V_strb_V_1_state[1'd1];

assign out_stream_V_strb_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_strb_V_1_data_out = 8'd31;

assign out_stream_V_strb_V_1_sel = out_stream_V_strb_V_1_sel_rd;

assign out_stream_V_strb_V_1_vld_out = out_stream_V_strb_V_1_state[1'd0];

assign out_stream_V_user_V_1_ack_in = out_stream_V_user_V_1_state[1'd1];

assign out_stream_V_user_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_user_V_1_load_A = (out_stream_V_user_V_1_state_cmp_full & ~out_stream_V_user_V_1_sel_wr);

assign out_stream_V_user_V_1_load_B = (out_stream_V_user_V_1_state_cmp_full & out_stream_V_user_V_1_sel_wr);

assign out_stream_V_user_V_1_sel = out_stream_V_user_V_1_sel_rd;

assign out_stream_V_user_V_1_state_cmp_full = ((out_stream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_user_V_1_vld_out = out_stream_V_user_V_1_state[1'd0];

assign phitmp_fu_421_p4 = {{in_stream0_V_data_V_0_data_out[15:8]}};

assign sum_pix1_ch0_d1 = (tmp_9_fu_431_p1 + sum_pix1_ch0_q0);

assign sum_pix2_ch0_d1 = (tmp_10_fu_442_p1 + sum_pix2_ch0_q0);

assign tmp_10_fu_442_p1 = phitmp_fu_421_p4;

assign tmp_1_fu_348_p1 = i_reg_292;

assign tmp_2_fu_417_p1 = in_stream0_V_data_V_0_data_out[7:0];

assign tmp_3_fu_465_p1 = i_2_reg_325;

assign tmp_5_fu_477_p3 = {{sum_pix2_ch0_q1}, {32'd0}};

assign tmp_6_fu_485_p1 = $signed(sum_pix1_ch0_q1);

assign tmp_9_fu_431_p1 = tmp_2_fu_417_p1;

assign tmp_data_V_1_fu_489_p2 = (tmp_6_fu_485_p1 | tmp_5_fu_477_p3);

assign tmp_fu_354_p3 = {{N_ADDS_read_reg_496}, {5'd0}};

assign tmp_last_V_fu_471_p2 = ((i_2_reg_325 == 6'd31) ? 1'b1 : 1'b0);

assign tmp_s_fu_386_p1 = i_1_mid2_fu_378_p3;

always @ (posedge ap_clk) begin
    tmp_reg_509[4:0] <= 5'b00000;
    tmp_s_reg_523[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //scurve_adder
