-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scurve_adder is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream0_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in_stream0_TVALID : IN STD_LOGIC;
    in_stream0_TREADY : OUT STD_LOGIC;
    in_stream0_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    in_stream0_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    in_stream0_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    in_stream0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream0_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream0_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of scurve_adder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "scurve_adder,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z035ffg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.787000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=361,HLS_SYN_LUT=911}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_stream0_V_data_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal in_stream0_V_data_V_0_vld_in : STD_LOGIC;
    signal in_stream0_V_data_V_0_vld_out : STD_LOGIC;
    signal in_stream0_V_data_V_0_ack_in : STD_LOGIC;
    signal in_stream0_V_data_V_0_ack_out : STD_LOGIC;
    signal in_stream0_V_data_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal in_stream0_V_data_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal in_stream0_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_stream0_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_stream0_V_data_V_0_sel : STD_LOGIC;
    signal in_stream0_V_data_V_0_load_A : STD_LOGIC;
    signal in_stream0_V_data_V_0_load_B : STD_LOGIC;
    signal in_stream0_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream0_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_stream0_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal in_stream0_V_user_V_0_vld_in : STD_LOGIC;
    signal in_stream0_V_user_V_0_vld_out : STD_LOGIC;
    signal in_stream0_V_user_V_0_ack_in : STD_LOGIC;
    signal in_stream0_V_user_V_0_ack_out : STD_LOGIC;
    signal in_stream0_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal in_stream0_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal in_stream0_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal in_stream0_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal in_stream0_V_user_V_0_sel : STD_LOGIC;
    signal in_stream0_V_user_V_0_load_A : STD_LOGIC;
    signal in_stream0_V_user_V_0_load_B : STD_LOGIC;
    signal in_stream0_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream0_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal in_stream0_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal in_stream0_V_id_V_0_vld_in : STD_LOGIC;
    signal in_stream0_V_id_V_0_vld_out : STD_LOGIC;
    signal in_stream0_V_id_V_0_ack_in : STD_LOGIC;
    signal in_stream0_V_id_V_0_ack_out : STD_LOGIC;
    signal in_stream0_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal in_stream0_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal in_stream0_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal in_stream0_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal in_stream0_V_id_V_0_sel : STD_LOGIC;
    signal in_stream0_V_id_V_0_load_A : STD_LOGIC;
    signal in_stream0_V_id_V_0_load_B : STD_LOGIC;
    signal in_stream0_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream0_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal in_stream0_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal in_stream0_V_dest_V_0_vld_in : STD_LOGIC;
    signal in_stream0_V_dest_V_0_vld_out : STD_LOGIC;
    signal in_stream0_V_dest_V_0_ack_in : STD_LOGIC;
    signal in_stream0_V_dest_V_0_ack_out : STD_LOGIC;
    signal in_stream0_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal in_stream0_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal in_stream0_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal in_stream0_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal in_stream0_V_dest_V_0_sel : STD_LOGIC;
    signal in_stream0_V_dest_V_0_load_A : STD_LOGIC;
    signal in_stream0_V_dest_V_0_load_B : STD_LOGIC;
    signal in_stream0_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream0_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal out_stream_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_data_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_data_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_data_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_data_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_data_V_1_sel : STD_LOGIC;
    signal out_stream_V_data_V_1_load_A : STD_LOGIC;
    signal out_stream_V_data_V_1_load_B : STD_LOGIC;
    signal out_stream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_V_keep_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_keep_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_keep_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_keep_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_keep_V_1_sel : STD_LOGIC;
    signal out_stream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_V_strb_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_strb_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_strb_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_strb_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_strb_V_1_sel : STD_LOGIC;
    signal out_stream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal out_stream_V_user_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_user_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_user_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_user_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal out_stream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal out_stream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_user_V_1_sel : STD_LOGIC;
    signal out_stream_V_user_V_1_load_A : STD_LOGIC;
    signal out_stream_V_user_V_1_load_B : STD_LOGIC;
    signal out_stream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_last_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_last_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_last_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_last_V_1_sel : STD_LOGIC;
    signal out_stream_V_last_V_1_load_A : STD_LOGIC;
    signal out_stream_V_last_V_1_load_B : STD_LOGIC;
    signal out_stream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_V_id_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_id_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_id_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_id_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_id_V_1_sel : STD_LOGIC;
    signal out_stream_V_id_V_1_load_A : STD_LOGIC;
    signal out_stream_V_id_V_1_load_B : STD_LOGIC;
    signal out_stream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal out_stream_V_dest_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_dest_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_dest_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_dest_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal out_stream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal out_stream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_dest_V_1_sel : STD_LOGIC;
    signal out_stream_V_dest_V_1_load_A : STD_LOGIC;
    signal out_stream_V_dest_V_1_load_B : STD_LOGIC;
    signal out_stream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal N_ADDS : STD_LOGIC_VECTOR (7 downto 0);
    signal in_stream0_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal exitcond_reg_571_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_303 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_314 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_325 : STD_LOGIC_VECTOR (5 downto 0);
    signal N_ADDS_read_reg_490 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_fu_342_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_354_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_503 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_flatten_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_366_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_9_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_517 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_pix1_ch0_addr_2_reg_524 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_pix2_ch0_addr_2_reg_530 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_fu_392_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal dub_pix_ch0_user_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_pix_tot_user_V_reg_556 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal dub_pix_ch0_id_V_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_pix_tot_id_V_reg_561 : STD_LOGIC_VECTOR (4 downto 0);
    signal dub_pix_ch0_dest_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_pix_tot_dest_V_reg_566 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_4_fu_459_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_last_V_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_590 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_1_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state8 : STD_LOGIC;
    signal sum_pix1_ch0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_pix1_ch0_ce0 : STD_LOGIC;
    signal sum_pix1_ch0_we0 : STD_LOGIC;
    signal sum_pix1_ch0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix1_ch0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_pix1_ch0_ce1 : STD_LOGIC;
    signal sum_pix1_ch0_we1 : STD_LOGIC;
    signal sum_pix1_ch0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix1_ch0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix2_ch0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_pix2_ch0_ce0 : STD_LOGIC;
    signal sum_pix2_ch0_we0 : STD_LOGIC;
    signal sum_pix2_ch0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix2_ch0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_pix2_ch0_ce1 : STD_LOGIC;
    signal sum_pix2_ch0_we1 : STD_LOGIC;
    signal sum_pix2_ch0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix2_ch0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dub_pix_ch0_user_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dub_pix_ch0_user_V_ce0 : STD_LOGIC;
    signal dub_pix_ch0_user_V_we0 : STD_LOGIC;
    signal dub_pix_ch0_id_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dub_pix_ch0_id_V_ce0 : STD_LOGIC;
    signal dub_pix_ch0_id_V_we0 : STD_LOGIC;
    signal dub_pix_ch0_dest_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dub_pix_ch0_dest_V_ce0 : STD_LOGIC;
    signal dub_pix_ch0_dest_V_we0 : STD_LOGIC;
    signal i_reg_292 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal exitcond2_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_mid2_fu_378_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_417_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_fu_421_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component scurve_adder_sum_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component scurve_adder_dub_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component scurve_adder_dub_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component scurve_adder_dub_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component scurve_adder_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        N_ADDS : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    scurve_adder_CTRL_BUS_s_axi_U : component scurve_adder_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        N_ADDS => N_ADDS);

    sum_pix1_ch0_U : component scurve_adder_sum_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix1_ch0_address0,
        ce0 => sum_pix1_ch0_ce0,
        we0 => sum_pix1_ch0_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix1_ch0_q0,
        address1 => sum_pix1_ch0_address1,
        ce1 => sum_pix1_ch0_ce1,
        we1 => sum_pix1_ch0_we1,
        d1 => sum_pix1_ch0_d1,
        q1 => sum_pix1_ch0_q1);

    sum_pix2_ch0_U : component scurve_adder_sum_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix2_ch0_address0,
        ce0 => sum_pix2_ch0_ce0,
        we0 => sum_pix2_ch0_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix2_ch0_q0,
        address1 => sum_pix2_ch0_address1,
        ce1 => sum_pix2_ch0_ce1,
        we1 => sum_pix2_ch0_we1,
        d1 => sum_pix2_ch0_d1,
        q1 => sum_pix2_ch0_q1);

    dub_pix_ch0_user_V_U : component scurve_adder_dub_dEe
    generic map (
        DataWidth => 2,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dub_pix_ch0_user_V_address0,
        ce0 => dub_pix_ch0_user_V_ce0,
        we0 => dub_pix_ch0_user_V_we0,
        d0 => in_stream0_V_user_V_0_data_out,
        q0 => dub_pix_ch0_user_V_q0);

    dub_pix_ch0_id_V_U : component scurve_adder_dub_eOg
    generic map (
        DataWidth => 5,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dub_pix_ch0_id_V_address0,
        ce0 => dub_pix_ch0_id_V_ce0,
        we0 => dub_pix_ch0_id_V_we0,
        d0 => in_stream0_V_id_V_0_data_out,
        q0 => dub_pix_ch0_id_V_q0);

    dub_pix_ch0_dest_V_U : component scurve_adder_dub_fYi
    generic map (
        DataWidth => 6,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dub_pix_ch0_dest_V_address0,
        ce0 => dub_pix_ch0_dest_V_ce0,
        we0 => dub_pix_ch0_dest_V_we0,
        d0 => in_stream0_V_dest_V_0_data_out,
        q0 => dub_pix_ch0_dest_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream0_V_data_V_0_ack_out = ap_const_logic_1) and (in_stream0_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        in_stream0_V_data_V_0_sel_rd <= not(in_stream0_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream0_V_data_V_0_ack_in = ap_const_logic_1) and (in_stream0_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        in_stream0_V_data_V_0_sel_wr <= not(in_stream0_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream0_V_data_V_0_state = ap_const_lv2_2) and (in_stream0_V_data_V_0_vld_in = ap_const_logic_0)) or ((in_stream0_V_data_V_0_state = ap_const_lv2_3) and (in_stream0_V_data_V_0_vld_in = ap_const_logic_0) and (in_stream0_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream0_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream0_V_data_V_0_state = ap_const_lv2_1) and (in_stream0_V_data_V_0_ack_out = ap_const_logic_0)) or ((in_stream0_V_data_V_0_state = ap_const_lv2_3) and (in_stream0_V_data_V_0_ack_out = ap_const_logic_0) and (in_stream0_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream0_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream0_V_data_V_0_vld_in = ap_const_logic_0) and (in_stream0_V_data_V_0_ack_out = ap_const_logic_1))) and not(((in_stream0_V_data_V_0_ack_out = ap_const_logic_0) and (in_stream0_V_data_V_0_vld_in = ap_const_logic_1))) and (in_stream0_V_data_V_0_state = ap_const_lv2_3)) or ((in_stream0_V_data_V_0_state = ap_const_lv2_1) and (in_stream0_V_data_V_0_ack_out = ap_const_logic_1)) or ((in_stream0_V_data_V_0_state = ap_const_lv2_2) and (in_stream0_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream0_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream0_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream0_V_dest_V_0_ack_out = ap_const_logic_1) and (in_stream0_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        in_stream0_V_dest_V_0_sel_rd <= not(in_stream0_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream0_V_dest_V_0_ack_in = ap_const_logic_1) and (in_stream0_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        in_stream0_V_dest_V_0_sel_wr <= not(in_stream0_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream0_V_dest_V_0_state = ap_const_lv2_2) and (in_stream0_V_dest_V_0_vld_in = ap_const_logic_0)) or ((in_stream0_V_dest_V_0_state = ap_const_lv2_3) and (in_stream0_V_dest_V_0_vld_in = ap_const_logic_0) and (in_stream0_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream0_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream0_V_dest_V_0_state = ap_const_lv2_1) and (in_stream0_V_dest_V_0_ack_out = ap_const_logic_0)) or ((in_stream0_V_dest_V_0_state = ap_const_lv2_3) and (in_stream0_V_dest_V_0_ack_out = ap_const_logic_0) and (in_stream0_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream0_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream0_V_dest_V_0_vld_in = ap_const_logic_0) and (in_stream0_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((in_stream0_V_dest_V_0_ack_out = ap_const_logic_0) and (in_stream0_V_dest_V_0_vld_in = ap_const_logic_1))) and (in_stream0_V_dest_V_0_state = ap_const_lv2_3)) or ((in_stream0_V_dest_V_0_state = ap_const_lv2_1) and (in_stream0_V_dest_V_0_ack_out = ap_const_logic_1)) or ((in_stream0_V_dest_V_0_state = ap_const_lv2_2) and (in_stream0_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream0_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream0_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream0_V_id_V_0_ack_out = ap_const_logic_1) and (in_stream0_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        in_stream0_V_id_V_0_sel_rd <= not(in_stream0_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream0_V_id_V_0_ack_in = ap_const_logic_1) and (in_stream0_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        in_stream0_V_id_V_0_sel_wr <= not(in_stream0_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream0_V_id_V_0_state = ap_const_lv2_2) and (in_stream0_V_id_V_0_vld_in = ap_const_logic_0)) or ((in_stream0_V_id_V_0_state = ap_const_lv2_3) and (in_stream0_V_id_V_0_vld_in = ap_const_logic_0) and (in_stream0_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream0_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream0_V_id_V_0_state = ap_const_lv2_1) and (in_stream0_V_id_V_0_ack_out = ap_const_logic_0)) or ((in_stream0_V_id_V_0_state = ap_const_lv2_3) and (in_stream0_V_id_V_0_ack_out = ap_const_logic_0) and (in_stream0_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream0_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream0_V_id_V_0_vld_in = ap_const_logic_0) and (in_stream0_V_id_V_0_ack_out = ap_const_logic_1))) and not(((in_stream0_V_id_V_0_ack_out = ap_const_logic_0) and (in_stream0_V_id_V_0_vld_in = ap_const_logic_1))) and (in_stream0_V_id_V_0_state = ap_const_lv2_3)) or ((in_stream0_V_id_V_0_state = ap_const_lv2_1) and (in_stream0_V_id_V_0_ack_out = ap_const_logic_1)) or ((in_stream0_V_id_V_0_state = ap_const_lv2_2) and (in_stream0_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream0_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream0_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream0_V_user_V_0_ack_out = ap_const_logic_1) and (in_stream0_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        in_stream0_V_user_V_0_sel_rd <= not(in_stream0_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream0_V_user_V_0_ack_in = ap_const_logic_1) and (in_stream0_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        in_stream0_V_user_V_0_sel_wr <= not(in_stream0_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream0_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream0_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream0_V_user_V_0_state = ap_const_lv2_2) and (in_stream0_V_user_V_0_vld_in = ap_const_logic_0)) or ((in_stream0_V_user_V_0_state = ap_const_lv2_3) and (in_stream0_V_user_V_0_vld_in = ap_const_logic_0) and (in_stream0_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream0_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream0_V_user_V_0_state = ap_const_lv2_1) and (in_stream0_V_user_V_0_ack_out = ap_const_logic_0)) or ((in_stream0_V_user_V_0_state = ap_const_lv2_3) and (in_stream0_V_user_V_0_ack_out = ap_const_logic_0) and (in_stream0_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream0_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream0_V_user_V_0_vld_in = ap_const_logic_0) and (in_stream0_V_user_V_0_ack_out = ap_const_logic_1))) and not(((in_stream0_V_user_V_0_ack_out = ap_const_logic_0) and (in_stream0_V_user_V_0_vld_in = ap_const_logic_1))) and (in_stream0_V_user_V_0_state = ap_const_lv2_3)) or ((in_stream0_V_user_V_0_state = ap_const_lv2_1) and (in_stream0_V_user_V_0_ack_out = ap_const_logic_1)) or ((in_stream0_V_user_V_0_state = ap_const_lv2_2) and (in_stream0_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream0_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream0_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_data_V_1_ack_out = ap_const_logic_1) and (out_stream_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_data_V_1_sel_rd <= not(out_stream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_data_V_1_ack_in = ap_const_logic_1) and (out_stream_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_data_V_1_sel_wr <= not(out_stream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_data_V_1_state = ap_const_lv2_2) and (out_stream_V_data_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_data_V_1_state = ap_const_lv2_3) and (out_stream_V_data_V_1_vld_in = ap_const_logic_0) and (out_stream_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_data_V_1_state = ap_const_lv2_1) and (out_stream_V_data_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_data_V_1_state = ap_const_lv2_3) and (out_stream_V_data_V_1_ack_out = ap_const_logic_0) and (out_stream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_data_V_1_vld_in = ap_const_logic_0) and (out_stream_V_data_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_data_V_1_ack_out = ap_const_logic_0) and (out_stream_V_data_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_data_V_1_state = ap_const_lv2_3)) or ((out_stream_V_data_V_1_state = ap_const_lv2_1) and (out_stream_V_data_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_data_V_1_state = ap_const_lv2_2) and (out_stream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_dest_V_1_ack_out = ap_const_logic_1) and (out_stream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_dest_V_1_sel_rd <= not(out_stream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_dest_V_1_ack_in = ap_const_logic_1) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_dest_V_1_sel_wr <= not(out_stream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_dest_V_1_state = ap_const_lv2_2) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_dest_V_1_state = ap_const_lv2_3) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_0) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_dest_V_1_state = ap_const_lv2_1) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_dest_V_1_state = ap_const_lv2_3) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_dest_V_1_vld_in = ap_const_logic_0) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_dest_V_1_state = ap_const_lv2_3)) or ((out_stream_V_dest_V_1_state = ap_const_lv2_1) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_dest_V_1_state = ap_const_lv2_2) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_id_V_1_ack_out = ap_const_logic_1) and (out_stream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_id_V_1_sel_rd <= not(out_stream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_id_V_1_ack_in = ap_const_logic_1) and (out_stream_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_id_V_1_sel_wr <= not(out_stream_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_id_V_1_state = ap_const_lv2_2) and (out_stream_V_id_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_id_V_1_state = ap_const_lv2_3) and (out_stream_V_id_V_1_vld_in = ap_const_logic_0) and (out_stream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_id_V_1_state = ap_const_lv2_1) and (out_stream_V_id_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_id_V_1_state = ap_const_lv2_3) and (out_stream_V_id_V_1_ack_out = ap_const_logic_0) and (out_stream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_id_V_1_vld_in = ap_const_logic_0) and (out_stream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_id_V_1_ack_out = ap_const_logic_0) and (out_stream_V_id_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_id_V_1_state = ap_const_lv2_3)) or ((out_stream_V_id_V_1_state = ap_const_lv2_1) and (out_stream_V_id_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_id_V_1_state = ap_const_lv2_2) and (out_stream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_keep_V_1_ack_out = ap_const_logic_1) and (out_stream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_keep_V_1_sel_rd <= not(out_stream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_keep_V_1_state = ap_const_lv2_2) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_keep_V_1_state = ap_const_lv2_3) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_0) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_keep_V_1_state = ap_const_lv2_1) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_keep_V_1_state = ap_const_lv2_3) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_keep_V_1_vld_in = ap_const_logic_0) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_keep_V_1_state = ap_const_lv2_3)) or ((out_stream_V_keep_V_1_state = ap_const_lv2_1) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_keep_V_1_state = ap_const_lv2_2) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_last_V_1_ack_out = ap_const_logic_1) and (out_stream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_last_V_1_sel_rd <= not(out_stream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_last_V_1_ack_in = ap_const_logic_1) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_last_V_1_sel_wr <= not(out_stream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_last_V_1_state = ap_const_lv2_2) and (out_stream_V_last_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_V_last_V_1_vld_in = ap_const_logic_0) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_last_V_1_state = ap_const_lv2_1) and (out_stream_V_last_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_V_last_V_1_ack_out = ap_const_logic_0) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_last_V_1_vld_in = ap_const_logic_0) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_last_V_1_ack_out = ap_const_logic_0) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_last_V_1_state = ap_const_lv2_3)) or ((out_stream_V_last_V_1_state = ap_const_lv2_1) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_last_V_1_state = ap_const_lv2_2) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_strb_V_1_ack_out = ap_const_logic_1) and (out_stream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_strb_V_1_sel_rd <= not(out_stream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_strb_V_1_state = ap_const_lv2_2) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_strb_V_1_state = ap_const_lv2_3) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_0) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_strb_V_1_state = ap_const_lv2_1) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_strb_V_1_state = ap_const_lv2_3) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_strb_V_1_vld_in = ap_const_logic_0) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_strb_V_1_state = ap_const_lv2_3)) or ((out_stream_V_strb_V_1_state = ap_const_lv2_1) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_strb_V_1_state = ap_const_lv2_2) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_user_V_1_ack_out = ap_const_logic_1) and (out_stream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_user_V_1_sel_rd <= not(out_stream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_user_V_1_ack_in = ap_const_logic_1) and (out_stream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_user_V_1_sel_wr <= not(out_stream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_user_V_1_state = ap_const_lv2_2) and (out_stream_V_user_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_user_V_1_state = ap_const_lv2_3) and (out_stream_V_user_V_1_vld_in = ap_const_logic_0) and (out_stream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_user_V_1_state = ap_const_lv2_1) and (out_stream_V_user_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_user_V_1_state = ap_const_lv2_3) and (out_stream_V_user_V_1_ack_out = ap_const_logic_0) and (out_stream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_user_V_1_vld_in = ap_const_logic_0) and (out_stream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_user_V_1_ack_out = ap_const_logic_0) and (out_stream_V_user_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_user_V_1_state = ap_const_lv2_3)) or ((out_stream_V_user_V_1_state = ap_const_lv2_1) and (out_stream_V_user_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_user_V_1_state = ap_const_lv2_2) and (out_stream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_fu_361_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_1_reg_314 <= i_5_fu_392_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_314 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_2_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_2_reg_325 <= ap_const_lv6_0;
            elsif (((exitcond_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_2_reg_325 <= i_4_fu_459_p2;
            end if; 
        end if;
    end process;

    i_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_292 <= ap_const_lv6_0;
            elsif (((exitcond1_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_292 <= i_3_fu_342_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_fu_361_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten_reg_303 <= indvar_flatten_next_fu_366_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_303 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                N_ADDS_read_reg_490 <= N_ADDS;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten_reg_508 <= exitcond_flatten_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                exitcond_reg_571 <= exitcond_fu_453_p2;
                exitcond_reg_571_pp2_iter1_reg <= exitcond_reg_571;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream0_V_data_V_0_load_A = ap_const_logic_1)) then
                in_stream0_V_data_V_0_payload_A <= in_stream0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream0_V_data_V_0_load_B = ap_const_logic_1)) then
                in_stream0_V_data_V_0_payload_B <= in_stream0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream0_V_dest_V_0_load_A = ap_const_logic_1)) then
                in_stream0_V_dest_V_0_payload_A <= in_stream0_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream0_V_dest_V_0_load_B = ap_const_logic_1)) then
                in_stream0_V_dest_V_0_payload_B <= in_stream0_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream0_V_id_V_0_load_A = ap_const_logic_1)) then
                in_stream0_V_id_V_0_payload_A <= in_stream0_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream0_V_id_V_0_load_B = ap_const_logic_1)) then
                in_stream0_V_id_V_0_payload_B <= in_stream0_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream0_V_user_V_0_load_A = ap_const_logic_1)) then
                in_stream0_V_user_V_0_payload_A <= in_stream0_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream0_V_user_V_0_load_B = ap_const_logic_1)) then
                in_stream0_V_user_V_0_payload_B <= in_stream0_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_data_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_data_V_1_payload_A <= tmp_data_V_1_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_data_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_data_V_1_payload_B <= tmp_data_V_1_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_dest_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_dest_V_1_payload_A <= sum_pix_tot_dest_V_reg_566;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_dest_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_dest_V_1_payload_B <= sum_pix_tot_dest_V_reg_566;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_id_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_id_V_1_payload_A <= sum_pix_tot_id_V_reg_561;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_id_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_id_V_1_payload_B <= sum_pix_tot_id_V_reg_561;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_last_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_last_V_1_payload_A <= tmp_last_V_reg_590;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_last_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_last_V_1_payload_B <= tmp_last_V_reg_590;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_user_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_user_V_1_payload_A <= sum_pix_tot_user_V_reg_556;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_user_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_user_V_1_payload_B <= sum_pix_tot_user_V_reg_556;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                sum_pix1_ch0_addr_2_reg_524 <= tmp_9_fu_386_p1(5 - 1 downto 0);
                sum_pix2_ch0_addr_2_reg_530 <= tmp_9_fu_386_p1(5 - 1 downto 0);
                    tmp_9_reg_517(5 downto 0) <= tmp_9_fu_386_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sum_pix_tot_dest_V_reg_566 <= dub_pix_ch0_dest_V_q0;
                sum_pix_tot_id_V_reg_561 <= dub_pix_ch0_id_V_q0;
                sum_pix_tot_user_V_reg_556 <= dub_pix_ch0_user_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_last_V_reg_590 <= tmp_last_V_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_reg_503(12 downto 5) <= tmp_fu_354_p3(12 downto 5);
            end if;
        end if;
    end process;
    tmp_reg_503(4 downto 0) <= "00000";
    tmp_9_reg_517(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, out_stream_V_data_V_1_ack_in, out_stream_V_keep_V_1_ack_in, out_stream_V_strb_V_1_ack_in, out_stream_V_user_V_1_ack_in, out_stream_V_last_V_1_ack_in, out_stream_V_id_V_1_ack_in, out_stream_V_dest_V_1_ack_in, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_CS_fsm_state2, exitcond_flatten_fu_361_p2, ap_enable_reg_pp1_iter0, exitcond_fu_453_p2, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, exitcond1_fu_336_p2, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((exitcond_flatten_fu_361_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((exitcond_flatten_fu_361_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (exitcond_fu_453_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (exitcond_fu_453_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(in_stream0_V_data_V_0_vld_out, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_508)
    begin
                ap_block_pp1_stage0_11001 <= ((exitcond_flatten_reg_508 = ap_const_lv1_0) and (in_stream0_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(in_stream0_V_data_V_0_vld_out, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_508)
    begin
                ap_block_pp1_stage0_subdone <= ((exitcond_flatten_reg_508 = ap_const_lv1_0) and (in_stream0_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp2_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp2_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state10_io_assign_proc : process(out_stream_V_data_V_1_ack_in, exitcond_reg_571_pp2_iter1_reg)
    begin
                ap_block_state10_io <= ((exitcond_reg_571_pp2_iter1_reg = ap_const_lv1_0) and (out_stream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state10_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_assign_proc : process(out_stream_V_data_V_1_ack_in, out_stream_V_keep_V_1_ack_in, out_stream_V_strb_V_1_ack_in, out_stream_V_user_V_1_ack_in, out_stream_V_last_V_1_ack_in, out_stream_V_id_V_1_ack_in, out_stream_V_dest_V_1_ack_in)
    begin
                ap_block_state11 <= ((out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp1_stage0_iter1_assign_proc : process(in_stream0_V_data_V_0_vld_out, exitcond_flatten_reg_508)
    begin
                ap_block_state5_pp1_stage0_iter1 <= ((exitcond_flatten_reg_508 = ap_const_lv1_0) and (in_stream0_V_data_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(out_stream_V_data_V_1_ack_in, exitcond_reg_571)
    begin
                ap_block_state9_io <= ((exitcond_reg_571 = ap_const_lv1_0) and (out_stream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state9_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state4_assign_proc : process(exitcond_flatten_fu_361_p2)
    begin
        if ((exitcond_flatten_fu_361_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state8_assign_proc : process(exitcond_fu_453_p2)
    begin
        if ((exitcond_fu_453_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(out_stream_V_data_V_1_ack_in, out_stream_V_keep_V_1_ack_in, out_stream_V_strb_V_1_ack_in, out_stream_V_user_V_1_ack_in, out_stream_V_last_V_1_ack_in, out_stream_V_id_V_1_ack_in, out_stream_V_dest_V_1_ack_in, ap_CS_fsm_state11)
    begin
        if ((not(((out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_stream_V_data_V_1_ack_in, out_stream_V_keep_V_1_ack_in, out_stream_V_strb_V_1_ack_in, out_stream_V_user_V_1_ack_in, out_stream_V_last_V_1_ack_in, out_stream_V_id_V_1_ack_in, out_stream_V_dest_V_1_ack_in, ap_CS_fsm_state11)
    begin
        if ((not(((out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    dub_pix_ch0_dest_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_9_reg_517, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dub_pix_ch0_dest_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dub_pix_ch0_dest_V_address0 <= tmp_9_reg_517(5 - 1 downto 0);
        else 
            dub_pix_ch0_dest_V_address0 <= "XXXXX";
        end if; 
    end process;


    dub_pix_ch0_dest_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            dub_pix_ch0_dest_V_ce0 <= ap_const_logic_1;
        else 
            dub_pix_ch0_dest_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_ch0_dest_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_508, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_508 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dub_pix_ch0_dest_V_we0 <= ap_const_logic_1;
        else 
            dub_pix_ch0_dest_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_ch0_id_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_9_reg_517, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dub_pix_ch0_id_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dub_pix_ch0_id_V_address0 <= tmp_9_reg_517(5 - 1 downto 0);
        else 
            dub_pix_ch0_id_V_address0 <= "XXXXX";
        end if; 
    end process;


    dub_pix_ch0_id_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            dub_pix_ch0_id_V_ce0 <= ap_const_logic_1;
        else 
            dub_pix_ch0_id_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_ch0_id_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_508, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_508 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dub_pix_ch0_id_V_we0 <= ap_const_logic_1;
        else 
            dub_pix_ch0_id_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_ch0_user_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_9_reg_517, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dub_pix_ch0_user_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dub_pix_ch0_user_V_address0 <= tmp_9_reg_517(5 - 1 downto 0);
        else 
            dub_pix_ch0_user_V_address0 <= "XXXXX";
        end if; 
    end process;


    dub_pix_ch0_user_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            dub_pix_ch0_user_V_ce0 <= ap_const_logic_1;
        else 
            dub_pix_ch0_user_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_ch0_user_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_508, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_508 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dub_pix_ch0_user_V_we0 <= ap_const_logic_1;
        else 
            dub_pix_ch0_user_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_336_p2 <= "1" when (i_reg_292 = ap_const_lv6_20) else "0";
    exitcond2_fu_372_p2 <= "1" when (i_1_reg_314 = ap_const_lv6_20) else "0";
    exitcond_flatten_fu_361_p2 <= "1" when (indvar_flatten_reg_303 = tmp_reg_503) else "0";
    exitcond_fu_453_p2 <= "1" when (i_2_reg_325 = ap_const_lv6_20) else "0";
    i_1_mid2_fu_378_p3 <= 
        ap_const_lv6_0 when (exitcond2_fu_372_p2(0) = '1') else 
        i_1_reg_314;
    i_3_fu_342_p2 <= std_logic_vector(unsigned(i_reg_292) + unsigned(ap_const_lv6_1));
    i_4_fu_459_p2 <= std_logic_vector(unsigned(i_2_reg_325) + unsigned(ap_const_lv6_1));
    i_5_fu_392_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(i_1_mid2_fu_378_p3));

    in_stream0_TDATA_blk_n_assign_proc : process(in_stream0_V_data_V_0_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten_reg_508)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond_flatten_reg_508 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            in_stream0_TDATA_blk_n <= in_stream0_V_data_V_0_state(0);
        else 
            in_stream0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream0_TREADY <= in_stream0_V_dest_V_0_state(1);
    in_stream0_V_data_V_0_ack_in <= in_stream0_V_data_V_0_state(1);

    in_stream0_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_508, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_508 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            in_stream0_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream0_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream0_V_data_V_0_data_out_assign_proc : process(in_stream0_V_data_V_0_payload_A, in_stream0_V_data_V_0_payload_B, in_stream0_V_data_V_0_sel)
    begin
        if ((in_stream0_V_data_V_0_sel = ap_const_logic_1)) then 
            in_stream0_V_data_V_0_data_out <= in_stream0_V_data_V_0_payload_B;
        else 
            in_stream0_V_data_V_0_data_out <= in_stream0_V_data_V_0_payload_A;
        end if; 
    end process;

    in_stream0_V_data_V_0_load_A <= (in_stream0_V_data_V_0_state_cmp_full and not(in_stream0_V_data_V_0_sel_wr));
    in_stream0_V_data_V_0_load_B <= (in_stream0_V_data_V_0_state_cmp_full and in_stream0_V_data_V_0_sel_wr);
    in_stream0_V_data_V_0_sel <= in_stream0_V_data_V_0_sel_rd;
    in_stream0_V_data_V_0_state_cmp_full <= '0' when (in_stream0_V_data_V_0_state = ap_const_lv2_1) else '1';
    in_stream0_V_data_V_0_vld_in <= in_stream0_TVALID;
    in_stream0_V_data_V_0_vld_out <= in_stream0_V_data_V_0_state(0);
    in_stream0_V_dest_V_0_ack_in <= in_stream0_V_dest_V_0_state(1);

    in_stream0_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_508, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_508 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            in_stream0_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream0_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream0_V_dest_V_0_data_out_assign_proc : process(in_stream0_V_dest_V_0_payload_A, in_stream0_V_dest_V_0_payload_B, in_stream0_V_dest_V_0_sel)
    begin
        if ((in_stream0_V_dest_V_0_sel = ap_const_logic_1)) then 
            in_stream0_V_dest_V_0_data_out <= in_stream0_V_dest_V_0_payload_B;
        else 
            in_stream0_V_dest_V_0_data_out <= in_stream0_V_dest_V_0_payload_A;
        end if; 
    end process;

    in_stream0_V_dest_V_0_load_A <= (in_stream0_V_dest_V_0_state_cmp_full and not(in_stream0_V_dest_V_0_sel_wr));
    in_stream0_V_dest_V_0_load_B <= (in_stream0_V_dest_V_0_state_cmp_full and in_stream0_V_dest_V_0_sel_wr);
    in_stream0_V_dest_V_0_sel <= in_stream0_V_dest_V_0_sel_rd;
    in_stream0_V_dest_V_0_state_cmp_full <= '0' when (in_stream0_V_dest_V_0_state = ap_const_lv2_1) else '1';
    in_stream0_V_dest_V_0_vld_in <= in_stream0_TVALID;
    in_stream0_V_dest_V_0_vld_out <= in_stream0_V_dest_V_0_state(0);
    in_stream0_V_id_V_0_ack_in <= in_stream0_V_id_V_0_state(1);

    in_stream0_V_id_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_508, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_508 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            in_stream0_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream0_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream0_V_id_V_0_data_out_assign_proc : process(in_stream0_V_id_V_0_payload_A, in_stream0_V_id_V_0_payload_B, in_stream0_V_id_V_0_sel)
    begin
        if ((in_stream0_V_id_V_0_sel = ap_const_logic_1)) then 
            in_stream0_V_id_V_0_data_out <= in_stream0_V_id_V_0_payload_B;
        else 
            in_stream0_V_id_V_0_data_out <= in_stream0_V_id_V_0_payload_A;
        end if; 
    end process;

    in_stream0_V_id_V_0_load_A <= (in_stream0_V_id_V_0_state_cmp_full and not(in_stream0_V_id_V_0_sel_wr));
    in_stream0_V_id_V_0_load_B <= (in_stream0_V_id_V_0_state_cmp_full and in_stream0_V_id_V_0_sel_wr);
    in_stream0_V_id_V_0_sel <= in_stream0_V_id_V_0_sel_rd;
    in_stream0_V_id_V_0_state_cmp_full <= '0' when (in_stream0_V_id_V_0_state = ap_const_lv2_1) else '1';
    in_stream0_V_id_V_0_vld_in <= in_stream0_TVALID;
    in_stream0_V_id_V_0_vld_out <= in_stream0_V_id_V_0_state(0);
    in_stream0_V_user_V_0_ack_in <= in_stream0_V_user_V_0_state(1);

    in_stream0_V_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_508, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_508 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            in_stream0_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream0_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream0_V_user_V_0_data_out_assign_proc : process(in_stream0_V_user_V_0_payload_A, in_stream0_V_user_V_0_payload_B, in_stream0_V_user_V_0_sel)
    begin
        if ((in_stream0_V_user_V_0_sel = ap_const_logic_1)) then 
            in_stream0_V_user_V_0_data_out <= in_stream0_V_user_V_0_payload_B;
        else 
            in_stream0_V_user_V_0_data_out <= in_stream0_V_user_V_0_payload_A;
        end if; 
    end process;

    in_stream0_V_user_V_0_load_A <= (in_stream0_V_user_V_0_state_cmp_full and not(in_stream0_V_user_V_0_sel_wr));
    in_stream0_V_user_V_0_load_B <= (in_stream0_V_user_V_0_state_cmp_full and in_stream0_V_user_V_0_sel_wr);
    in_stream0_V_user_V_0_sel <= in_stream0_V_user_V_0_sel_rd;
    in_stream0_V_user_V_0_state_cmp_full <= '0' when (in_stream0_V_user_V_0_state = ap_const_lv2_1) else '1';
    in_stream0_V_user_V_0_vld_in <= in_stream0_TVALID;
    in_stream0_V_user_V_0_vld_out <= in_stream0_V_user_V_0_state(0);
    indvar_flatten_next_fu_366_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_303) + unsigned(ap_const_lv13_1));
    out_stream_TDATA <= out_stream_V_data_V_1_data_out;

    out_stream_TDATA_blk_n_assign_proc : process(out_stream_V_data_V_1_state, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond_reg_571, ap_enable_reg_pp2_iter2, exitcond_reg_571_pp2_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond_reg_571_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond_reg_571 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            out_stream_TDATA_blk_n <= out_stream_V_data_V_1_state(1);
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDEST <= out_stream_V_dest_V_1_data_out;
    out_stream_TID <= out_stream_V_id_V_1_data_out;
    out_stream_TKEEP <= out_stream_V_keep_V_1_data_out;
    out_stream_TLAST <= out_stream_V_last_V_1_data_out;
    out_stream_TSTRB <= out_stream_V_strb_V_1_data_out;
    out_stream_TUSER <= out_stream_V_user_V_1_data_out;
    out_stream_TVALID <= out_stream_V_dest_V_1_state(0);
    out_stream_V_data_V_1_ack_in <= out_stream_V_data_V_1_state(1);
    out_stream_V_data_V_1_ack_out <= out_stream_TREADY;

    out_stream_V_data_V_1_data_out_assign_proc : process(out_stream_V_data_V_1_payload_A, out_stream_V_data_V_1_payload_B, out_stream_V_data_V_1_sel)
    begin
        if ((out_stream_V_data_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_data_V_1_data_out <= out_stream_V_data_V_1_payload_B;
        else 
            out_stream_V_data_V_1_data_out <= out_stream_V_data_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_data_V_1_load_A <= (out_stream_V_data_V_1_state_cmp_full and not(out_stream_V_data_V_1_sel_wr));
    out_stream_V_data_V_1_load_B <= (out_stream_V_data_V_1_state_cmp_full and out_stream_V_data_V_1_sel_wr);
    out_stream_V_data_V_1_sel <= out_stream_V_data_V_1_sel_rd;
    out_stream_V_data_V_1_state_cmp_full <= '0' when (out_stream_V_data_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond_reg_571, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond_reg_571 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_data_V_1_vld_out <= out_stream_V_data_V_1_state(0);
    out_stream_V_dest_V_1_ack_in <= out_stream_V_dest_V_1_state(1);
    out_stream_V_dest_V_1_ack_out <= out_stream_TREADY;

    out_stream_V_dest_V_1_data_out_assign_proc : process(out_stream_V_dest_V_1_payload_A, out_stream_V_dest_V_1_payload_B, out_stream_V_dest_V_1_sel)
    begin
        if ((out_stream_V_dest_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_dest_V_1_data_out <= out_stream_V_dest_V_1_payload_B;
        else 
            out_stream_V_dest_V_1_data_out <= out_stream_V_dest_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_dest_V_1_load_A <= (out_stream_V_dest_V_1_state_cmp_full and not(out_stream_V_dest_V_1_sel_wr));
    out_stream_V_dest_V_1_load_B <= (out_stream_V_dest_V_1_state_cmp_full and out_stream_V_dest_V_1_sel_wr);
    out_stream_V_dest_V_1_sel <= out_stream_V_dest_V_1_sel_rd;
    out_stream_V_dest_V_1_state_cmp_full <= '0' when (out_stream_V_dest_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond_reg_571, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond_reg_571 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_dest_V_1_vld_out <= out_stream_V_dest_V_1_state(0);
    out_stream_V_id_V_1_ack_in <= out_stream_V_id_V_1_state(1);
    out_stream_V_id_V_1_ack_out <= out_stream_TREADY;

    out_stream_V_id_V_1_data_out_assign_proc : process(out_stream_V_id_V_1_payload_A, out_stream_V_id_V_1_payload_B, out_stream_V_id_V_1_sel)
    begin
        if ((out_stream_V_id_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_id_V_1_data_out <= out_stream_V_id_V_1_payload_B;
        else 
            out_stream_V_id_V_1_data_out <= out_stream_V_id_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_id_V_1_load_A <= (out_stream_V_id_V_1_state_cmp_full and not(out_stream_V_id_V_1_sel_wr));
    out_stream_V_id_V_1_load_B <= (out_stream_V_id_V_1_state_cmp_full and out_stream_V_id_V_1_sel_wr);
    out_stream_V_id_V_1_sel <= out_stream_V_id_V_1_sel_rd;
    out_stream_V_id_V_1_state_cmp_full <= '0' when (out_stream_V_id_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond_reg_571, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond_reg_571 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_id_V_1_vld_out <= out_stream_V_id_V_1_state(0);
    out_stream_V_keep_V_1_ack_in <= out_stream_V_keep_V_1_state(1);
    out_stream_V_keep_V_1_ack_out <= out_stream_TREADY;
    out_stream_V_keep_V_1_data_out <= ap_const_lv4_F;
    out_stream_V_keep_V_1_sel <= out_stream_V_keep_V_1_sel_rd;

    out_stream_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond_reg_571, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond_reg_571 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_keep_V_1_vld_out <= out_stream_V_keep_V_1_state(0);
    out_stream_V_last_V_1_ack_in <= out_stream_V_last_V_1_state(1);
    out_stream_V_last_V_1_ack_out <= out_stream_TREADY;

    out_stream_V_last_V_1_data_out_assign_proc : process(out_stream_V_last_V_1_payload_A, out_stream_V_last_V_1_payload_B, out_stream_V_last_V_1_sel)
    begin
        if ((out_stream_V_last_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_last_V_1_data_out <= out_stream_V_last_V_1_payload_B;
        else 
            out_stream_V_last_V_1_data_out <= out_stream_V_last_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_last_V_1_load_A <= (out_stream_V_last_V_1_state_cmp_full and not(out_stream_V_last_V_1_sel_wr));
    out_stream_V_last_V_1_load_B <= (out_stream_V_last_V_1_state_cmp_full and out_stream_V_last_V_1_sel_wr);
    out_stream_V_last_V_1_sel <= out_stream_V_last_V_1_sel_rd;
    out_stream_V_last_V_1_state_cmp_full <= '0' when (out_stream_V_last_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond_reg_571, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond_reg_571 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_last_V_1_vld_out <= out_stream_V_last_V_1_state(0);
    out_stream_V_strb_V_1_ack_in <= out_stream_V_strb_V_1_state(1);
    out_stream_V_strb_V_1_ack_out <= out_stream_TREADY;
    out_stream_V_strb_V_1_data_out <= ap_const_lv4_F;
    out_stream_V_strb_V_1_sel <= out_stream_V_strb_V_1_sel_rd;

    out_stream_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond_reg_571, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond_reg_571 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_strb_V_1_vld_out <= out_stream_V_strb_V_1_state(0);
    out_stream_V_user_V_1_ack_in <= out_stream_V_user_V_1_state(1);
    out_stream_V_user_V_1_ack_out <= out_stream_TREADY;

    out_stream_V_user_V_1_data_out_assign_proc : process(out_stream_V_user_V_1_payload_A, out_stream_V_user_V_1_payload_B, out_stream_V_user_V_1_sel)
    begin
        if ((out_stream_V_user_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_user_V_1_data_out <= out_stream_V_user_V_1_payload_B;
        else 
            out_stream_V_user_V_1_data_out <= out_stream_V_user_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_user_V_1_load_A <= (out_stream_V_user_V_1_state_cmp_full and not(out_stream_V_user_V_1_sel_wr));
    out_stream_V_user_V_1_load_B <= (out_stream_V_user_V_1_state_cmp_full and out_stream_V_user_V_1_sel_wr);
    out_stream_V_user_V_1_sel <= out_stream_V_user_V_1_sel_rd;
    out_stream_V_user_V_1_state_cmp_full <= '0' when (out_stream_V_user_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond_reg_571, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond_reg_571 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_user_V_1_vld_out <= out_stream_V_user_V_1_state(0);
    phitmp_fu_421_p4 <= in_stream0_V_data_V_0_data_out(15 downto 8);

    sum_pix1_ch0_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, tmp_9_fu_386_p1, tmp_1_fu_348_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix1_ch0_address0 <= tmp_9_fu_386_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix1_ch0_address0 <= tmp_1_fu_348_p1(5 - 1 downto 0);
        else 
            sum_pix1_ch0_address0 <= "XXXXX";
        end if; 
    end process;


    sum_pix1_ch0_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix1_ch0_addr_2_reg_524, ap_enable_reg_pp2_iter0, tmp_3_fu_465_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix1_ch0_address1 <= tmp_3_fu_465_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix1_ch0_address1 <= sum_pix1_ch0_addr_2_reg_524;
        else 
            sum_pix1_ch0_address1 <= "XXXXX";
        end if; 
    end process;


    sum_pix1_ch0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix1_ch0_ce0 <= ap_const_logic_1;
        else 
            sum_pix1_ch0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix1_ch0_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix1_ch0_ce1 <= ap_const_logic_1;
        else 
            sum_pix1_ch0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sum_pix1_ch0_d1 <= std_logic_vector(unsigned(tmp_6_fu_431_p1) + unsigned(sum_pix1_ch0_q0));

    sum_pix1_ch0_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_336_p2)
    begin
        if (((exitcond1_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix1_ch0_we0 <= ap_const_logic_1;
        else 
            sum_pix1_ch0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix1_ch0_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_508, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_508 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix1_ch0_we1 <= ap_const_logic_1;
        else 
            sum_pix1_ch0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_ch0_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, tmp_9_fu_386_p1, tmp_1_fu_348_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix2_ch0_address0 <= tmp_9_fu_386_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_pix2_ch0_address0 <= tmp_1_fu_348_p1(5 - 1 downto 0);
        else 
            sum_pix2_ch0_address0 <= "XXXXX";
        end if; 
    end process;


    sum_pix2_ch0_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, sum_pix2_ch0_addr_2_reg_530, ap_enable_reg_pp2_iter0, tmp_3_fu_465_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sum_pix2_ch0_address1 <= tmp_3_fu_465_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix2_ch0_address1 <= sum_pix2_ch0_addr_2_reg_530;
        else 
            sum_pix2_ch0_address1 <= "XXXXX";
        end if; 
    end process;


    sum_pix2_ch0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix2_ch0_ce0 <= ap_const_logic_1;
        else 
            sum_pix2_ch0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_ch0_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            sum_pix2_ch0_ce1 <= ap_const_logic_1;
        else 
            sum_pix2_ch0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sum_pix2_ch0_d1 <= std_logic_vector(unsigned(tmp_8_fu_442_p1) + unsigned(sum_pix2_ch0_q0));

    sum_pix2_ch0_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_336_p2)
    begin
        if (((exitcond1_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sum_pix2_ch0_we0 <= ap_const_logic_1;
        else 
            sum_pix2_ch0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_ch0_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_508, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_508 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sum_pix2_ch0_we1 <= ap_const_logic_1;
        else 
            sum_pix2_ch0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_477_p2 <= std_logic_vector(shift_left(unsigned(sum_pix2_ch0_q1),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    tmp_1_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_292),64));
    tmp_3_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_325),64));
    tmp_4_fu_417_p1 <= in_stream0_V_data_V_0_data_out(8 - 1 downto 0);
    tmp_6_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_417_p1),32));
    tmp_8_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_fu_421_p4),32));
    tmp_9_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_mid2_fu_378_p3),64));
    tmp_data_V_1_fu_483_p2 <= (tmp_11_fu_477_p2 or sum_pix1_ch0_q1);
    tmp_fu_354_p3 <= (N_ADDS_read_reg_490 & ap_const_lv5_0);
    tmp_last_V_fu_471_p2 <= "1" when (i_2_reg_325 = ap_const_lv6_1F) else "0";
end behav;
