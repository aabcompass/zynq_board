// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "scurve_adder.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic scurve_adder::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic scurve_adder::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> scurve_adder::ap_ST_fsm_state1 = "1";
const sc_lv<8> scurve_adder::ap_ST_fsm_state2 = "10";
const sc_lv<8> scurve_adder::ap_ST_fsm_state3 = "100";
const sc_lv<8> scurve_adder::ap_ST_fsm_pp1_stage0 = "1000";
const sc_lv<8> scurve_adder::ap_ST_fsm_state9 = "10000";
const sc_lv<8> scurve_adder::ap_ST_fsm_state10 = "100000";
const sc_lv<8> scurve_adder::ap_ST_fsm_pp2_stage0 = "1000000";
const sc_lv<8> scurve_adder::ap_ST_fsm_state15 = "10000000";
const sc_lv<32> scurve_adder::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool scurve_adder::ap_const_boolean_1 = true;
const sc_lv<1> scurve_adder::ap_const_lv1_0 = "0";
const sc_lv<1> scurve_adder::ap_const_lv1_1 = "1";
const sc_lv<2> scurve_adder::ap_const_lv2_0 = "00";
const sc_lv<2> scurve_adder::ap_const_lv2_2 = "10";
const sc_lv<2> scurve_adder::ap_const_lv2_3 = "11";
const sc_lv<2> scurve_adder::ap_const_lv2_1 = "1";
const sc_lv<32> scurve_adder::ap_const_lv32_3 = "11";
const bool scurve_adder::ap_const_boolean_0 = false;
const int scurve_adder::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> scurve_adder::ap_const_lv32_6 = "110";
const sc_lv<32> scurve_adder::ap_const_lv32_1 = "1";
const sc_lv<32> scurve_adder::ap_const_lv32_2 = "10";
const sc_lv<32> scurve_adder::ap_const_lv32_4 = "100";
const sc_lv<32> scurve_adder::ap_const_lv32_5 = "101";
const sc_lv<6> scurve_adder::ap_const_lv6_0 = "000000";
const sc_lv<21> scurve_adder::ap_const_lv21_0 = "000000000000000000000";
const sc_lv<64> scurve_adder::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> scurve_adder::ap_const_lv8_3F = "111111";
const sc_lv<6> scurve_adder::ap_const_lv6_20 = "100000";
const sc_lv<6> scurve_adder::ap_const_lv6_1 = "1";
const sc_lv<5> scurve_adder::ap_const_lv5_0 = "00000";
const sc_lv<21> scurve_adder::ap_const_lv21_1 = "1";
const sc_lv<32> scurve_adder::ap_const_lv32_8 = "1000";
const sc_lv<32> scurve_adder::ap_const_lv32_F = "1111";
const sc_lv<6> scurve_adder::ap_const_lv6_1F = "11111";
const sc_lv<32> scurve_adder::ap_const_lv32_7 = "111";

scurve_adder::scurve_adder(sc_module_name name) : sc_module(name), mVcdFile(0) {
    scurve_adder_CTRL_BUS_s_axi_U = new scurve_adder_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("scurve_adder_CTRL_BUS_s_axi_U");
    scurve_adder_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    scurve_adder_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    scurve_adder_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    scurve_adder_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    scurve_adder_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    scurve_adder_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    scurve_adder_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    scurve_adder_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    scurve_adder_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    scurve_adder_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    scurve_adder_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    scurve_adder_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    scurve_adder_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    scurve_adder_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    scurve_adder_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    scurve_adder_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    scurve_adder_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    scurve_adder_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    scurve_adder_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    scurve_adder_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    scurve_adder_CTRL_BUS_s_axi_U->ap_start(ap_start);
    scurve_adder_CTRL_BUS_s_axi_U->interrupt(interrupt);
    scurve_adder_CTRL_BUS_s_axi_U->ap_ready(ap_ready);
    scurve_adder_CTRL_BUS_s_axi_U->ap_done(ap_done);
    scurve_adder_CTRL_BUS_s_axi_U->ap_idle(ap_idle);
    scurve_adder_CTRL_BUS_s_axi_U->N_ADDS(N_ADDS);
    sum_pix1_ch0_U = new scurve_adder_sum_bkb("sum_pix1_ch0_U");
    sum_pix1_ch0_U->clk(ap_clk);
    sum_pix1_ch0_U->reset(ap_rst_n_inv);
    sum_pix1_ch0_U->address0(sum_pix1_ch0_address0);
    sum_pix1_ch0_U->ce0(sum_pix1_ch0_ce0);
    sum_pix1_ch0_U->we0(sum_pix1_ch0_we0);
    sum_pix1_ch0_U->d0(ap_var_for_const1);
    sum_pix1_ch0_U->q0(sum_pix1_ch0_q0);
    sum_pix1_ch0_U->address1(sum_pix1_ch0_address1);
    sum_pix1_ch0_U->ce1(sum_pix1_ch0_ce1);
    sum_pix1_ch0_U->we1(sum_pix1_ch0_we1);
    sum_pix1_ch0_U->d1(tmp_8_reg_563);
    sum_pix1_ch0_U->q1(sum_pix1_ch0_q1);
    sum_pix2_ch0_U = new scurve_adder_sum_bkb("sum_pix2_ch0_U");
    sum_pix2_ch0_U->clk(ap_clk);
    sum_pix2_ch0_U->reset(ap_rst_n_inv);
    sum_pix2_ch0_U->address0(sum_pix2_ch0_address0);
    sum_pix2_ch0_U->ce0(sum_pix2_ch0_ce0);
    sum_pix2_ch0_U->we0(sum_pix2_ch0_we0);
    sum_pix2_ch0_U->d0(ap_var_for_const1);
    sum_pix2_ch0_U->q0(sum_pix2_ch0_q0);
    sum_pix2_ch0_U->address1(sum_pix2_ch0_address1);
    sum_pix2_ch0_U->ce1(sum_pix2_ch0_ce1);
    sum_pix2_ch0_U->we1(sum_pix2_ch0_we1);
    sum_pix2_ch0_U->d1(tmp_11_reg_568);
    sum_pix2_ch0_U->q1(sum_pix2_ch0_q1);
    dub_pix_ch0_user_V_U = new scurve_adder_dub_dEe("dub_pix_ch0_user_V_U");
    dub_pix_ch0_user_V_U->clk(ap_clk);
    dub_pix_ch0_user_V_U->reset(ap_rst_n_inv);
    dub_pix_ch0_user_V_U->address0(dub_pix_ch0_user_V_address0);
    dub_pix_ch0_user_V_U->ce0(dub_pix_ch0_user_V_ce0);
    dub_pix_ch0_user_V_U->we0(dub_pix_ch0_user_V_we0);
    dub_pix_ch0_user_V_U->d0(in_stream0_V_user_V_0_data_out);
    dub_pix_ch0_user_V_U->q0(dub_pix_ch0_user_V_q0);
    dub_pix_ch0_id_V_U = new scurve_adder_dub_eOg("dub_pix_ch0_id_V_U");
    dub_pix_ch0_id_V_U->clk(ap_clk);
    dub_pix_ch0_id_V_U->reset(ap_rst_n_inv);
    dub_pix_ch0_id_V_U->address0(dub_pix_ch0_id_V_address0);
    dub_pix_ch0_id_V_U->ce0(dub_pix_ch0_id_V_ce0);
    dub_pix_ch0_id_V_U->we0(dub_pix_ch0_id_V_we0);
    dub_pix_ch0_id_V_U->d0(in_stream0_V_id_V_0_data_out);
    dub_pix_ch0_id_V_U->q0(dub_pix_ch0_id_V_q0);
    dub_pix_ch0_dest_V_U = new scurve_adder_dub_fYi("dub_pix_ch0_dest_V_U");
    dub_pix_ch0_dest_V_U->clk(ap_clk);
    dub_pix_ch0_dest_V_U->reset(ap_rst_n_inv);
    dub_pix_ch0_dest_V_U->address0(dub_pix_ch0_dest_V_address0);
    dub_pix_ch0_dest_V_U->ce0(dub_pix_ch0_dest_V_ce0);
    dub_pix_ch0_dest_V_U->we0(dub_pix_ch0_dest_V_we0);
    dub_pix_ch0_dest_V_U->d0(in_stream0_V_dest_V_0_data_out);
    dub_pix_ch0_dest_V_U->q0(dub_pix_ch0_dest_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( in_stream0_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_flatten_reg_522 );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( in_stream0_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_flatten_reg_522 );

    SC_METHOD(thread_ap_block_pp2_stage0);

    SC_METHOD(thread_ap_block_pp2_stage0_01001);

    SC_METHOD(thread_ap_block_pp2_stage0_11001);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_enable_reg_pp2_iter3 );
    sensitive << ( ap_block_state13_io );
    sensitive << ( ap_block_state14_io );

    SC_METHOD(thread_ap_block_pp2_stage0_subdone);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_enable_reg_pp2_iter3 );
    sensitive << ( ap_block_state13_io );
    sensitive << ( ap_block_state14_io );

    SC_METHOD(thread_ap_block_state11_pp2_stage0_iter0);

    SC_METHOD(thread_ap_block_state12_pp2_stage0_iter1);

    SC_METHOD(thread_ap_block_state13_io);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( exitcond_reg_603_pp2_iter1_reg );

    SC_METHOD(thread_ap_block_state13_pp2_stage0_iter2);

    SC_METHOD(thread_ap_block_state14_io);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( exitcond_reg_603_pp2_iter2_reg );

    SC_METHOD(thread_ap_block_state14_pp2_stage0_iter3);

    SC_METHOD(thread_ap_block_state15);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_keep_V_1_ack_in );
    sensitive << ( out_stream_V_strb_V_1_ack_in );
    sensitive << ( out_stream_V_user_V_1_ack_in );
    sensitive << ( out_stream_V_last_V_1_ack_in );
    sensitive << ( out_stream_V_id_V_1_ack_in );
    sensitive << ( out_stream_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_block_state4_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state5_pp1_stage0_iter1);
    sensitive << ( in_stream0_V_data_V_0_vld_out );
    sensitive << ( exitcond_flatten_reg_522 );

    SC_METHOD(thread_ap_block_state6_pp1_stage0_iter2);

    SC_METHOD(thread_ap_block_state7_pp1_stage0_iter3);

    SC_METHOD(thread_ap_block_state8_pp1_stage0_iter4);

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state4);
    sensitive << ( exitcond_flatten_fu_371_p2 );

    SC_METHOD(thread_ap_condition_pp2_exit_iter0_state11);
    sensitive << ( exitcond_fu_461_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_keep_V_1_ack_in );
    sensitive << ( out_stream_V_strb_V_1_ack_in );
    sensitive << ( out_stream_V_user_V_1_ack_in );
    sensitive << ( out_stream_V_last_V_1_ack_in );
    sensitive << ( out_stream_V_id_V_1_ack_in );
    sensitive << ( out_stream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_enable_pp2);
    sensitive << ( ap_idle_pp2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_enable_reg_pp1_iter4 );

    SC_METHOD(thread_ap_idle_pp2);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_enable_reg_pp2_iter3 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_enable_reg_pp2_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_keep_V_1_ack_in );
    sensitive << ( out_stream_V_strb_V_1_ack_in );
    sensitive << ( out_stream_V_user_V_1_ack_in );
    sensitive << ( out_stream_V_last_V_1_ack_in );
    sensitive << ( out_stream_V_id_V_1_ack_in );
    sensitive << ( out_stream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_dub_pix_ch0_dest_V_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_s_fu_402_p1 );

    SC_METHOD(thread_dub_pix_ch0_dest_V_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_dub_pix_ch0_dest_V_we0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_flatten_reg_522 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_dub_pix_ch0_id_V_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_s_fu_402_p1 );

    SC_METHOD(thread_dub_pix_ch0_id_V_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_dub_pix_ch0_id_V_we0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_flatten_reg_522 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_dub_pix_ch0_user_V_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_s_fu_402_p1 );

    SC_METHOD(thread_dub_pix_ch0_user_V_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_dub_pix_ch0_user_V_we0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_flatten_reg_522 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_exitcond1_fu_346_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_292 );

    SC_METHOD(thread_exitcond2_fu_382_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( i_1_reg_314 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( exitcond_flatten_fu_371_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_exitcond_flatten_fu_371_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( indvar_flatten_reg_303 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( tmp_reg_517 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_exitcond_fu_461_p2);
    sensitive << ( i_2_reg_325 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );

    SC_METHOD(thread_i_1_mid2_fu_388_p3);
    sensitive << ( i_1_reg_314 );
    sensitive << ( exitcond2_fu_382_p2 );

    SC_METHOD(thread_i_3_fu_352_p2);
    sensitive << ( i_reg_292 );

    SC_METHOD(thread_i_4_fu_467_p2);
    sensitive << ( i_2_reg_325 );

    SC_METHOD(thread_i_5_fu_396_p2);
    sensitive << ( i_1_mid2_fu_388_p3 );

    SC_METHOD(thread_in_stream0_TDATA_blk_n);
    sensitive << ( in_stream0_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( exitcond_flatten_reg_522 );

    SC_METHOD(thread_in_stream0_TREADY);
    sensitive << ( in_stream0_V_dest_V_0_state );

    SC_METHOD(thread_in_stream0_V_data_V_0_ack_in);
    sensitive << ( in_stream0_V_data_V_0_state );

    SC_METHOD(thread_in_stream0_V_data_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_flatten_reg_522 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_in_stream0_V_data_V_0_data_out);
    sensitive << ( in_stream0_V_data_V_0_payload_A );
    sensitive << ( in_stream0_V_data_V_0_payload_B );
    sensitive << ( in_stream0_V_data_V_0_sel );

    SC_METHOD(thread_in_stream0_V_data_V_0_load_A);
    sensitive << ( in_stream0_V_data_V_0_sel_wr );
    sensitive << ( in_stream0_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream0_V_data_V_0_load_B);
    sensitive << ( in_stream0_V_data_V_0_sel_wr );
    sensitive << ( in_stream0_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream0_V_data_V_0_sel);
    sensitive << ( in_stream0_V_data_V_0_sel_rd );

    SC_METHOD(thread_in_stream0_V_data_V_0_state_cmp_full);
    sensitive << ( in_stream0_V_data_V_0_state );

    SC_METHOD(thread_in_stream0_V_data_V_0_vld_in);
    sensitive << ( in_stream0_TVALID );

    SC_METHOD(thread_in_stream0_V_data_V_0_vld_out);
    sensitive << ( in_stream0_V_data_V_0_state );

    SC_METHOD(thread_in_stream0_V_dest_V_0_ack_in);
    sensitive << ( in_stream0_V_dest_V_0_state );

    SC_METHOD(thread_in_stream0_V_dest_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_flatten_reg_522 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_in_stream0_V_dest_V_0_data_out);
    sensitive << ( in_stream0_V_dest_V_0_payload_A );
    sensitive << ( in_stream0_V_dest_V_0_payload_B );
    sensitive << ( in_stream0_V_dest_V_0_sel );

    SC_METHOD(thread_in_stream0_V_dest_V_0_load_A);
    sensitive << ( in_stream0_V_dest_V_0_sel_wr );
    sensitive << ( in_stream0_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream0_V_dest_V_0_load_B);
    sensitive << ( in_stream0_V_dest_V_0_sel_wr );
    sensitive << ( in_stream0_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream0_V_dest_V_0_sel);
    sensitive << ( in_stream0_V_dest_V_0_sel_rd );

    SC_METHOD(thread_in_stream0_V_dest_V_0_state_cmp_full);
    sensitive << ( in_stream0_V_dest_V_0_state );

    SC_METHOD(thread_in_stream0_V_dest_V_0_vld_in);
    sensitive << ( in_stream0_TVALID );

    SC_METHOD(thread_in_stream0_V_dest_V_0_vld_out);
    sensitive << ( in_stream0_V_dest_V_0_state );

    SC_METHOD(thread_in_stream0_V_id_V_0_ack_in);
    sensitive << ( in_stream0_V_id_V_0_state );

    SC_METHOD(thread_in_stream0_V_id_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_flatten_reg_522 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_in_stream0_V_id_V_0_data_out);
    sensitive << ( in_stream0_V_id_V_0_payload_A );
    sensitive << ( in_stream0_V_id_V_0_payload_B );
    sensitive << ( in_stream0_V_id_V_0_sel );

    SC_METHOD(thread_in_stream0_V_id_V_0_load_A);
    sensitive << ( in_stream0_V_id_V_0_sel_wr );
    sensitive << ( in_stream0_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream0_V_id_V_0_load_B);
    sensitive << ( in_stream0_V_id_V_0_sel_wr );
    sensitive << ( in_stream0_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream0_V_id_V_0_sel);
    sensitive << ( in_stream0_V_id_V_0_sel_rd );

    SC_METHOD(thread_in_stream0_V_id_V_0_state_cmp_full);
    sensitive << ( in_stream0_V_id_V_0_state );

    SC_METHOD(thread_in_stream0_V_id_V_0_vld_in);
    sensitive << ( in_stream0_TVALID );

    SC_METHOD(thread_in_stream0_V_id_V_0_vld_out);
    sensitive << ( in_stream0_V_id_V_0_state );

    SC_METHOD(thread_in_stream0_V_user_V_0_ack_in);
    sensitive << ( in_stream0_V_user_V_0_state );

    SC_METHOD(thread_in_stream0_V_user_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_flatten_reg_522 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_in_stream0_V_user_V_0_data_out);
    sensitive << ( in_stream0_V_user_V_0_payload_A );
    sensitive << ( in_stream0_V_user_V_0_payload_B );
    sensitive << ( in_stream0_V_user_V_0_sel );

    SC_METHOD(thread_in_stream0_V_user_V_0_load_A);
    sensitive << ( in_stream0_V_user_V_0_sel_wr );
    sensitive << ( in_stream0_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream0_V_user_V_0_load_B);
    sensitive << ( in_stream0_V_user_V_0_sel_wr );
    sensitive << ( in_stream0_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream0_V_user_V_0_sel);
    sensitive << ( in_stream0_V_user_V_0_sel_rd );

    SC_METHOD(thread_in_stream0_V_user_V_0_state_cmp_full);
    sensitive << ( in_stream0_V_user_V_0_state );

    SC_METHOD(thread_in_stream0_V_user_V_0_vld_in);
    sensitive << ( in_stream0_TVALID );

    SC_METHOD(thread_in_stream0_V_user_V_0_vld_out);
    sensitive << ( in_stream0_V_user_V_0_state );

    SC_METHOD(thread_indvar_flatten_next_fu_376_p2);
    sensitive << ( indvar_flatten_reg_303 );

    SC_METHOD(thread_out_stream_TDATA);
    sensitive << ( out_stream_V_data_V_1_data_out );

    SC_METHOD(thread_out_stream_TDATA_blk_n);
    sensitive << ( out_stream_V_data_V_1_state );
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( exitcond_reg_603_pp2_iter1_reg );
    sensitive << ( ap_enable_reg_pp2_iter3 );
    sensitive << ( exitcond_reg_603_pp2_iter2_reg );

    SC_METHOD(thread_out_stream_TDEST);
    sensitive << ( out_stream_V_dest_V_1_data_out );

    SC_METHOD(thread_out_stream_TID);
    sensitive << ( out_stream_V_id_V_1_data_out );

    SC_METHOD(thread_out_stream_TKEEP);
    sensitive << ( out_stream_V_keep_V_1_data_out );

    SC_METHOD(thread_out_stream_TLAST);
    sensitive << ( out_stream_V_last_V_1_data_out );

    SC_METHOD(thread_out_stream_TSTRB);
    sensitive << ( out_stream_V_strb_V_1_data_out );

    SC_METHOD(thread_out_stream_TUSER);
    sensitive << ( out_stream_V_user_V_1_data_out );

    SC_METHOD(thread_out_stream_TVALID);
    sensitive << ( out_stream_V_dest_V_1_state );

    SC_METHOD(thread_out_stream_V_data_V_1_ack_in);
    sensitive << ( out_stream_V_data_V_1_state );

    SC_METHOD(thread_out_stream_V_data_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_data_V_1_data_out);
    sensitive << ( out_stream_V_data_V_1_payload_A );
    sensitive << ( out_stream_V_data_V_1_payload_B );
    sensitive << ( out_stream_V_data_V_1_sel );

    SC_METHOD(thread_out_stream_V_data_V_1_load_A);
    sensitive << ( out_stream_V_data_V_1_sel_wr );
    sensitive << ( out_stream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_data_V_1_load_B);
    sensitive << ( out_stream_V_data_V_1_sel_wr );
    sensitive << ( out_stream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_data_V_1_sel);
    sensitive << ( out_stream_V_data_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_data_V_1_state_cmp_full);
    sensitive << ( out_stream_V_data_V_1_state );

    SC_METHOD(thread_out_stream_V_data_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( exitcond_reg_603_pp2_iter1_reg );
    sensitive << ( ap_block_pp2_stage0_11001 );

    SC_METHOD(thread_out_stream_V_data_V_1_vld_out);
    sensitive << ( out_stream_V_data_V_1_state );

    SC_METHOD(thread_out_stream_V_dest_V_1_ack_in);
    sensitive << ( out_stream_V_dest_V_1_state );

    SC_METHOD(thread_out_stream_V_dest_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_dest_V_1_data_out);
    sensitive << ( out_stream_V_dest_V_1_payload_A );
    sensitive << ( out_stream_V_dest_V_1_payload_B );
    sensitive << ( out_stream_V_dest_V_1_sel );

    SC_METHOD(thread_out_stream_V_dest_V_1_load_A);
    sensitive << ( out_stream_V_dest_V_1_sel_wr );
    sensitive << ( out_stream_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_dest_V_1_load_B);
    sensitive << ( out_stream_V_dest_V_1_sel_wr );
    sensitive << ( out_stream_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_dest_V_1_sel);
    sensitive << ( out_stream_V_dest_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_dest_V_1_state_cmp_full);
    sensitive << ( out_stream_V_dest_V_1_state );

    SC_METHOD(thread_out_stream_V_dest_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( exitcond_reg_603_pp2_iter1_reg );
    sensitive << ( ap_block_pp2_stage0_11001 );

    SC_METHOD(thread_out_stream_V_dest_V_1_vld_out);
    sensitive << ( out_stream_V_dest_V_1_state );

    SC_METHOD(thread_out_stream_V_id_V_1_ack_in);
    sensitive << ( out_stream_V_id_V_1_state );

    SC_METHOD(thread_out_stream_V_id_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_id_V_1_data_out);
    sensitive << ( out_stream_V_id_V_1_payload_A );
    sensitive << ( out_stream_V_id_V_1_payload_B );
    sensitive << ( out_stream_V_id_V_1_sel );

    SC_METHOD(thread_out_stream_V_id_V_1_load_A);
    sensitive << ( out_stream_V_id_V_1_sel_wr );
    sensitive << ( out_stream_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_id_V_1_load_B);
    sensitive << ( out_stream_V_id_V_1_sel_wr );
    sensitive << ( out_stream_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_id_V_1_sel);
    sensitive << ( out_stream_V_id_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_id_V_1_state_cmp_full);
    sensitive << ( out_stream_V_id_V_1_state );

    SC_METHOD(thread_out_stream_V_id_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( exitcond_reg_603_pp2_iter1_reg );
    sensitive << ( ap_block_pp2_stage0_11001 );

    SC_METHOD(thread_out_stream_V_id_V_1_vld_out);
    sensitive << ( out_stream_V_id_V_1_state );

    SC_METHOD(thread_out_stream_V_keep_V_1_ack_in);
    sensitive << ( out_stream_V_keep_V_1_state );

    SC_METHOD(thread_out_stream_V_keep_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_keep_V_1_data_out);
    sensitive << ( out_stream_V_keep_V_1_sel );

    SC_METHOD(thread_out_stream_V_keep_V_1_sel);
    sensitive << ( out_stream_V_keep_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_keep_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( exitcond_reg_603_pp2_iter1_reg );
    sensitive << ( ap_block_pp2_stage0_11001 );

    SC_METHOD(thread_out_stream_V_keep_V_1_vld_out);
    sensitive << ( out_stream_V_keep_V_1_state );

    SC_METHOD(thread_out_stream_V_last_V_1_ack_in);
    sensitive << ( out_stream_V_last_V_1_state );

    SC_METHOD(thread_out_stream_V_last_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_last_V_1_data_out);
    sensitive << ( out_stream_V_last_V_1_payload_A );
    sensitive << ( out_stream_V_last_V_1_payload_B );
    sensitive << ( out_stream_V_last_V_1_sel );

    SC_METHOD(thread_out_stream_V_last_V_1_load_A);
    sensitive << ( out_stream_V_last_V_1_sel_wr );
    sensitive << ( out_stream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_last_V_1_load_B);
    sensitive << ( out_stream_V_last_V_1_sel_wr );
    sensitive << ( out_stream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_last_V_1_sel);
    sensitive << ( out_stream_V_last_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_last_V_1_state_cmp_full);
    sensitive << ( out_stream_V_last_V_1_state );

    SC_METHOD(thread_out_stream_V_last_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( exitcond_reg_603_pp2_iter1_reg );
    sensitive << ( ap_block_pp2_stage0_11001 );

    SC_METHOD(thread_out_stream_V_last_V_1_vld_out);
    sensitive << ( out_stream_V_last_V_1_state );

    SC_METHOD(thread_out_stream_V_strb_V_1_ack_in);
    sensitive << ( out_stream_V_strb_V_1_state );

    SC_METHOD(thread_out_stream_V_strb_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_strb_V_1_data_out);
    sensitive << ( out_stream_V_strb_V_1_sel );

    SC_METHOD(thread_out_stream_V_strb_V_1_sel);
    sensitive << ( out_stream_V_strb_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_strb_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( exitcond_reg_603_pp2_iter1_reg );
    sensitive << ( ap_block_pp2_stage0_11001 );

    SC_METHOD(thread_out_stream_V_strb_V_1_vld_out);
    sensitive << ( out_stream_V_strb_V_1_state );

    SC_METHOD(thread_out_stream_V_user_V_1_ack_in);
    sensitive << ( out_stream_V_user_V_1_state );

    SC_METHOD(thread_out_stream_V_user_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_user_V_1_data_out);
    sensitive << ( out_stream_V_user_V_1_payload_A );
    sensitive << ( out_stream_V_user_V_1_payload_B );
    sensitive << ( out_stream_V_user_V_1_sel );

    SC_METHOD(thread_out_stream_V_user_V_1_load_A);
    sensitive << ( out_stream_V_user_V_1_sel_wr );
    sensitive << ( out_stream_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_user_V_1_load_B);
    sensitive << ( out_stream_V_user_V_1_sel_wr );
    sensitive << ( out_stream_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_user_V_1_sel);
    sensitive << ( out_stream_V_user_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_user_V_1_state_cmp_full);
    sensitive << ( out_stream_V_user_V_1_state );

    SC_METHOD(thread_out_stream_V_user_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( exitcond_reg_603_pp2_iter1_reg );
    sensitive << ( ap_block_pp2_stage0_11001 );

    SC_METHOD(thread_out_stream_V_user_V_1_vld_out);
    sensitive << ( out_stream_V_user_V_1_state );

    SC_METHOD(thread_sum_pix1_ch0_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_358_p1 );
    sensitive << ( tmp_s_fu_402_p1 );

    SC_METHOD(thread_sum_pix1_ch0_address1);
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( sum_pix1_ch0_addr_2_reg_551_pp1_iter3_reg );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter4 );
    sensitive << ( tmp_3_fu_473_p1 );

    SC_METHOD(thread_sum_pix1_ch0_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sum_pix1_ch0_ce1);
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter4 );

    SC_METHOD(thread_sum_pix1_ch0_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_346_p2 );

    SC_METHOD(thread_sum_pix1_ch0_we1);
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( exitcond_flatten_reg_522_pp1_iter3_reg );
    sensitive << ( ap_enable_reg_pp1_iter4 );

    SC_METHOD(thread_sum_pix2_ch0_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_358_p1 );
    sensitive << ( tmp_s_fu_402_p1 );

    SC_METHOD(thread_sum_pix2_ch0_address1);
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( sum_pix2_ch0_addr_2_reg_557_pp1_iter3_reg );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter4 );
    sensitive << ( tmp_3_fu_473_p1 );

    SC_METHOD(thread_sum_pix2_ch0_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sum_pix2_ch0_ce1);
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter4 );

    SC_METHOD(thread_sum_pix2_ch0_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_346_p2 );

    SC_METHOD(thread_sum_pix2_ch0_we1);
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( exitcond_flatten_reg_522_pp1_iter3_reg );
    sensitive << ( ap_enable_reg_pp1_iter4 );

    SC_METHOD(thread_tmp_10_fu_452_p1);
    sensitive << ( phitmp_reg_546_pp1_iter2_reg );

    SC_METHOD(thread_tmp_11_fu_455_p2);
    sensitive << ( reg_341 );
    sensitive << ( tmp_10_fu_452_p1 );

    SC_METHOD(thread_tmp_1_fu_358_p1);
    sensitive << ( i_reg_292 );

    SC_METHOD(thread_tmp_2_fu_429_p1);
    sensitive << ( in_stream0_V_data_V_0_data_out );

    SC_METHOD(thread_tmp_3_fu_473_p1);
    sensitive << ( i_2_reg_325 );

    SC_METHOD(thread_tmp_5_fu_485_p3);
    sensitive << ( reg_341 );

    SC_METHOD(thread_tmp_6_fu_493_p1);
    sensitive << ( reg_336 );

    SC_METHOD(thread_tmp_8_fu_446_p2);
    sensitive << ( reg_336 );
    sensitive << ( tmp_9_fu_443_p1 );

    SC_METHOD(thread_tmp_9_fu_443_p1);
    sensitive << ( tmp_2_reg_541_pp1_iter2_reg );

    SC_METHOD(thread_tmp_data_V_1_fu_497_p2);
    sensitive << ( tmp_5_fu_485_p3 );
    sensitive << ( tmp_6_fu_493_p1 );

    SC_METHOD(thread_tmp_fu_364_p3);
    sensitive << ( N_ADDS_read_reg_504 );

    SC_METHOD(thread_tmp_last_V_fu_479_p2);
    sensitive << ( i_2_reg_325 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( exitcond_fu_461_p2 );
    sensitive << ( ap_enable_reg_pp2_iter0 );

    SC_METHOD(thread_tmp_s_fu_402_p1);
    sensitive << ( i_1_mid2_reg_531 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_keep_V_1_ack_in );
    sensitive << ( out_stream_V_strb_V_1_ack_in );
    sensitive << ( out_stream_V_user_V_1_ack_in );
    sensitive << ( out_stream_V_last_V_1_ack_in );
    sensitive << ( out_stream_V_id_V_1_ack_in );
    sensitive << ( out_stream_V_dest_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_enable_reg_pp2_iter3 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_flatten_fu_371_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_fu_461_p2 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_enable_reg_pp1_iter4 );
    sensitive << ( ap_block_pp2_stage0_subdone );
    sensitive << ( exitcond1_fu_346_p2 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "00000001";
    in_stream0_V_data_V_0_sel_rd = SC_LOGIC_0;
    in_stream0_V_data_V_0_sel_wr = SC_LOGIC_0;
    in_stream0_V_data_V_0_state = "00";
    in_stream0_V_user_V_0_sel_rd = SC_LOGIC_0;
    in_stream0_V_user_V_0_sel_wr = SC_LOGIC_0;
    in_stream0_V_user_V_0_state = "00";
    in_stream0_V_id_V_0_sel_rd = SC_LOGIC_0;
    in_stream0_V_id_V_0_sel_wr = SC_LOGIC_0;
    in_stream0_V_id_V_0_state = "00";
    in_stream0_V_dest_V_0_sel_rd = SC_LOGIC_0;
    in_stream0_V_dest_V_0_sel_wr = SC_LOGIC_0;
    in_stream0_V_dest_V_0_state = "00";
    out_stream_V_data_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_data_V_1_sel_wr = SC_LOGIC_0;
    out_stream_V_data_V_1_state = "00";
    out_stream_V_keep_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_keep_V_1_state = "00";
    out_stream_V_strb_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_strb_V_1_state = "00";
    out_stream_V_user_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_user_V_1_sel_wr = SC_LOGIC_0;
    out_stream_V_user_V_1_state = "00";
    out_stream_V_last_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_last_V_1_sel_wr = SC_LOGIC_0;
    out_stream_V_last_V_1_state = "00";
    out_stream_V_id_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_id_V_1_sel_wr = SC_LOGIC_0;
    out_stream_V_id_V_1_state = "00";
    out_stream_V_dest_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_dest_V_1_sel_wr = SC_LOGIC_0;
    out_stream_V_dest_V_1_state = "00";
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter4 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "scurve_adder_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_stream0_TDATA, "(port)in_stream0_TDATA");
    sc_trace(mVcdFile, in_stream0_TVALID, "(port)in_stream0_TVALID");
    sc_trace(mVcdFile, in_stream0_TREADY, "(port)in_stream0_TREADY");
    sc_trace(mVcdFile, in_stream0_TKEEP, "(port)in_stream0_TKEEP");
    sc_trace(mVcdFile, in_stream0_TSTRB, "(port)in_stream0_TSTRB");
    sc_trace(mVcdFile, in_stream0_TUSER, "(port)in_stream0_TUSER");
    sc_trace(mVcdFile, in_stream0_TLAST, "(port)in_stream0_TLAST");
    sc_trace(mVcdFile, in_stream0_TID, "(port)in_stream0_TID");
    sc_trace(mVcdFile, in_stream0_TDEST, "(port)in_stream0_TDEST");
    sc_trace(mVcdFile, out_stream_TDATA, "(port)out_stream_TDATA");
    sc_trace(mVcdFile, out_stream_TVALID, "(port)out_stream_TVALID");
    sc_trace(mVcdFile, out_stream_TREADY, "(port)out_stream_TREADY");
    sc_trace(mVcdFile, out_stream_TKEEP, "(port)out_stream_TKEEP");
    sc_trace(mVcdFile, out_stream_TSTRB, "(port)out_stream_TSTRB");
    sc_trace(mVcdFile, out_stream_TUSER, "(port)out_stream_TUSER");
    sc_trace(mVcdFile, out_stream_TLAST, "(port)out_stream_TLAST");
    sc_trace(mVcdFile, out_stream_TID, "(port)out_stream_TID");
    sc_trace(mVcdFile, out_stream_TDEST, "(port)out_stream_TDEST");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_data_out, "in_stream0_V_data_V_0_data_out");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_vld_in, "in_stream0_V_data_V_0_vld_in");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_vld_out, "in_stream0_V_data_V_0_vld_out");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_ack_in, "in_stream0_V_data_V_0_ack_in");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_ack_out, "in_stream0_V_data_V_0_ack_out");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_payload_A, "in_stream0_V_data_V_0_payload_A");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_payload_B, "in_stream0_V_data_V_0_payload_B");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_sel_rd, "in_stream0_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_sel_wr, "in_stream0_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_sel, "in_stream0_V_data_V_0_sel");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_load_A, "in_stream0_V_data_V_0_load_A");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_load_B, "in_stream0_V_data_V_0_load_B");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_state, "in_stream0_V_data_V_0_state");
    sc_trace(mVcdFile, in_stream0_V_data_V_0_state_cmp_full, "in_stream0_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_data_out, "in_stream0_V_user_V_0_data_out");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_vld_in, "in_stream0_V_user_V_0_vld_in");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_vld_out, "in_stream0_V_user_V_0_vld_out");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_ack_in, "in_stream0_V_user_V_0_ack_in");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_ack_out, "in_stream0_V_user_V_0_ack_out");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_payload_A, "in_stream0_V_user_V_0_payload_A");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_payload_B, "in_stream0_V_user_V_0_payload_B");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_sel_rd, "in_stream0_V_user_V_0_sel_rd");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_sel_wr, "in_stream0_V_user_V_0_sel_wr");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_sel, "in_stream0_V_user_V_0_sel");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_load_A, "in_stream0_V_user_V_0_load_A");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_load_B, "in_stream0_V_user_V_0_load_B");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_state, "in_stream0_V_user_V_0_state");
    sc_trace(mVcdFile, in_stream0_V_user_V_0_state_cmp_full, "in_stream0_V_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_data_out, "in_stream0_V_id_V_0_data_out");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_vld_in, "in_stream0_V_id_V_0_vld_in");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_vld_out, "in_stream0_V_id_V_0_vld_out");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_ack_in, "in_stream0_V_id_V_0_ack_in");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_ack_out, "in_stream0_V_id_V_0_ack_out");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_payload_A, "in_stream0_V_id_V_0_payload_A");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_payload_B, "in_stream0_V_id_V_0_payload_B");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_sel_rd, "in_stream0_V_id_V_0_sel_rd");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_sel_wr, "in_stream0_V_id_V_0_sel_wr");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_sel, "in_stream0_V_id_V_0_sel");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_load_A, "in_stream0_V_id_V_0_load_A");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_load_B, "in_stream0_V_id_V_0_load_B");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_state, "in_stream0_V_id_V_0_state");
    sc_trace(mVcdFile, in_stream0_V_id_V_0_state_cmp_full, "in_stream0_V_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_data_out, "in_stream0_V_dest_V_0_data_out");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_vld_in, "in_stream0_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_vld_out, "in_stream0_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_ack_in, "in_stream0_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_ack_out, "in_stream0_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_payload_A, "in_stream0_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_payload_B, "in_stream0_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_sel_rd, "in_stream0_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_sel_wr, "in_stream0_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_sel, "in_stream0_V_dest_V_0_sel");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_load_A, "in_stream0_V_dest_V_0_load_A");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_load_B, "in_stream0_V_dest_V_0_load_B");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_state, "in_stream0_V_dest_V_0_state");
    sc_trace(mVcdFile, in_stream0_V_dest_V_0_state_cmp_full, "in_stream0_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, out_stream_V_data_V_1_data_out, "out_stream_V_data_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_data_V_1_vld_in, "out_stream_V_data_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_data_V_1_vld_out, "out_stream_V_data_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_data_V_1_ack_in, "out_stream_V_data_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_data_V_1_ack_out, "out_stream_V_data_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_data_V_1_payload_A, "out_stream_V_data_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_data_V_1_payload_B, "out_stream_V_data_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_data_V_1_sel_rd, "out_stream_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_data_V_1_sel_wr, "out_stream_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_data_V_1_sel, "out_stream_V_data_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_data_V_1_load_A, "out_stream_V_data_V_1_load_A");
    sc_trace(mVcdFile, out_stream_V_data_V_1_load_B, "out_stream_V_data_V_1_load_B");
    sc_trace(mVcdFile, out_stream_V_data_V_1_state, "out_stream_V_data_V_1_state");
    sc_trace(mVcdFile, out_stream_V_data_V_1_state_cmp_full, "out_stream_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_data_out, "out_stream_V_keep_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_vld_in, "out_stream_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_vld_out, "out_stream_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_ack_in, "out_stream_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_ack_out, "out_stream_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_sel_rd, "out_stream_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_sel, "out_stream_V_keep_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_state, "out_stream_V_keep_V_1_state");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_data_out, "out_stream_V_strb_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_vld_in, "out_stream_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_vld_out, "out_stream_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_ack_in, "out_stream_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_ack_out, "out_stream_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_sel_rd, "out_stream_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_sel, "out_stream_V_strb_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_state, "out_stream_V_strb_V_1_state");
    sc_trace(mVcdFile, out_stream_V_user_V_1_data_out, "out_stream_V_user_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_user_V_1_vld_in, "out_stream_V_user_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_user_V_1_vld_out, "out_stream_V_user_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_user_V_1_ack_in, "out_stream_V_user_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_user_V_1_ack_out, "out_stream_V_user_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_user_V_1_payload_A, "out_stream_V_user_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_user_V_1_payload_B, "out_stream_V_user_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_user_V_1_sel_rd, "out_stream_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_user_V_1_sel_wr, "out_stream_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_user_V_1_sel, "out_stream_V_user_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_user_V_1_load_A, "out_stream_V_user_V_1_load_A");
    sc_trace(mVcdFile, out_stream_V_user_V_1_load_B, "out_stream_V_user_V_1_load_B");
    sc_trace(mVcdFile, out_stream_V_user_V_1_state, "out_stream_V_user_V_1_state");
    sc_trace(mVcdFile, out_stream_V_user_V_1_state_cmp_full, "out_stream_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_V_last_V_1_data_out, "out_stream_V_last_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_last_V_1_vld_in, "out_stream_V_last_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_last_V_1_vld_out, "out_stream_V_last_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_last_V_1_ack_in, "out_stream_V_last_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_last_V_1_ack_out, "out_stream_V_last_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_last_V_1_payload_A, "out_stream_V_last_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_last_V_1_payload_B, "out_stream_V_last_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_last_V_1_sel_rd, "out_stream_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_last_V_1_sel_wr, "out_stream_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_last_V_1_sel, "out_stream_V_last_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_last_V_1_load_A, "out_stream_V_last_V_1_load_A");
    sc_trace(mVcdFile, out_stream_V_last_V_1_load_B, "out_stream_V_last_V_1_load_B");
    sc_trace(mVcdFile, out_stream_V_last_V_1_state, "out_stream_V_last_V_1_state");
    sc_trace(mVcdFile, out_stream_V_last_V_1_state_cmp_full, "out_stream_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_V_id_V_1_data_out, "out_stream_V_id_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_id_V_1_vld_in, "out_stream_V_id_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_id_V_1_vld_out, "out_stream_V_id_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_id_V_1_ack_in, "out_stream_V_id_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_id_V_1_ack_out, "out_stream_V_id_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_id_V_1_payload_A, "out_stream_V_id_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_id_V_1_payload_B, "out_stream_V_id_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_id_V_1_sel_rd, "out_stream_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_id_V_1_sel_wr, "out_stream_V_id_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_id_V_1_sel, "out_stream_V_id_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_id_V_1_load_A, "out_stream_V_id_V_1_load_A");
    sc_trace(mVcdFile, out_stream_V_id_V_1_load_B, "out_stream_V_id_V_1_load_B");
    sc_trace(mVcdFile, out_stream_V_id_V_1_state, "out_stream_V_id_V_1_state");
    sc_trace(mVcdFile, out_stream_V_id_V_1_state_cmp_full, "out_stream_V_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_data_out, "out_stream_V_dest_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_vld_in, "out_stream_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_vld_out, "out_stream_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_ack_in, "out_stream_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_ack_out, "out_stream_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_payload_A, "out_stream_V_dest_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_payload_B, "out_stream_V_dest_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_sel_rd, "out_stream_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_sel_wr, "out_stream_V_dest_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_sel, "out_stream_V_dest_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_load_A, "out_stream_V_dest_V_1_load_A");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_load_B, "out_stream_V_dest_V_1_load_B");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_state, "out_stream_V_dest_V_1_state");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_state_cmp_full, "out_stream_V_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, N_ADDS, "N_ADDS");
    sc_trace(mVcdFile, in_stream0_TDATA_blk_n, "in_stream0_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, exitcond_flatten_reg_522, "exitcond_flatten_reg_522");
    sc_trace(mVcdFile, out_stream_TDATA_blk_n, "out_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter2, "ap_enable_reg_pp2_iter2");
    sc_trace(mVcdFile, ap_block_pp2_stage0, "ap_block_pp2_stage0");
    sc_trace(mVcdFile, exitcond_reg_603, "exitcond_reg_603");
    sc_trace(mVcdFile, exitcond_reg_603_pp2_iter1_reg, "exitcond_reg_603_pp2_iter1_reg");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter3, "ap_enable_reg_pp2_iter3");
    sc_trace(mVcdFile, exitcond_reg_603_pp2_iter2_reg, "exitcond_reg_603_pp2_iter2_reg");
    sc_trace(mVcdFile, indvar_flatten_reg_303, "indvar_flatten_reg_303");
    sc_trace(mVcdFile, i_1_reg_314, "i_1_reg_314");
    sc_trace(mVcdFile, i_2_reg_325, "i_2_reg_325");
    sc_trace(mVcdFile, sum_pix1_ch0_q0, "sum_pix1_ch0_q0");
    sc_trace(mVcdFile, reg_336, "reg_336");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp1_stage0_iter0, "ap_block_state4_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp1_stage0_iter1, "ap_block_state5_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state6_pp1_stage0_iter2, "ap_block_state6_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state7_pp1_stage0_iter3, "ap_block_state7_pp1_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state8_pp1_stage0_iter4, "ap_block_state8_pp1_stage0_iter4");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, exitcond_flatten_reg_522_pp1_iter1_reg, "exitcond_flatten_reg_522_pp1_iter1_reg");
    sc_trace(mVcdFile, sum_pix1_ch0_q1, "sum_pix1_ch0_q1");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage0, "ap_CS_fsm_pp2_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter1, "ap_enable_reg_pp2_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp2_stage0_iter0, "ap_block_state11_pp2_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state12_pp2_stage0_iter1, "ap_block_state12_pp2_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state13_pp2_stage0_iter2, "ap_block_state13_pp2_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state13_io, "ap_block_state13_io");
    sc_trace(mVcdFile, ap_block_state14_pp2_stage0_iter3, "ap_block_state14_pp2_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state14_io, "ap_block_state14_io");
    sc_trace(mVcdFile, ap_block_pp2_stage0_11001, "ap_block_pp2_stage0_11001");
    sc_trace(mVcdFile, sum_pix2_ch0_q0, "sum_pix2_ch0_q0");
    sc_trace(mVcdFile, reg_341, "reg_341");
    sc_trace(mVcdFile, sum_pix2_ch0_q1, "sum_pix2_ch0_q1");
    sc_trace(mVcdFile, N_ADDS_read_reg_504, "N_ADDS_read_reg_504");
    sc_trace(mVcdFile, i_3_fu_352_p2, "i_3_fu_352_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_364_p3, "tmp_fu_364_p3");
    sc_trace(mVcdFile, tmp_reg_517, "tmp_reg_517");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_flatten_fu_371_p2, "exitcond_flatten_fu_371_p2");
    sc_trace(mVcdFile, exitcond_flatten_reg_522_pp1_iter2_reg, "exitcond_flatten_reg_522_pp1_iter2_reg");
    sc_trace(mVcdFile, exitcond_flatten_reg_522_pp1_iter3_reg, "exitcond_flatten_reg_522_pp1_iter3_reg");
    sc_trace(mVcdFile, indvar_flatten_next_fu_376_p2, "indvar_flatten_next_fu_376_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, i_1_mid2_fu_388_p3, "i_1_mid2_fu_388_p3");
    sc_trace(mVcdFile, i_1_mid2_reg_531, "i_1_mid2_reg_531");
    sc_trace(mVcdFile, i_5_fu_396_p2, "i_5_fu_396_p2");
    sc_trace(mVcdFile, tmp_2_fu_429_p1, "tmp_2_fu_429_p1");
    sc_trace(mVcdFile, tmp_2_reg_541, "tmp_2_reg_541");
    sc_trace(mVcdFile, tmp_2_reg_541_pp1_iter2_reg, "tmp_2_reg_541_pp1_iter2_reg");
    sc_trace(mVcdFile, phitmp_reg_546, "phitmp_reg_546");
    sc_trace(mVcdFile, phitmp_reg_546_pp1_iter2_reg, "phitmp_reg_546_pp1_iter2_reg");
    sc_trace(mVcdFile, sum_pix1_ch0_addr_2_reg_551, "sum_pix1_ch0_addr_2_reg_551");
    sc_trace(mVcdFile, sum_pix1_ch0_addr_2_reg_551_pp1_iter2_reg, "sum_pix1_ch0_addr_2_reg_551_pp1_iter2_reg");
    sc_trace(mVcdFile, sum_pix1_ch0_addr_2_reg_551_pp1_iter3_reg, "sum_pix1_ch0_addr_2_reg_551_pp1_iter3_reg");
    sc_trace(mVcdFile, sum_pix2_ch0_addr_2_reg_557, "sum_pix2_ch0_addr_2_reg_557");
    sc_trace(mVcdFile, sum_pix2_ch0_addr_2_reg_557_pp1_iter2_reg, "sum_pix2_ch0_addr_2_reg_557_pp1_iter2_reg");
    sc_trace(mVcdFile, sum_pix2_ch0_addr_2_reg_557_pp1_iter3_reg, "sum_pix2_ch0_addr_2_reg_557_pp1_iter3_reg");
    sc_trace(mVcdFile, tmp_8_fu_446_p2, "tmp_8_fu_446_p2");
    sc_trace(mVcdFile, tmp_8_reg_563, "tmp_8_reg_563");
    sc_trace(mVcdFile, tmp_11_fu_455_p2, "tmp_11_fu_455_p2");
    sc_trace(mVcdFile, tmp_11_reg_568, "tmp_11_reg_568");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, dub_pix_ch0_user_V_q0, "dub_pix_ch0_user_V_q0");
    sc_trace(mVcdFile, sum_pix_tot_user_V_reg_588, "sum_pix_tot_user_V_reg_588");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, dub_pix_ch0_id_V_q0, "dub_pix_ch0_id_V_q0");
    sc_trace(mVcdFile, sum_pix_tot_id_V_reg_593, "sum_pix_tot_id_V_reg_593");
    sc_trace(mVcdFile, dub_pix_ch0_dest_V_q0, "dub_pix_ch0_dest_V_q0");
    sc_trace(mVcdFile, sum_pix_tot_dest_V_reg_598, "sum_pix_tot_dest_V_reg_598");
    sc_trace(mVcdFile, exitcond_fu_461_p2, "exitcond_fu_461_p2");
    sc_trace(mVcdFile, i_4_fu_467_p2, "i_4_fu_467_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter0, "ap_enable_reg_pp2_iter0");
    sc_trace(mVcdFile, tmp_last_V_fu_479_p2, "tmp_last_V_fu_479_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_622, "tmp_last_V_reg_622");
    sc_trace(mVcdFile, tmp_last_V_reg_622_pp2_iter1_reg, "tmp_last_V_reg_622_pp2_iter1_reg");
    sc_trace(mVcdFile, tmp_data_V_1_fu_497_p2, "tmp_data_V_1_fu_497_p2");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state4, "ap_condition_pp1_exit_iter0_state4");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter3, "ap_enable_reg_pp1_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter4, "ap_enable_reg_pp1_iter4");
    sc_trace(mVcdFile, ap_block_pp2_stage0_subdone, "ap_block_pp2_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp2_exit_iter0_state11, "ap_condition_pp2_exit_iter0_state11");
    sc_trace(mVcdFile, sum_pix1_ch0_address0, "sum_pix1_ch0_address0");
    sc_trace(mVcdFile, sum_pix1_ch0_ce0, "sum_pix1_ch0_ce0");
    sc_trace(mVcdFile, sum_pix1_ch0_we0, "sum_pix1_ch0_we0");
    sc_trace(mVcdFile, sum_pix1_ch0_address1, "sum_pix1_ch0_address1");
    sc_trace(mVcdFile, sum_pix1_ch0_ce1, "sum_pix1_ch0_ce1");
    sc_trace(mVcdFile, sum_pix1_ch0_we1, "sum_pix1_ch0_we1");
    sc_trace(mVcdFile, sum_pix2_ch0_address0, "sum_pix2_ch0_address0");
    sc_trace(mVcdFile, sum_pix2_ch0_ce0, "sum_pix2_ch0_ce0");
    sc_trace(mVcdFile, sum_pix2_ch0_we0, "sum_pix2_ch0_we0");
    sc_trace(mVcdFile, sum_pix2_ch0_address1, "sum_pix2_ch0_address1");
    sc_trace(mVcdFile, sum_pix2_ch0_ce1, "sum_pix2_ch0_ce1");
    sc_trace(mVcdFile, sum_pix2_ch0_we1, "sum_pix2_ch0_we1");
    sc_trace(mVcdFile, dub_pix_ch0_user_V_address0, "dub_pix_ch0_user_V_address0");
    sc_trace(mVcdFile, dub_pix_ch0_user_V_ce0, "dub_pix_ch0_user_V_ce0");
    sc_trace(mVcdFile, dub_pix_ch0_user_V_we0, "dub_pix_ch0_user_V_we0");
    sc_trace(mVcdFile, dub_pix_ch0_id_V_address0, "dub_pix_ch0_id_V_address0");
    sc_trace(mVcdFile, dub_pix_ch0_id_V_ce0, "dub_pix_ch0_id_V_ce0");
    sc_trace(mVcdFile, dub_pix_ch0_id_V_we0, "dub_pix_ch0_id_V_we0");
    sc_trace(mVcdFile, dub_pix_ch0_dest_V_address0, "dub_pix_ch0_dest_V_address0");
    sc_trace(mVcdFile, dub_pix_ch0_dest_V_ce0, "dub_pix_ch0_dest_V_ce0");
    sc_trace(mVcdFile, dub_pix_ch0_dest_V_we0, "dub_pix_ch0_dest_V_we0");
    sc_trace(mVcdFile, i_reg_292, "i_reg_292");
    sc_trace(mVcdFile, exitcond1_fu_346_p2, "exitcond1_fu_346_p2");
    sc_trace(mVcdFile, tmp_1_fu_358_p1, "tmp_1_fu_358_p1");
    sc_trace(mVcdFile, tmp_s_fu_402_p1, "tmp_s_fu_402_p1");
    sc_trace(mVcdFile, tmp_3_fu_473_p1, "tmp_3_fu_473_p1");
    sc_trace(mVcdFile, ap_block_pp2_stage0_01001, "ap_block_pp2_stage0_01001");
    sc_trace(mVcdFile, exitcond2_fu_382_p2, "exitcond2_fu_382_p2");
    sc_trace(mVcdFile, tmp_9_fu_443_p1, "tmp_9_fu_443_p1");
    sc_trace(mVcdFile, tmp_10_fu_452_p1, "tmp_10_fu_452_p1");
    sc_trace(mVcdFile, tmp_5_fu_485_p3, "tmp_5_fu_485_p3");
    sc_trace(mVcdFile, tmp_6_fu_493_p1, "tmp_6_fu_493_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_block_state15, "ap_block_state15");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, ap_idle_pp2, "ap_idle_pp2");
    sc_trace(mVcdFile, ap_enable_pp2, "ap_enable_pp2");
#endif

    }
    mHdltvinHandle.open("scurve_adder.hdltvin.dat");
    mHdltvoutHandle.open("scurve_adder.hdltvout.dat");
}

scurve_adder::~scurve_adder() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete scurve_adder_CTRL_BUS_s_axi_U;
    delete sum_pix1_ch0_U;
    delete sum_pix2_ch0_U;
    delete dub_pix_ch0_user_V_U;
    delete dub_pix_ch0_id_V_U;
    delete dub_pix_ch0_dest_V_U;
}

void scurve_adder::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void scurve_adder::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void scurve_adder::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state4.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state4.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state4.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            ap_enable_reg_pp1_iter3 = ap_enable_reg_pp1_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            ap_enable_reg_pp1_iter4 = ap_enable_reg_pp1_iter3.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp1_iter4 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state11.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp2_stage0_subdone.read()))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp2_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state11.read())) {
                ap_enable_reg_pp2_iter1 = (ap_condition_pp2_exit_iter0_state11.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp2_iter1 = ap_enable_reg_pp2_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp2_stage0_subdone.read())) {
            ap_enable_reg_pp2_iter2 = ap_enable_reg_pp2_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp2_stage0_subdone.read())) {
            ap_enable_reg_pp2_iter3 = ap_enable_reg_pp2_iter2.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            ap_enable_reg_pp2_iter3 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_371_p2.read()))) {
        i_1_reg_314 = i_5_fu_396_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_1_reg_314 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_2_reg_325 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp2_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_461_p2.read()))) {
        i_2_reg_325 = i_4_fu_467_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_292 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(exitcond1_fu_346_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i_reg_292 = i_3_fu_352_p2.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream0_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_vld_out.read()))) {
            in_stream0_V_data_V_0_sel_rd =  (sc_logic) (~in_stream0_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream0_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_ack_in.read()))) {
            in_stream0_V_data_V_0_sel_wr =  (sc_logic) (~in_stream0_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream0_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_stream0_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_stream0_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            in_stream0_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream0_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream0_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            in_stream0_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_stream0_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream0_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_stream0_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_ack_out.read()))))) {
            in_stream0_V_data_V_0_state = ap_const_lv2_3;
        } else {
            in_stream0_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream0_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_vld_out.read()))) {
            in_stream0_V_dest_V_0_sel_rd =  (sc_logic) (~in_stream0_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream0_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_ack_in.read()))) {
            in_stream0_V_dest_V_0_sel_wr =  (sc_logic) (~in_stream0_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream0_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_stream0_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_stream0_V_dest_V_0_state.read())))) {
            in_stream0_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_stream0_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream0_V_dest_V_0_state.read())))) {
            in_stream0_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_stream0_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream0_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_stream0_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_ack_out.read()))))) {
            in_stream0_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            in_stream0_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream0_V_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_vld_out.read()))) {
            in_stream0_V_id_V_0_sel_rd =  (sc_logic) (~in_stream0_V_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream0_V_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_ack_in.read()))) {
            in_stream0_V_id_V_0_sel_wr =  (sc_logic) (~in_stream0_V_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream0_V_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_stream0_V_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_stream0_V_id_V_0_state.read())))) {
            in_stream0_V_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_stream0_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream0_V_id_V_0_state.read())))) {
            in_stream0_V_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_stream0_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream0_V_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_stream0_V_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_ack_out.read()))))) {
            in_stream0_V_id_V_0_state = ap_const_lv2_3;
        } else {
            in_stream0_V_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream0_V_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_vld_out.read()))) {
            in_stream0_V_user_V_0_sel_rd =  (sc_logic) (~in_stream0_V_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream0_V_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_ack_in.read()))) {
            in_stream0_V_user_V_0_sel_wr =  (sc_logic) (~in_stream0_V_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream0_V_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_stream0_V_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_stream0_V_user_V_0_state.read())))) {
            in_stream0_V_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_stream0_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream0_V_user_V_0_state.read())))) {
            in_stream0_V_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_stream0_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream0_V_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_stream0_V_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_ack_out.read()))))) {
            in_stream0_V_user_V_0_state = ap_const_lv2_3;
        } else {
            in_stream0_V_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_371_p2.read()))) {
        indvar_flatten_reg_303 = indvar_flatten_next_fu_376_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        indvar_flatten_reg_303 = ap_const_lv21_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_out.read()))) {
            out_stream_V_data_V_1_sel_rd =  (sc_logic) (~out_stream_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_in.read()))) {
            out_stream_V_data_V_1_sel_wr =  (sc_logic) (~out_stream_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_data_V_1_state.read())))) {
            out_stream_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_data_V_1_state.read())))) {
            out_stream_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()))))) {
            out_stream_V_data_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_vld_out.read()))) {
            out_stream_V_dest_V_1_sel_rd =  (sc_logic) (~out_stream_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_ack_in.read()))) {
            out_stream_V_dest_V_1_sel_wr =  (sc_logic) (~out_stream_V_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_dest_V_1_state.read())))) {
            out_stream_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_dest_V_1_state.read())))) {
            out_stream_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_ack_out.read()))))) {
            out_stream_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_vld_out.read()))) {
            out_stream_V_id_V_1_sel_rd =  (sc_logic) (~out_stream_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_ack_in.read()))) {
            out_stream_V_id_V_1_sel_wr =  (sc_logic) (~out_stream_V_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_id_V_1_state.read())))) {
            out_stream_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_id_V_1_state.read())))) {
            out_stream_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_ack_out.read()))))) {
            out_stream_V_id_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_vld_out.read()))) {
            out_stream_V_keep_V_1_sel_rd =  (sc_logic) (~out_stream_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_keep_V_1_state.read())))) {
            out_stream_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_keep_V_1_state.read())))) {
            out_stream_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_ack_out.read()))))) {
            out_stream_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_out.read()))) {
            out_stream_V_last_V_1_sel_rd =  (sc_logic) (~out_stream_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_in.read()))) {
            out_stream_V_last_V_1_sel_wr =  (sc_logic) (~out_stream_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_last_V_1_state.read())))) {
            out_stream_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_last_V_1_state.read())))) {
            out_stream_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_out.read()))))) {
            out_stream_V_last_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_vld_out.read()))) {
            out_stream_V_strb_V_1_sel_rd =  (sc_logic) (~out_stream_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_strb_V_1_state.read())))) {
            out_stream_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_strb_V_1_state.read())))) {
            out_stream_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_ack_out.read()))))) {
            out_stream_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_vld_out.read()))) {
            out_stream_V_user_V_1_sel_rd =  (sc_logic) (~out_stream_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_ack_in.read()))) {
            out_stream_V_user_V_1_sel_wr =  (sc_logic) (~out_stream_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_user_V_1_state.read())))) {
            out_stream_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_user_V_1_state.read())))) {
            out_stream_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_ack_out.read()))))) {
            out_stream_V_user_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603.read()))) {
        reg_336 = sum_pix1_ch0_q1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522_pp1_iter1_reg.read()))) {
        reg_336 = sum_pix1_ch0_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603.read()))) {
        reg_341 = sum_pix2_ch0_q1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522_pp1_iter1_reg.read()))) {
        reg_341 = sum_pix2_ch0_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        N_ADDS_read_reg_504 = N_ADDS.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_522 = exitcond_flatten_fu_371_p2.read();
        exitcond_flatten_reg_522_pp1_iter1_reg = exitcond_flatten_reg_522.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) {
        exitcond_flatten_reg_522_pp1_iter2_reg = exitcond_flatten_reg_522_pp1_iter1_reg.read();
        exitcond_flatten_reg_522_pp1_iter3_reg = exitcond_flatten_reg_522_pp1_iter2_reg.read();
        phitmp_reg_546_pp1_iter2_reg = phitmp_reg_546.read();
        sum_pix1_ch0_addr_2_reg_551_pp1_iter2_reg = sum_pix1_ch0_addr_2_reg_551.read();
        sum_pix1_ch0_addr_2_reg_551_pp1_iter3_reg = sum_pix1_ch0_addr_2_reg_551_pp1_iter2_reg.read();
        sum_pix2_ch0_addr_2_reg_557_pp1_iter2_reg = sum_pix2_ch0_addr_2_reg_557.read();
        sum_pix2_ch0_addr_2_reg_557_pp1_iter3_reg = sum_pix2_ch0_addr_2_reg_557_pp1_iter2_reg.read();
        tmp_2_reg_541_pp1_iter2_reg = tmp_2_reg_541.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_reg_603 = exitcond_fu_461_p2.read();
        exitcond_reg_603_pp2_iter1_reg = exitcond_reg_603.read();
        tmp_last_V_reg_622_pp2_iter1_reg = tmp_last_V_reg_622.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0)) {
        exitcond_reg_603_pp2_iter2_reg = exitcond_reg_603_pp2_iter1_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_371_p2.read()))) {
        i_1_mid2_reg_531 = i_1_mid2_fu_388_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_load_A.read())) {
        in_stream0_V_data_V_0_payload_A = in_stream0_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_load_B.read())) {
        in_stream0_V_data_V_0_payload_B = in_stream0_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_load_A.read())) {
        in_stream0_V_dest_V_0_payload_A = in_stream0_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_load_B.read())) {
        in_stream0_V_dest_V_0_payload_B = in_stream0_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_load_A.read())) {
        in_stream0_V_id_V_0_payload_A = in_stream0_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_load_B.read())) {
        in_stream0_V_id_V_0_payload_B = in_stream0_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_load_A.read())) {
        in_stream0_V_user_V_0_payload_A = in_stream0_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_load_B.read())) {
        in_stream0_V_user_V_0_payload_B = in_stream0_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_load_A.read())) {
        out_stream_V_data_V_1_payload_A = tmp_data_V_1_fu_497_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_load_B.read())) {
        out_stream_V_data_V_1_payload_B = tmp_data_V_1_fu_497_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_load_A.read())) {
        out_stream_V_dest_V_1_payload_A = sum_pix_tot_dest_V_reg_598.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_load_B.read())) {
        out_stream_V_dest_V_1_payload_B = sum_pix_tot_dest_V_reg_598.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_load_A.read())) {
        out_stream_V_id_V_1_payload_A = sum_pix_tot_id_V_reg_593.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_load_B.read())) {
        out_stream_V_id_V_1_payload_B = sum_pix_tot_id_V_reg_593.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_load_A.read())) {
        out_stream_V_last_V_1_payload_A = tmp_last_V_reg_622_pp2_iter1_reg.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_load_B.read())) {
        out_stream_V_last_V_1_payload_B = tmp_last_V_reg_622_pp2_iter1_reg.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_load_A.read())) {
        out_stream_V_user_V_1_payload_A = sum_pix_tot_user_V_reg_588.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_load_B.read())) {
        out_stream_V_user_V_1_payload_B = sum_pix_tot_user_V_reg_588.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        phitmp_reg_546 = in_stream0_V_data_V_0_data_out.read().range(15, 8);
        sum_pix1_ch0_addr_2_reg_551 =  (sc_lv<5>) (tmp_s_fu_402_p1.read());
        sum_pix2_ch0_addr_2_reg_557 =  (sc_lv<5>) (tmp_s_fu_402_p1.read());
        tmp_2_reg_541 = tmp_2_fu_429_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        sum_pix_tot_dest_V_reg_598 = dub_pix_ch0_dest_V_q0.read();
        sum_pix_tot_id_V_reg_593 = dub_pix_ch0_id_V_q0.read();
        sum_pix_tot_user_V_reg_588 = dub_pix_ch0_user_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522_pp1_iter2_reg.read()))) {
        tmp_11_reg_568 = tmp_11_fu_455_p2.read();
        tmp_8_reg_563 = tmp_8_fu_446_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_461_p2.read()))) {
        tmp_last_V_reg_622 = tmp_last_V_fu_479_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_reg_517 = tmp_fu_364_p3.read();
    }
}

void scurve_adder::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[3];
}

void scurve_adder::thread_ap_CS_fsm_pp2_stage0() {
    ap_CS_fsm_pp2_stage0 = ap_CS_fsm.read()[6];
}

void scurve_adder::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void scurve_adder::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[5];
}

void scurve_adder::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[7];
}

void scurve_adder::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void scurve_adder::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void scurve_adder::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[4];
}

void scurve_adder::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scurve_adder::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_data_V_0_vld_out.read()));
}

void scurve_adder::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_data_V_0_vld_out.read()));
}

void scurve_adder::thread_ap_block_pp2_stage0() {
    ap_block_pp2_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scurve_adder::thread_ap_block_pp2_stage0_01001() {
    ap_block_pp2_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scurve_adder::thread_ap_block_pp2_stage0_11001() {
    ap_block_pp2_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp2_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read())));
}

void scurve_adder::thread_ap_block_pp2_stage0_subdone() {
    ap_block_pp2_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp2_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read())));
}

void scurve_adder::thread_ap_block_state11_pp2_stage0_iter0() {
    ap_block_state11_pp2_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scurve_adder::thread_ap_block_state12_pp2_stage0_iter1() {
    ap_block_state12_pp2_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scurve_adder::thread_ap_block_state13_io() {
    ap_block_state13_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603_pp2_iter1_reg.read()) && esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void scurve_adder::thread_ap_block_state13_pp2_stage0_iter2() {
    ap_block_state13_pp2_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scurve_adder::thread_ap_block_state14_io() {
    ap_block_state14_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603_pp2_iter2_reg.read()) && esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void scurve_adder::thread_ap_block_state14_pp2_stage0_iter3() {
    ap_block_state14_pp2_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scurve_adder::thread_ap_block_state15() {
    ap_block_state15 = (esl_seteq<1,1,1>(out_stream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void scurve_adder::thread_ap_block_state4_pp1_stage0_iter0() {
    ap_block_state4_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scurve_adder::thread_ap_block_state5_pp1_stage0_iter1() {
    ap_block_state5_pp1_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream0_V_data_V_0_vld_out.read()));
}

void scurve_adder::thread_ap_block_state6_pp1_stage0_iter2() {
    ap_block_state6_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scurve_adder::thread_ap_block_state7_pp1_stage0_iter3() {
    ap_block_state7_pp1_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scurve_adder::thread_ap_block_state8_pp1_stage0_iter4() {
    ap_block_state8_pp1_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scurve_adder::thread_ap_condition_pp1_exit_iter0_state4() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_371_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state4 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state4 = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_condition_pp2_exit_iter0_state11() {
    if (esl_seteq<1,1,1>(exitcond_fu_461_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp2_exit_iter0_state11 = ap_const_logic_1;
    } else {
        ap_condition_pp2_exit_iter0_state11 = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(out_stream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void scurve_adder::thread_ap_enable_pp2() {
    ap_enable_pp2 = (ap_idle_pp2.read() ^ ap_const_logic_1);
}

void scurve_adder::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter4.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_idle_pp2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter3.read()))) {
        ap_idle_pp2 = ap_const_logic_1;
    } else {
        ap_idle_pp2 = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(out_stream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void scurve_adder::thread_dub_pix_ch0_dest_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        dub_pix_ch0_dest_V_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        dub_pix_ch0_dest_V_address0 =  (sc_lv<5>) (tmp_s_fu_402_p1.read());
    } else {
        dub_pix_ch0_dest_V_address0 = "XXXXX";
    }
}

void scurve_adder::thread_dub_pix_ch0_dest_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        dub_pix_ch0_dest_V_ce0 = ap_const_logic_1;
    } else {
        dub_pix_ch0_dest_V_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_ch0_dest_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        dub_pix_ch0_dest_V_we0 = ap_const_logic_1;
    } else {
        dub_pix_ch0_dest_V_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_ch0_id_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        dub_pix_ch0_id_V_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        dub_pix_ch0_id_V_address0 =  (sc_lv<5>) (tmp_s_fu_402_p1.read());
    } else {
        dub_pix_ch0_id_V_address0 = "XXXXX";
    }
}

void scurve_adder::thread_dub_pix_ch0_id_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        dub_pix_ch0_id_V_ce0 = ap_const_logic_1;
    } else {
        dub_pix_ch0_id_V_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_ch0_id_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        dub_pix_ch0_id_V_we0 = ap_const_logic_1;
    } else {
        dub_pix_ch0_id_V_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_ch0_user_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        dub_pix_ch0_user_V_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        dub_pix_ch0_user_V_address0 =  (sc_lv<5>) (tmp_s_fu_402_p1.read());
    } else {
        dub_pix_ch0_user_V_address0 = "XXXXX";
    }
}

void scurve_adder::thread_dub_pix_ch0_user_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        dub_pix_ch0_user_V_ce0 = ap_const_logic_1;
    } else {
        dub_pix_ch0_user_V_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_ch0_user_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        dub_pix_ch0_user_V_we0 = ap_const_logic_1;
    } else {
        dub_pix_ch0_user_V_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_exitcond1_fu_346_p2() {
    exitcond1_fu_346_p2 = (!i_reg_292.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_292.read() == ap_const_lv6_20);
}

void scurve_adder::thread_exitcond2_fu_382_p2() {
    exitcond2_fu_382_p2 = (!i_1_reg_314.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_314.read() == ap_const_lv6_20);
}

void scurve_adder::thread_exitcond_flatten_fu_371_p2() {
    exitcond_flatten_fu_371_p2 = (!indvar_flatten_reg_303.read().is_01() || !tmp_reg_517.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_303.read() == tmp_reg_517.read());
}

void scurve_adder::thread_exitcond_fu_461_p2() {
    exitcond_fu_461_p2 = (!i_2_reg_325.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_325.read() == ap_const_lv6_20);
}

void scurve_adder::thread_i_1_mid2_fu_388_p3() {
    i_1_mid2_fu_388_p3 = (!exitcond2_fu_382_p2.read()[0].is_01())? sc_lv<6>(): ((exitcond2_fu_382_p2.read()[0].to_bool())? ap_const_lv6_0: i_1_reg_314.read());
}

void scurve_adder::thread_i_3_fu_352_p2() {
    i_3_fu_352_p2 = (!i_reg_292.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_292.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void scurve_adder::thread_i_4_fu_467_p2() {
    i_4_fu_467_p2 = (!i_2_reg_325.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_2_reg_325.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void scurve_adder::thread_i_5_fu_396_p2() {
    i_5_fu_396_p2 = (!ap_const_lv6_1.is_01() || !i_1_mid2_fu_388_p3.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_1) + sc_biguint<6>(i_1_mid2_fu_388_p3.read()));
}

void scurve_adder::thread_in_stream0_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522.read()))) {
        in_stream0_TDATA_blk_n = in_stream0_V_data_V_0_state.read()[0];
    } else {
        in_stream0_TDATA_blk_n = ap_const_logic_1;
    }
}

void scurve_adder::thread_in_stream0_TREADY() {
    in_stream0_TREADY = in_stream0_V_dest_V_0_state.read()[1];
}

void scurve_adder::thread_in_stream0_V_data_V_0_ack_in() {
    in_stream0_V_data_V_0_ack_in = in_stream0_V_data_V_0_state.read()[1];
}

void scurve_adder::thread_in_stream0_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        in_stream0_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream0_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void scurve_adder::thread_in_stream0_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_data_V_0_sel.read())) {
        in_stream0_V_data_V_0_data_out = in_stream0_V_data_V_0_payload_B.read();
    } else {
        in_stream0_V_data_V_0_data_out = in_stream0_V_data_V_0_payload_A.read();
    }
}

void scurve_adder::thread_in_stream0_V_data_V_0_load_A() {
    in_stream0_V_data_V_0_load_A = (in_stream0_V_data_V_0_state_cmp_full.read() & ~in_stream0_V_data_V_0_sel_wr.read());
}

void scurve_adder::thread_in_stream0_V_data_V_0_load_B() {
    in_stream0_V_data_V_0_load_B = (in_stream0_V_data_V_0_sel_wr.read() & in_stream0_V_data_V_0_state_cmp_full.read());
}

void scurve_adder::thread_in_stream0_V_data_V_0_sel() {
    in_stream0_V_data_V_0_sel = in_stream0_V_data_V_0_sel_rd.read();
}

void scurve_adder::thread_in_stream0_V_data_V_0_state_cmp_full() {
    in_stream0_V_data_V_0_state_cmp_full =  (sc_logic) ((!in_stream0_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_stream0_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void scurve_adder::thread_in_stream0_V_data_V_0_vld_in() {
    in_stream0_V_data_V_0_vld_in = in_stream0_TVALID.read();
}

void scurve_adder::thread_in_stream0_V_data_V_0_vld_out() {
    in_stream0_V_data_V_0_vld_out = in_stream0_V_data_V_0_state.read()[0];
}

void scurve_adder::thread_in_stream0_V_dest_V_0_ack_in() {
    in_stream0_V_dest_V_0_ack_in = in_stream0_V_dest_V_0_state.read()[1];
}

void scurve_adder::thread_in_stream0_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        in_stream0_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream0_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void scurve_adder::thread_in_stream0_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_dest_V_0_sel.read())) {
        in_stream0_V_dest_V_0_data_out = in_stream0_V_dest_V_0_payload_B.read();
    } else {
        in_stream0_V_dest_V_0_data_out = in_stream0_V_dest_V_0_payload_A.read();
    }
}

void scurve_adder::thread_in_stream0_V_dest_V_0_load_A() {
    in_stream0_V_dest_V_0_load_A = (in_stream0_V_dest_V_0_state_cmp_full.read() & ~in_stream0_V_dest_V_0_sel_wr.read());
}

void scurve_adder::thread_in_stream0_V_dest_V_0_load_B() {
    in_stream0_V_dest_V_0_load_B = (in_stream0_V_dest_V_0_sel_wr.read() & in_stream0_V_dest_V_0_state_cmp_full.read());
}

void scurve_adder::thread_in_stream0_V_dest_V_0_sel() {
    in_stream0_V_dest_V_0_sel = in_stream0_V_dest_V_0_sel_rd.read();
}

void scurve_adder::thread_in_stream0_V_dest_V_0_state_cmp_full() {
    in_stream0_V_dest_V_0_state_cmp_full =  (sc_logic) ((!in_stream0_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_stream0_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void scurve_adder::thread_in_stream0_V_dest_V_0_vld_in() {
    in_stream0_V_dest_V_0_vld_in = in_stream0_TVALID.read();
}

void scurve_adder::thread_in_stream0_V_dest_V_0_vld_out() {
    in_stream0_V_dest_V_0_vld_out = in_stream0_V_dest_V_0_state.read()[0];
}

void scurve_adder::thread_in_stream0_V_id_V_0_ack_in() {
    in_stream0_V_id_V_0_ack_in = in_stream0_V_id_V_0_state.read()[1];
}

void scurve_adder::thread_in_stream0_V_id_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        in_stream0_V_id_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream0_V_id_V_0_ack_out = ap_const_logic_0;
    }
}

void scurve_adder::thread_in_stream0_V_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_id_V_0_sel.read())) {
        in_stream0_V_id_V_0_data_out = in_stream0_V_id_V_0_payload_B.read();
    } else {
        in_stream0_V_id_V_0_data_out = in_stream0_V_id_V_0_payload_A.read();
    }
}

void scurve_adder::thread_in_stream0_V_id_V_0_load_A() {
    in_stream0_V_id_V_0_load_A = (in_stream0_V_id_V_0_state_cmp_full.read() & ~in_stream0_V_id_V_0_sel_wr.read());
}

void scurve_adder::thread_in_stream0_V_id_V_0_load_B() {
    in_stream0_V_id_V_0_load_B = (in_stream0_V_id_V_0_sel_wr.read() & in_stream0_V_id_V_0_state_cmp_full.read());
}

void scurve_adder::thread_in_stream0_V_id_V_0_sel() {
    in_stream0_V_id_V_0_sel = in_stream0_V_id_V_0_sel_rd.read();
}

void scurve_adder::thread_in_stream0_V_id_V_0_state_cmp_full() {
    in_stream0_V_id_V_0_state_cmp_full =  (sc_logic) ((!in_stream0_V_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_stream0_V_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void scurve_adder::thread_in_stream0_V_id_V_0_vld_in() {
    in_stream0_V_id_V_0_vld_in = in_stream0_TVALID.read();
}

void scurve_adder::thread_in_stream0_V_id_V_0_vld_out() {
    in_stream0_V_id_V_0_vld_out = in_stream0_V_id_V_0_state.read()[0];
}

void scurve_adder::thread_in_stream0_V_user_V_0_ack_in() {
    in_stream0_V_user_V_0_ack_in = in_stream0_V_user_V_0_state.read()[1];
}

void scurve_adder::thread_in_stream0_V_user_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        in_stream0_V_user_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream0_V_user_V_0_ack_out = ap_const_logic_0;
    }
}

void scurve_adder::thread_in_stream0_V_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream0_V_user_V_0_sel.read())) {
        in_stream0_V_user_V_0_data_out = in_stream0_V_user_V_0_payload_B.read();
    } else {
        in_stream0_V_user_V_0_data_out = in_stream0_V_user_V_0_payload_A.read();
    }
}

void scurve_adder::thread_in_stream0_V_user_V_0_load_A() {
    in_stream0_V_user_V_0_load_A = (in_stream0_V_user_V_0_state_cmp_full.read() & ~in_stream0_V_user_V_0_sel_wr.read());
}

void scurve_adder::thread_in_stream0_V_user_V_0_load_B() {
    in_stream0_V_user_V_0_load_B = (in_stream0_V_user_V_0_sel_wr.read() & in_stream0_V_user_V_0_state_cmp_full.read());
}

void scurve_adder::thread_in_stream0_V_user_V_0_sel() {
    in_stream0_V_user_V_0_sel = in_stream0_V_user_V_0_sel_rd.read();
}

void scurve_adder::thread_in_stream0_V_user_V_0_state_cmp_full() {
    in_stream0_V_user_V_0_state_cmp_full =  (sc_logic) ((!in_stream0_V_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_stream0_V_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void scurve_adder::thread_in_stream0_V_user_V_0_vld_in() {
    in_stream0_V_user_V_0_vld_in = in_stream0_TVALID.read();
}

void scurve_adder::thread_in_stream0_V_user_V_0_vld_out() {
    in_stream0_V_user_V_0_vld_out = in_stream0_V_user_V_0_state.read()[0];
}

void scurve_adder::thread_indvar_flatten_next_fu_376_p2() {
    indvar_flatten_next_fu_376_p2 = (!indvar_flatten_reg_303.read().is_01() || !ap_const_lv21_1.is_01())? sc_lv<21>(): (sc_biguint<21>(indvar_flatten_reg_303.read()) + sc_biguint<21>(ap_const_lv21_1));
}

void scurve_adder::thread_out_stream_TDATA() {
    out_stream_TDATA = out_stream_V_data_V_1_data_out.read();
}

void scurve_adder::thread_out_stream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603_pp2_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp2_iter3.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603_pp2_iter2_reg.read())))) {
        out_stream_TDATA_blk_n = out_stream_V_data_V_1_state.read()[1];
    } else {
        out_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void scurve_adder::thread_out_stream_TDEST() {
    out_stream_TDEST = out_stream_V_dest_V_1_data_out.read();
}

void scurve_adder::thread_out_stream_TID() {
    out_stream_TID = out_stream_V_id_V_1_data_out.read();
}

void scurve_adder::thread_out_stream_TKEEP() {
    out_stream_TKEEP = out_stream_V_keep_V_1_data_out.read();
}

void scurve_adder::thread_out_stream_TLAST() {
    out_stream_TLAST = out_stream_V_last_V_1_data_out.read();
}

void scurve_adder::thread_out_stream_TSTRB() {
    out_stream_TSTRB = out_stream_V_strb_V_1_data_out.read();
}

void scurve_adder::thread_out_stream_TUSER() {
    out_stream_TUSER = out_stream_V_user_V_1_data_out.read();
}

void scurve_adder::thread_out_stream_TVALID() {
    out_stream_TVALID = out_stream_V_dest_V_1_state.read()[0];
}

void scurve_adder::thread_out_stream_V_data_V_1_ack_in() {
    out_stream_V_data_V_1_ack_in = out_stream_V_data_V_1_state.read()[1];
}

void scurve_adder::thread_out_stream_V_data_V_1_ack_out() {
    out_stream_V_data_V_1_ack_out = out_stream_TREADY.read();
}

void scurve_adder::thread_out_stream_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_sel.read())) {
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_B.read();
    } else {
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_A.read();
    }
}

void scurve_adder::thread_out_stream_V_data_V_1_load_A() {
    out_stream_V_data_V_1_load_A = (out_stream_V_data_V_1_state_cmp_full.read() & ~out_stream_V_data_V_1_sel_wr.read());
}

void scurve_adder::thread_out_stream_V_data_V_1_load_B() {
    out_stream_V_data_V_1_load_B = (out_stream_V_data_V_1_sel_wr.read() & out_stream_V_data_V_1_state_cmp_full.read());
}

void scurve_adder::thread_out_stream_V_data_V_1_sel() {
    out_stream_V_data_V_1_sel = out_stream_V_data_V_1_sel_rd.read();
}

void scurve_adder::thread_out_stream_V_data_V_1_state_cmp_full() {
    out_stream_V_data_V_1_state_cmp_full =  (sc_logic) ((!out_stream_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void scurve_adder::thread_out_stream_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603_pp2_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        out_stream_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void scurve_adder::thread_out_stream_V_data_V_1_vld_out() {
    out_stream_V_data_V_1_vld_out = out_stream_V_data_V_1_state.read()[0];
}

void scurve_adder::thread_out_stream_V_dest_V_1_ack_in() {
    out_stream_V_dest_V_1_ack_in = out_stream_V_dest_V_1_state.read()[1];
}

void scurve_adder::thread_out_stream_V_dest_V_1_ack_out() {
    out_stream_V_dest_V_1_ack_out = out_stream_TREADY.read();
}

void scurve_adder::thread_out_stream_V_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_sel.read())) {
        out_stream_V_dest_V_1_data_out = out_stream_V_dest_V_1_payload_B.read();
    } else {
        out_stream_V_dest_V_1_data_out = out_stream_V_dest_V_1_payload_A.read();
    }
}

void scurve_adder::thread_out_stream_V_dest_V_1_load_A() {
    out_stream_V_dest_V_1_load_A = (out_stream_V_dest_V_1_state_cmp_full.read() & ~out_stream_V_dest_V_1_sel_wr.read());
}

void scurve_adder::thread_out_stream_V_dest_V_1_load_B() {
    out_stream_V_dest_V_1_load_B = (out_stream_V_dest_V_1_sel_wr.read() & out_stream_V_dest_V_1_state_cmp_full.read());
}

void scurve_adder::thread_out_stream_V_dest_V_1_sel() {
    out_stream_V_dest_V_1_sel = out_stream_V_dest_V_1_sel_rd.read();
}

void scurve_adder::thread_out_stream_V_dest_V_1_state_cmp_full() {
    out_stream_V_dest_V_1_state_cmp_full =  (sc_logic) ((!out_stream_V_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void scurve_adder::thread_out_stream_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603_pp2_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        out_stream_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void scurve_adder::thread_out_stream_V_dest_V_1_vld_out() {
    out_stream_V_dest_V_1_vld_out = out_stream_V_dest_V_1_state.read()[0];
}

void scurve_adder::thread_out_stream_V_id_V_1_ack_in() {
    out_stream_V_id_V_1_ack_in = out_stream_V_id_V_1_state.read()[1];
}

void scurve_adder::thread_out_stream_V_id_V_1_ack_out() {
    out_stream_V_id_V_1_ack_out = out_stream_TREADY.read();
}

void scurve_adder::thread_out_stream_V_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_sel.read())) {
        out_stream_V_id_V_1_data_out = out_stream_V_id_V_1_payload_B.read();
    } else {
        out_stream_V_id_V_1_data_out = out_stream_V_id_V_1_payload_A.read();
    }
}

void scurve_adder::thread_out_stream_V_id_V_1_load_A() {
    out_stream_V_id_V_1_load_A = (out_stream_V_id_V_1_state_cmp_full.read() & ~out_stream_V_id_V_1_sel_wr.read());
}

void scurve_adder::thread_out_stream_V_id_V_1_load_B() {
    out_stream_V_id_V_1_load_B = (out_stream_V_id_V_1_sel_wr.read() & out_stream_V_id_V_1_state_cmp_full.read());
}

void scurve_adder::thread_out_stream_V_id_V_1_sel() {
    out_stream_V_id_V_1_sel = out_stream_V_id_V_1_sel_rd.read();
}

void scurve_adder::thread_out_stream_V_id_V_1_state_cmp_full() {
    out_stream_V_id_V_1_state_cmp_full =  (sc_logic) ((!out_stream_V_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void scurve_adder::thread_out_stream_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603_pp2_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        out_stream_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void scurve_adder::thread_out_stream_V_id_V_1_vld_out() {
    out_stream_V_id_V_1_vld_out = out_stream_V_id_V_1_state.read()[0];
}

void scurve_adder::thread_out_stream_V_keep_V_1_ack_in() {
    out_stream_V_keep_V_1_ack_in = out_stream_V_keep_V_1_state.read()[1];
}

void scurve_adder::thread_out_stream_V_keep_V_1_ack_out() {
    out_stream_V_keep_V_1_ack_out = out_stream_TREADY.read();
}

void scurve_adder::thread_out_stream_V_keep_V_1_data_out() {
    out_stream_V_keep_V_1_data_out = ap_const_lv8_3F;
}

void scurve_adder::thread_out_stream_V_keep_V_1_sel() {
    out_stream_V_keep_V_1_sel = out_stream_V_keep_V_1_sel_rd.read();
}

void scurve_adder::thread_out_stream_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603_pp2_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        out_stream_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void scurve_adder::thread_out_stream_V_keep_V_1_vld_out() {
    out_stream_V_keep_V_1_vld_out = out_stream_V_keep_V_1_state.read()[0];
}

void scurve_adder::thread_out_stream_V_last_V_1_ack_in() {
    out_stream_V_last_V_1_ack_in = out_stream_V_last_V_1_state.read()[1];
}

void scurve_adder::thread_out_stream_V_last_V_1_ack_out() {
    out_stream_V_last_V_1_ack_out = out_stream_TREADY.read();
}

void scurve_adder::thread_out_stream_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_sel.read())) {
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_B.read();
    } else {
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_A.read();
    }
}

void scurve_adder::thread_out_stream_V_last_V_1_load_A() {
    out_stream_V_last_V_1_load_A = (out_stream_V_last_V_1_state_cmp_full.read() & ~out_stream_V_last_V_1_sel_wr.read());
}

void scurve_adder::thread_out_stream_V_last_V_1_load_B() {
    out_stream_V_last_V_1_load_B = (out_stream_V_last_V_1_sel_wr.read() & out_stream_V_last_V_1_state_cmp_full.read());
}

void scurve_adder::thread_out_stream_V_last_V_1_sel() {
    out_stream_V_last_V_1_sel = out_stream_V_last_V_1_sel_rd.read();
}

void scurve_adder::thread_out_stream_V_last_V_1_state_cmp_full() {
    out_stream_V_last_V_1_state_cmp_full =  (sc_logic) ((!out_stream_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void scurve_adder::thread_out_stream_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603_pp2_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        out_stream_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void scurve_adder::thread_out_stream_V_last_V_1_vld_out() {
    out_stream_V_last_V_1_vld_out = out_stream_V_last_V_1_state.read()[0];
}

void scurve_adder::thread_out_stream_V_strb_V_1_ack_in() {
    out_stream_V_strb_V_1_ack_in = out_stream_V_strb_V_1_state.read()[1];
}

void scurve_adder::thread_out_stream_V_strb_V_1_ack_out() {
    out_stream_V_strb_V_1_ack_out = out_stream_TREADY.read();
}

void scurve_adder::thread_out_stream_V_strb_V_1_data_out() {
    out_stream_V_strb_V_1_data_out = ap_const_lv8_3F;
}

void scurve_adder::thread_out_stream_V_strb_V_1_sel() {
    out_stream_V_strb_V_1_sel = out_stream_V_strb_V_1_sel_rd.read();
}

void scurve_adder::thread_out_stream_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603_pp2_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        out_stream_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void scurve_adder::thread_out_stream_V_strb_V_1_vld_out() {
    out_stream_V_strb_V_1_vld_out = out_stream_V_strb_V_1_state.read()[0];
}

void scurve_adder::thread_out_stream_V_user_V_1_ack_in() {
    out_stream_V_user_V_1_ack_in = out_stream_V_user_V_1_state.read()[1];
}

void scurve_adder::thread_out_stream_V_user_V_1_ack_out() {
    out_stream_V_user_V_1_ack_out = out_stream_TREADY.read();
}

void scurve_adder::thread_out_stream_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_sel.read())) {
        out_stream_V_user_V_1_data_out = out_stream_V_user_V_1_payload_B.read();
    } else {
        out_stream_V_user_V_1_data_out = out_stream_V_user_V_1_payload_A.read();
    }
}

void scurve_adder::thread_out_stream_V_user_V_1_load_A() {
    out_stream_V_user_V_1_load_A = (out_stream_V_user_V_1_state_cmp_full.read() & ~out_stream_V_user_V_1_sel_wr.read());
}

void scurve_adder::thread_out_stream_V_user_V_1_load_B() {
    out_stream_V_user_V_1_load_B = (out_stream_V_user_V_1_sel_wr.read() & out_stream_V_user_V_1_state_cmp_full.read());
}

void scurve_adder::thread_out_stream_V_user_V_1_sel() {
    out_stream_V_user_V_1_sel = out_stream_V_user_V_1_sel_rd.read();
}

void scurve_adder::thread_out_stream_V_user_V_1_state_cmp_full() {
    out_stream_V_user_V_1_state_cmp_full =  (sc_logic) ((!out_stream_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void scurve_adder::thread_out_stream_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_603_pp2_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        out_stream_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void scurve_adder::thread_out_stream_V_user_V_1_vld_out() {
    out_stream_V_user_V_1_vld_out = out_stream_V_user_V_1_state.read()[0];
}

void scurve_adder::thread_sum_pix1_ch0_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        sum_pix1_ch0_address0 =  (sc_lv<5>) (tmp_s_fu_402_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sum_pix1_ch0_address0 =  (sc_lv<5>) (tmp_1_fu_358_p1.read());
    } else {
        sum_pix1_ch0_address0 = "XXXXX";
    }
}

void scurve_adder::thread_sum_pix1_ch0_address1() {
    if ((esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp2_iter0.read(), ap_const_logic_1))) {
        sum_pix1_ch0_address1 =  (sc_lv<5>) (tmp_3_fu_473_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp1_iter4.read(), ap_const_logic_1))) {
        sum_pix1_ch0_address1 = sum_pix1_ch0_addr_2_reg_551_pp1_iter3_reg.read();
    } else {
        sum_pix1_ch0_address1 = "XXXXX";
    }
}

void scurve_adder::thread_sum_pix1_ch0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        sum_pix1_ch0_ce0 = ap_const_logic_1;
    } else {
        sum_pix1_ch0_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix1_ch0_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp2_iter0.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter4.read(), ap_const_logic_1)))) {
        sum_pix1_ch0_ce1 = ap_const_logic_1;
    } else {
        sum_pix1_ch0_ce1 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix1_ch0_we0() {
    if ((esl_seteq<1,1,1>(exitcond1_fu_346_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        sum_pix1_ch0_we0 = ap_const_logic_1;
    } else {
        sum_pix1_ch0_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix1_ch0_we1() {
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter4.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522_pp1_iter3_reg.read()))) {
        sum_pix1_ch0_we1 = ap_const_logic_1;
    } else {
        sum_pix1_ch0_we1 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix2_ch0_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        sum_pix2_ch0_address0 =  (sc_lv<5>) (tmp_s_fu_402_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sum_pix2_ch0_address0 =  (sc_lv<5>) (tmp_1_fu_358_p1.read());
    } else {
        sum_pix2_ch0_address0 = "XXXXX";
    }
}

void scurve_adder::thread_sum_pix2_ch0_address1() {
    if ((esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp2_iter0.read(), ap_const_logic_1))) {
        sum_pix2_ch0_address1 =  (sc_lv<5>) (tmp_3_fu_473_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp1_iter4.read(), ap_const_logic_1))) {
        sum_pix2_ch0_address1 = sum_pix2_ch0_addr_2_reg_557_pp1_iter3_reg.read();
    } else {
        sum_pix2_ch0_address1 = "XXXXX";
    }
}

void scurve_adder::thread_sum_pix2_ch0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        sum_pix2_ch0_ce0 = ap_const_logic_1;
    } else {
        sum_pix2_ch0_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix2_ch0_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp2_iter0.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter4.read(), ap_const_logic_1)))) {
        sum_pix2_ch0_ce1 = ap_const_logic_1;
    } else {
        sum_pix2_ch0_ce1 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix2_ch0_we0() {
    if ((esl_seteq<1,1,1>(exitcond1_fu_346_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        sum_pix2_ch0_we0 = ap_const_logic_1;
    } else {
        sum_pix2_ch0_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix2_ch0_we1() {
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter4.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_522_pp1_iter3_reg.read()))) {
        sum_pix2_ch0_we1 = ap_const_logic_1;
    } else {
        sum_pix2_ch0_we1 = ap_const_logic_0;
    }
}

void scurve_adder::thread_tmp_10_fu_452_p1() {
    tmp_10_fu_452_p1 = esl_zext<32,8>(phitmp_reg_546_pp1_iter2_reg.read());
}

void scurve_adder::thread_tmp_11_fu_455_p2() {
    tmp_11_fu_455_p2 = (!tmp_10_fu_452_p1.read().is_01() || !reg_341.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_10_fu_452_p1.read()) + sc_biguint<32>(reg_341.read()));
}

void scurve_adder::thread_tmp_1_fu_358_p1() {
    tmp_1_fu_358_p1 = esl_zext<64,6>(i_reg_292.read());
}

void scurve_adder::thread_tmp_2_fu_429_p1() {
    tmp_2_fu_429_p1 = in_stream0_V_data_V_0_data_out.read().range(8-1, 0);
}

void scurve_adder::thread_tmp_3_fu_473_p1() {
    tmp_3_fu_473_p1 = esl_zext<64,6>(i_2_reg_325.read());
}

void scurve_adder::thread_tmp_5_fu_485_p3() {
    tmp_5_fu_485_p3 = esl_concat<32,32>(reg_341.read(), ap_const_lv32_0);
}

void scurve_adder::thread_tmp_6_fu_493_p1() {
    tmp_6_fu_493_p1 = esl_sext<64,32>(reg_336.read());
}

void scurve_adder::thread_tmp_8_fu_446_p2() {
    tmp_8_fu_446_p2 = (!tmp_9_fu_443_p1.read().is_01() || !reg_336.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_9_fu_443_p1.read()) + sc_biguint<32>(reg_336.read()));
}

void scurve_adder::thread_tmp_9_fu_443_p1() {
    tmp_9_fu_443_p1 = esl_zext<32,8>(tmp_2_reg_541_pp1_iter2_reg.read());
}

void scurve_adder::thread_tmp_data_V_1_fu_497_p2() {
    tmp_data_V_1_fu_497_p2 = (tmp_5_fu_485_p3.read() | tmp_6_fu_493_p1.read());
}

void scurve_adder::thread_tmp_fu_364_p3() {
    tmp_fu_364_p3 = esl_concat<16,5>(N_ADDS_read_reg_504.read(), ap_const_lv5_0);
}

void scurve_adder::thread_tmp_last_V_fu_479_p2() {
    tmp_last_V_fu_479_p2 = (!i_2_reg_325.read().is_01() || !ap_const_lv6_1F.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_325.read() == ap_const_lv6_1F);
}

void scurve_adder::thread_tmp_s_fu_402_p1() {
    tmp_s_fu_402_p1 = esl_zext<64,6>(i_1_mid2_reg_531.read());
}

void scurve_adder::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_346_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 8 : 
            if ((!(esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_371_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) && !(esl_seteq<1,1,1>(ap_enable_reg_pp1_iter4.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter3.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter4.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter3.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(exitcond_flatten_fu_371_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            break;
        case 64 : 
            if ((!(esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_461_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp2_stage0_subdone.read())) && !(esl_seteq<1,1,1>(ap_enable_reg_pp2_iter2.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter3.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp2_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp2_iter2.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp2_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp2_stage0_subdone.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(exitcond_fu_461_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp2_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp2_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            }
            break;
        case 128 : 
            if ((!(esl_seteq<1,1,1>(out_stream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void scurve_adder::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream0_TDATA\" :  \"" << in_stream0_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream0_TVALID\" :  \"" << in_stream0_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_stream0_TREADY\" :  \"" << in_stream0_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream0_TKEEP\" :  \"" << in_stream0_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream0_TSTRB\" :  \"" << in_stream0_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream0_TUSER\" :  \"" << in_stream0_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream0_TLAST\" :  \"" << in_stream0_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream0_TID\" :  \"" << in_stream0_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream0_TDEST\" :  \"" << in_stream0_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TDATA\" :  \"" << out_stream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TVALID\" :  \"" << out_stream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_stream_TREADY\" :  \"" << out_stream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TKEEP\" :  \"" << out_stream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TSTRB\" :  \"" << out_stream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TUSER\" :  \"" << out_stream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TLAST\" :  \"" << out_stream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TID\" :  \"" << out_stream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TDEST\" :  \"" << out_stream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

